<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>高级网络编程Thread</title>
    <link href="/2020/11/08/%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BThread/"/>
    <url>/2020/11/08/%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BThread/</url>
    
    <content type="html"><![CDATA[<center>别人写的都太好了，我这里直接甩连接了。</center><span id="more"></span><hr><blockquote><p><a href="https://blog.csdn.net/Evankaka/article/details/44153709">Java多线程学习（吐血超详细总结）</a><br><a href="https://juejin.im/post/6844904030930468872#heading-16">Java 线程基础</a><br><a href="https://www.jianshu.com/p/6c62cd06fb89">实操七</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 部署问题</title>
    <link href="/2020/08/25/hexo-%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/"/>
    <url>/2020/08/25/hexo-%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<center>报错FATAL Cannot read property 'replace' of null</center><span id="more"></span><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">FATAL Cannot read property &#x27;replace&#x27; of null<br>TypeError: Cannot read property &#x27;replace&#x27; of null<br>    at fs.exists.then.then.then.config (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>oad_config.js:34:31)<br>    at tryCatcher (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\u</span>til.js:16:23)<br>    at Promise._settlePromiseFromHandler (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:512:31)<br>    at Promise._settlePromise (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:569:18)<br>    at Promise._settlePromise0 (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:614:10)<br>    at Promise._settlePromises (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:694:18)<br>    at _drainQueueStep (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:138:12)<br>    at _drainQueue (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:131:9)<br>    at Async._drainQueues (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:147:5)<br>    at Immediate.Async.drainQueues [as _onImmediate] (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:17:14)<br>    at runCallback (timers.js:705:18)<br>    at tryOnImmediate (timers.js:676:5)<br>    at processImmediate (timers.js:658:5)<br></code></pre></td></tr></table></figure><p>之前配置<br>url: <a href="https://leevisin.github.io/">https://leevisin.github.io/</a><br>root: </p><p>在_config.yml文件中的root下改为如下<br>url: <a href="https://leevisin.github.io/">https://leevisin.github.io/</a><br>root: /</p><hr><p>参考文献</p><blockquote><p><a href="https://github.com/hexojs/hexo/issues/2006">hexo issues #2006</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tensorflow 安装踩坑</title>
    <link href="/2020/08/24/Tensorflow-%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91/"/>
    <url>/2020/08/24/Tensorflow-%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<center>最近在琢磨琢磨TensorFlow，花了很多时间才搭建成功，在此记下自己碰到的问题</center><span id="more"></span><h1 id="下载Python"><a href="#下载Python" class="headerlink" title="下载Python"></a>下载Python</h1><font color="red">注意：1、机器必须是64位的，TensorFlow不支持32位！TensorFlow不支持32位！TensorFlow不支持32位！2、Python必须装64位的！</font><p><strong>这个Tensorflow在官网对系统要求<br>Python 3.5-3.7<br>pip 19.0 或更高版本（需要 manylinux2010 支持）<br>而Keras 兼容的 Python 版本: Python 2.7-3.6。<br>所以下载的版本我就选择了python 3.6.0 64位</strong><br>现在的Python已经更新到了3.8.3版本了，更新太快了，但是新的不一定都支持。</p><p>下载完了之后，安装，<strong>点击那个Add to Path选项</strong>，如果可以直接python就可以忽略下面了。<br>调环境变量，在<a href="https://www.runoob.com/python/python-install.html">菜鸟教程</a>上都有，只用把上面用户的系统的系统变量调对了就可以。同时要在PyCharm调整编译器，在<a href="https://www.runoob.com/w3cnote/pycharm-windows-install.html">这里</a>也有教程。</p><h1 id="更新pip和virtualenv"><a href="#更新pip和virtualenv" class="headerlink" title="更新pip和virtualenv"></a>更新pip和virtualenv</h1><p>pip一定要更新到19.0版本以后，现在最新的是20.0<br>virtualenv没看出来有什么用处，我好像虚拟环境用，但我直接在系统环境里装的</p><h1 id="下载Tensorflow"><a href="#下载Tensorflow" class="headerlink" title="下载Tensorflow"></a>下载Tensorflow</h1><p>如果直接使用 pip install –upgrade tensorflow由于国内网络问题，会导致下载不下来，根本不可能安装上。<br>所以可以在<a href="http://mirrors.aliyun.com/pypi/simple/">国内镜像</a>去下载，我这里选的阿里云的镜像。需要手动下载的，在<a href="http://mirrors.aliyun.com/pypi/simple/">这里</a>直接Ctrl + F搜索 tensorflow就可以找到下载地方了。<br><img src="https://upload-images.jianshu.io/upload_images/1925876-f7655d761ad346e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp"></p><h1 id="安装Tensorflow"><a href="#安装Tensorflow" class="headerlink" title="安装Tensorflow"></a>安装Tensorflow</h1><p>安装命令pip install建议在PowerShell里面执行，Powershell的打开方式是在目标文件夹下按住shift+鼠标右键，选择Window PowerShell，就打开了。<br>直接在下载到的TensorFlow目录下（就是你刚才把Tensorflow下载的地方）执行pip install tensorflow-2.3.0-cp36-cp36m-win_amd64.whl 期间会安装一些TensorFLow的依赖，同样的，可能安装失败。因为文件一大就下载不下来，所以解决的最好办法就是手动下载，再安装。<br>如我的numpy安装失败了</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">Collecting numpy&gt;=1.11.0 (from tensorflow==1.0.0)<br>  Downloading numpy-1.12.0-cp35-none-win_amd64.whl (7.7MB)<br>Exception:<br>Traceback (most recent call last):<br>  File &quot;c:<span class="hljs-symbol">\p</span>ython35-3<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\s</span>ite-packages<span class="hljs-symbol">\p</span>ip<span class="hljs-symbol">\_</span>vendor<span class="hljs-symbol">\r</span>equests<span class="hljs-symbol">\p</span>ackages<span class="hljs-symbol">\u</span>rllib3<span class="hljs-symbol">\r</span>esponse.py&quot;, line 232, in _error_catcher<br>    yield<br>  File &quot;c:<span class="hljs-symbol">\p</span>ython35-3<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\s</span>ite-packages<span class="hljs-symbol">\p</span>ip<span class="hljs-symbol">\_</span>vendor<span class="hljs-symbol">\r</span>equests<span class="hljs-symbol">\p</span>ackages<span class="hljs-symbol">\u</span>rllib3<span class="hljs-symbol">\r</span>esponse.py&quot;, line 314, in read<br>    data = self._fp.read(amt)<br></code></pre></td></tr></table></figure><p>在<a href="http://mirrors.aliyun.com/pypi/simple/">这里</a>同样搜索<a href="http://mirrors.aliyun.com/pypi/simple/numpy">numpy</a>，下载在手动安装，这要注意依赖的版本，直接复制numpy-1.12.0-cp35-none-win_amd64.whl，这个文件在你下载的地方会显示，直接复制查找下载就好，搜索一下就行：<br>现在都是竖着排列的，很方便查看了。<br><img src="https://upload-images.jianshu.io/upload_images/1925876-6f24023d92bdc609.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp"></p><p>在PowerShell输入pip install numpy-1.12.0-cp35-none-win_amd64.whl<br>手动安装成功：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install numpy-<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>-cp<span class="hljs-number">35</span>-none-win_amd<span class="hljs-number">64</span>.whl<br><span class="hljs-attribute">Processing</span> f:\tensorflow\numpy-<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>-cp<span class="hljs-number">35</span>-none-win_amd<span class="hljs-number">64</span>.whl<br><span class="hljs-attribute">Installing</span> collected packages: numpy<br><span class="hljs-attribute">Successfully</span> installed numpy-<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><font color="red">其他的包安装方法同理。</font></p><h1 id="测试安装结果"><a href="#测试安装结果" class="headerlink" title="测试安装结果"></a>测试安装结果</h1><p>在PyCharm里输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br>tf.compat.v1.disable_eager_execution()<br>hello = tf.constant(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>sess= tf.compat.v1.Session()<br>print(sess.run(hello))<br></code></pre></td></tr></table></figure><p>如果最后能输出结果b’hello则成功</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span>.<span class="hljs-number">435756</span>: I tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">48</span>] Successfully opened dynamic library cudart<span class="hljs-number">64</span>_<span class="hljs-number">101</span>.dll<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">03</span>.<span class="hljs-number">200442</span>: I tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">48</span>] Successfully opened dynamic library nvcuda.dll<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">03</span>.<span class="hljs-number">875290</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class="hljs-number">1716</span>] Found device <span class="hljs-number">0</span> with properties: <br><span class="hljs-attribute">pciBusID</span>: <span class="hljs-number">0000</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span>.<span class="hljs-number">0</span> name: GeForce MX<span class="hljs-number">150</span> computeCapability: <span class="hljs-number">6</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">coreClock</span>: <span class="hljs-number">1</span>.<span class="hljs-number">0375</span>GHz coreCount: <span class="hljs-number">3</span> deviceMemorySize: <span class="hljs-number">2</span>.<span class="hljs-number">00</span>GiB deviceMemoryBandwidth: <span class="hljs-number">37</span>.<span class="hljs-number">33</span>GiB/s<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">03</span>.<span class="hljs-number">875660</span>: I tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">48</span>] Successfully opened dynamic library cudart<span class="hljs-number">64</span>_<span class="hljs-number">101</span>.dll<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">03</span>.<span class="hljs-number">877846</span>: W tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">59</span>] Could not load dynamic library &#x27;cublas<span class="hljs-number">64</span>_<span class="hljs-number">10</span>.dll&#x27;; dlerror: cublas<span class="hljs-number">64</span>_<span class="hljs-number">10</span>.dll not found<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">03</span>.<span class="hljs-number">993896</span>: I tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">48</span>] Successfully opened dynamic library cufft<span class="hljs-number">64</span>_<span class="hljs-number">10</span>.dll<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">000945</span>: I tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">48</span>] Successfully opened dynamic library curand<span class="hljs-number">64</span>_<span class="hljs-number">10</span>.dll<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">062328</span>: I tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">48</span>] Successfully opened dynamic library cusolver<span class="hljs-number">64</span>_<span class="hljs-number">10</span>.dll<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">063793</span>: W tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">59</span>] Could not load dynamic library &#x27;cusparse<span class="hljs-number">64</span>_<span class="hljs-number">10</span>.dll&#x27;; dlerror: cusparse<span class="hljs-number">64</span>_<span class="hljs-number">10</span>.dll not found<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">064736</span>: W tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">59</span>] Could not load dynamic library &#x27;cudnn<span class="hljs-number">64</span>_<span class="hljs-number">7</span>.dll&#x27;; dlerror: cudnn<span class="hljs-number">64</span>_<span class="hljs-number">7</span>.dll not found<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">064970</span>: W tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class="hljs-number">1753</span>] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.<br><span class="hljs-attribute">Skipping</span> registering GPU devices...<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">066352</span>: I tensorflow/core/platform/cpu_feature_guard.cc:<span class="hljs-number">142</span>] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN)to use the following CPU instructions in performance-critical operations:  AVX<span class="hljs-number">2</span><br><span class="hljs-attribute">To</span> enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">077843</span>: I tensorflow/compiler/xla/service/service.cc:<span class="hljs-number">168</span>] XLA service <span class="hljs-number">0</span>x<span class="hljs-number">1</span>f<span class="hljs-number">2523</span>ef<span class="hljs-number">360</span> initialized for platform Host (this does not guarantee that XLA will be used). Devices:<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">078174</span>: I tensorflow/compiler/xla/service/service.cc:<span class="hljs-number">176</span>]   StreamExecutor device (<span class="hljs-number">0</span>): Host, Default Version<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">078547</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class="hljs-number">1257</span>] Device interconnect StreamExecutor with strength <span class="hljs-number">1</span> edge matrix:<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">078731</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class="hljs-number">1263</span>]      <br><span class="hljs-attribute">b</span>&#x27;hello&#x27;<br><br><span class="hljs-attribute">Process</span> finished with exit code <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><p>如果版本不行就更新tensorflow的版本，好像说1.15的版本支持比较好</p><h2 id="tensorflow出现-ImportError-DLL-load-failed-找不到指定的程序"><a href="#tensorflow出现-ImportError-DLL-load-failed-找不到指定的程序" class="headerlink" title="tensorflow出现 ImportError: DLL load failed: 找不到指定的程序"></a>tensorflow出现 ImportError: DLL load failed: 找不到指定的程序</h2><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">Traceback (most recent call last): <br>File “D:/pyfile/word4/yy.py”, line 3, in <br>import tensorflow as tf <br>File “D:<span class="hljs-symbol">\p</span>yfile<span class="hljs-symbol">\w</span>ord4<span class="hljs-symbol">\v</span>env<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\s</span>ite-packages<span class="hljs-symbol">\t</span>ensorflow__init__.py”, line 24, in <br>from tensorflow.python import pywrap_tensorflow # pylint: disable=unused-import <br>File “D:<span class="hljs-symbol">\p</span>yfile<span class="hljs-symbol">\w</span>ord4<span class="hljs-symbol">\v</span>env<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\s</span>ite-packages<span class="hljs-symbol">\t</span>ensorflow<span class="hljs-symbol">\p</span>ython__init__.py”, line 52, in <br>from tensorflow.core.framework.graph_pb2 import * <br>File “D:<span class="hljs-symbol">\p</span>yfile<span class="hljs-symbol">\w</span>ord4<span class="hljs-symbol">\v</span>env<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\s</span>ite-packages<span class="hljs-symbol">\t</span>ensorflow<span class="hljs-symbol">\c</span>ore<span class="hljs-symbol">\f</span>ramework<span class="hljs-symbol">\g</span>raph_pb2.py”, line 6, in <br>from google.protobuf import descriptor as _descriptor <br>File “D:<span class="hljs-symbol">\p</span>yfile<span class="hljs-symbol">\w</span>ord4<span class="hljs-symbol">\v</span>env<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\s</span>ite-packages<span class="hljs-symbol">\g</span>oogle<span class="hljs-symbol">\p</span>rotobuf<span class="hljs-symbol">\d</span>escriptor.py”, line 47, in <br>from google.protobuf.pyext import _message <br>ImportError: DLL load failed: 找不到指定的程序。<br></code></pre></td></tr></table></figure><p><font color="red">解决方法</font><br>没有注意到protobuf已经更新。 在自动安装了tensorflow时， protobuf安装的是最新版本3.6.1， 出现了不兼容的问题。<br>更换为 protobuf 3.6.0即可</p><p>在刚才的PowerShell里输入<br>pip install protobuf==3.6.0<br>问题解决<br>参考内容(<a href="https://blog.csdn.net/lijil168/article/details/82289596">https://blog.csdn.net/lijil168/article/details/82289596</a>)</p><h2 id="解决-tensorflow-gpu-2-1-出现错误-“Could-not-load-dynamic-library-‘cudart64-101-dll’"><a href="#解决-tensorflow-gpu-2-1-出现错误-“Could-not-load-dynamic-library-‘cudart64-101-dll’" class="headerlink" title="解决 tensorflow-gpu 2.1 出现错误 “Could not load dynamic library ‘cudart64_101.dll’"></a>解决 tensorflow-gpu 2.1 出现错误 “Could not load dynamic library ‘cudart64_101.dll’</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">&gt;&gt;&gt; <span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-number">2020</span><span class="hljs-number">-04</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">19</span>:<span class="hljs-number">56.862944</span>: W tensorflow/stream_executor/platform/<span class="hljs-keyword">default</span>/dso_loader.cc:<span class="hljs-number">55</span>] Could not load <span class="hljs-built_in">dynamic</span> <span class="hljs-keyword">library</span> <span class="hljs-string">&#x27;cudart64_101.dll&#x27;</span>; dlerror: cudart64_101.dll not found<br><span class="hljs-number">2020</span><span class="hljs-number">-04</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">19</span>:<span class="hljs-number">56.867965</span>: I tensorflow/stream_executor/cuda/cudart_stub.cc:<span class="hljs-number">29</span>] Ignore above cudart dlerror <span class="hljs-keyword">if</span> you <span class="hljs-keyword">do</span> not have a GPU <span class="hljs-keyword">set</span> up <span class="hljs-keyword">on</span> your machine.<br></code></pre></td></tr></table></figure><p>原因<br>cudart64_101.dll”是cuda10.1这个版本中才含有的，而我安装的cuda的不是，如果你是10.0或者10.2或者11.0等都可以用这个解决。<br>解决方法<br>将“cudart64_101.dll”添加到“C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\bin”中去，问题解决。<br>cudart64_101.dll的下载地址：<a href="https://cn.dll-files.com/cudart64_101.dll.html">cudart64_101.dll</a><br>参考内容(<a href="https://blog.csdn.net/wjhua_223/article/details/105681521">https://blog.csdn.net/wjhua_223/article/details/105681521</a>)</p><h2 id="出现很多I的警告"><a href="#出现很多I的警告" class="headerlink" title="出现很多I的警告"></a>出现很多I的警告</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs gradle">(tensorflow1) C:\Users\Administrator&gt;python<br>Python <span class="hljs-number">3.7</span>.<span class="hljs-number">7</span> (<span class="hljs-keyword">default</span>, May  <span class="hljs-number">6</span> <span class="hljs-number">2020</span>, <span class="hljs-number">11</span>:<span class="hljs-number">45</span>:<span class="hljs-number">54</span>) [MSC v.<span class="hljs-number">1916</span> <span class="hljs-number">64</span> bit (AMD64)] :: Anaconda, Inc. on win32<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt; <span class="hljs-keyword">import</span> tensorflow as tf<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">23.205171</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cudart64_101.dll<br>&gt;&gt;&gt; tf.compat.v1.disable_eager_execution()<br>&gt;&gt;&gt; hello = tf.constant(<span class="hljs-string">&#x27;hello,tensorflow&#x27;</span>)<br>&gt;&gt;&gt; sess= tf.compat.v1.Session()<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.472006</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library nvcuda.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.580727</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1555</span>] Found device <span class="hljs-number">0</span> with properties:<br>pciBusID: <span class="hljs-number">0000</span>:<span class="hljs-number">00</span>:<span class="hljs-number">1</span>e.<span class="hljs-number">0</span> name: Tesla T4 computeCapability: <span class="hljs-number">7.5</span><br>coreClock: <span class="hljs-number">1.59</span>GHz coreCount: <span class="hljs-number">40</span> deviceMemorySize: <span class="hljs-number">14.85</span>GiB deviceMemoryBandwidth: <span class="hljs-number">298.08</span>GiB/s<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.589145</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cudart64_101.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.600717</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cublas64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.614987</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cufft64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.622689</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library curand64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.637295</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cusolver64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.645685</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cusparse64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.673263</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cudnn64_7.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.678463</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1697</span>] Adding visible gpu devices: <span class="hljs-number">0</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.683543</span>: I tensorflow<span class="hljs-regexp">/core/</span>platform/cpu_feature_guard.cc:<span class="hljs-number">142</span>] Your CPU supports instructions that <span class="hljs-keyword">this</span> TensorFlow binary was not compiled to use: AVX AVX2<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.690563</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1555</span>] Found device <span class="hljs-number">0</span> with properties:<br>pciBusID: <span class="hljs-number">0000</span>:<span class="hljs-number">00</span>:<span class="hljs-number">1</span>e.<span class="hljs-number">0</span> name: Tesla T4 computeCapability: <span class="hljs-number">7.5</span><br>coreClock: <span class="hljs-number">1.59</span>GHz coreCount: <span class="hljs-number">40</span> deviceMemorySize: <span class="hljs-number">14.85</span>GiB deviceMemoryBandwidth: <span class="hljs-number">298.08</span>GiB/s<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.701724</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cudart64_101.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.705676</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cublas64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.711700</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cufft64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.716021</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library curand64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.720220</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cusolver64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.724584</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cusparse64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.732739</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cudnn64_7.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.738786</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1697</span>] Adding visible gpu devices: <span class="hljs-number">0</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">26.578678</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1096</span>] Device interconnect StreamExecutor with strength <span class="hljs-number">1</span> edge matrix:<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">26.583080</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1102</span>]      <span class="hljs-number">0</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">26.586153</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1115</span>] <span class="hljs-number">0</span>:   N<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">26.591704</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1241</span>] Created TensorFlow device (<span class="hljs-regexp">/job:localhost/</span>replica:<span class="hljs-number">0</span><span class="hljs-regexp">/task:0/</span>device:GPU:<span class="hljs-number">0</span> with <span class="hljs-number">14239</span> MB memory) -&gt; physical GPU (device: <span class="hljs-number">0</span>, name: Tesla T4, pci bus id: <span class="hljs-number">0000</span>:<span class="hljs-number">00</span>:<span class="hljs-number">1</span>e.<span class="hljs-number">0</span>, compute capability: <span class="hljs-number">7.5</span>)<br>&gt;&gt;&gt; <span class="hljs-keyword">print</span>(sess.run(hello))<br>b<span class="hljs-string">&#x27;hello,tensorflow&#x27;</span><br></code></pre></td></tr></table></figure><p>这个不是问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br>tf.compat.v1.disable_eager_execution()<br>hello = tf.constant(<span class="hljs-string">&#x27;hello,tensorflow&#x27;</span>)<br>sess= tf.compat.v1.Session()<br>print(sess.run(hello))<br></code></pre></td></tr></table></figure><p>这里需要注意的是，由于本文使用的Tensorflow版本是2.1，原来1.1版本中的Session方法已经过期，因此在2.x上调用Session的方法需要修改为compat.v1.Session。否则会报告方法不可用。<br>只要最后打出了hello表示配置成功。<br>参考内容(<a href="https://blog.bitipcman.com/install-tensorflow-on-windows/">https://blog.bitipcman.com/install-tensorflow-on-windows/</a>)</p><hr><p>参考文献</p><blockquote><p><a href="https://www.runoob.com/python/python-install.html">菜鸟教程</a><br><a href="http://mirrors.aliyun.com/pypi/simple/">国内镜像</a><br><a href="https://www.jianshu.com/p/d3bd17953862">PiP Install TensorFlow 报错*** is not a supported wheel on this platform.</a><br><a href="https://blog.csdn.net/lijil168/article/details/82289596">tensorflow出现 ImportError: DLL load failed: 找不到指定的程序</a><br><a href="https://blog.csdn.net/wjhua_223/article/details/105681521">解决 tensorflow-gpu 2.1 出现错误 “Could not load dynamic library ‘cudart64_101.dll’</a><br><a href="https://cn.dll-files.com/cudart64_101.dll.html">cudart64_101.dll.html文件下载</a><br><a href="https://blog.bitipcman.com/install-tensorflow-on-windows/">在Windows下安装Tensorflow</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
      <category>Tensorflow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tensorflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning Model Summary</title>
    <link href="/2020/07/19/Machine-Learning-Model-Summary/"/>
    <url>/2020/07/19/Machine-Learning-Model-Summary/</url>
    
    <content type="html"><![CDATA[<center>记录一些模型的优缺点，以及自己的一些理解。</center><span id="more"></span><h1 id="K-Means"><a href="#K-Means" class="headerlink" title="K-Means"></a><a href="https://zh.wikipedia.org/wiki/K-%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95">K-Means</a></h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>k-平均聚类的目的是：把n个点（可以是样本的一次观察或一个实例）划分到k个聚类中，使得每个点都属于离他最近的均值（此即聚类中心）对应的聚类，以之作为聚类的标准。</p><h2 id="主成分分析（PCA）"><a href="#主成分分析（PCA）" class="headerlink" title="主成分分析（PCA）"></a>主成分分析（PCA）</h2><p>有一些研究表明，k-均值的放松形式解（由聚类指示向量表示），可由主成分分析中的主成分给出，并且主成分分析由主方向张成的子空间与聚类图心空间是等价的。不过，主成分分析是k-均值聚类的有效放松形式并不是一个新的结果()，并且还有的研究结果直接揭示了关于“聚类图心子空间是由主成分方向张成的”这一论述的反例 。</p><h1 id="Decision-tree-决策树"><a href="#Decision-tree-决策树" class="headerlink" title="Decision tree (决策树)"></a><a href="https://zh.wikipedia.org/wiki/%E5%86%B3%E7%AD%96%E6%A0%91">Decision tree (决策树)</a></h1><p><img src="https://upload.wikimedia.org/wikipedia/commons/f/ff/Decision_tree_model.png" alt="决策树图大概样子"></p><h2 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h2><p>数据挖掘中决策树是一种经常要用到的技术，可以用于分析数据，同样也可以用来作预测。<br>决策树经常在运筹学中使用，特别是在决策分析中，它帮助确定一个能最可能达到目标的策略。如果在实际中，决策不得不在没有完备知识的情况下被在线采用，一个决策树应该平行概率模型作为最佳的选择模型或在线选择模型算法。决策树的另一个使用是作为计算条件概率的描述性手段。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>**决策树易于理解和实现.**人们在通过解释后都有能力去理解决策树所表达的意义。</li><li>**对于决策树，数据的准备往往是简单或者是不必要的.**其他的技术往往要求先把数据一般化，比如去掉多余的或者空白的属性。</li><li><strong>能够同时处理数据型和常规型属性。</strong>其他的技术往往要求数据属性的单一。</li><li><strong>是一个白盒模型</strong>如果给定一个观察的模型，那么根据所产生的决策树很容易推出相应的逻辑表达式。</li><li><strong>易于通过静态测试来对模型进行评测。</strong>表示有可能测量该模型的可信度。</li><li><strong>在相对短的时间内能够对大型数据源做出可行且效果良好的结果。</strong></li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>对于那些各类别样本数量不一致的数据，在决策树当中信息增益的结果偏向于那些具有更多数值的特征。</p><h2 id="Network-Pruning-决策树的剪枝"><a href="#Network-Pruning-决策树的剪枝" class="headerlink" title="Network Pruning (决策树的剪枝)"></a>Network Pruning (决策树的剪枝)</h2><p>剪枝是决策树停止分支的方法之一，剪枝有分预先剪枝和后剪枝两种。预先剪枝是在树的生长过程中设定一个指标，当达到该指标时就停止生长，这样做容易产生“视界局限”，就是一旦停止分支，使得节点N成为叶节点，就断绝了其后继节点进行“好”的分支操作的任何可能性。不严格的说这会已停止的分支会误导学习算法，导致产生的树不纯度降差最大的地方过分靠近根节点。后剪枝中树首先要充分生长，直到叶节点都有最小的不纯度值为止，因而可以克服“视界局限”。然后对所有相邻的成对叶节点考虑是否消去它们，如果消去能引起令人满意的不纯度增长，那么执行消去，并令它们的公共父节点成为新的叶节点。这种“合并”叶节点的做法和节点分支的过程恰好相反，经过剪枝后叶节点常常会分布在很宽的层次上，树也变得非平衡。后剪枝技术的优点是克服了“视界局限”效应，而且无需保留部分样本用于交叉验证，所以可以充分利用全部训练集的信息。但后剪枝的计算量代价比预剪枝方法大得多，特别是在大样本集中，不过对于小样本的情况，后剪枝方法还是优于预剪枝方法的</p><h3 id="Network-Pruning优点"><a href="#Network-Pruning优点" class="headerlink" title="Network Pruning优点"></a>Network Pruning优点</h3><p>1）最直接的好处就是计算量的减小，从而使计算时间更少，功耗更小。<br>2）Memory footprint变小，可以放到更低端的设备上跑。还有个额外的性能好处是本来需要既慢又耗电的DRAM参与，现在有可能放在SRAM就搞定。<br>3）Size更小的包有利于应用发布和更新。如一些手机市场会对应用的大小有限制，另外也有利于车OTA升级。</p><h3 id="Network-Pruning缺点"><a href="#Network-Pruning缺点" class="headerlink" title="Network Pruning缺点"></a>Network Pruning缺点</h3><p>容易造成精度大幅下降，同时模型残留冗余</p><h3 id="Network-Pruning备注"><a href="#Network-Pruning备注" class="headerlink" title="Network Pruning备注"></a>Network Pruning备注</h3><p>可以解决DNN计算量太大的问题，用Pruning来对每个部分的神经网络分别训练，开始的准确率会下降，但是训练后的准确率会逐渐上升，每次的改动都不要太大，进而达到全部训练的目标。</p><p><img src="https://i.loli.net/2020/08/25/5zcg3nsAYlW6M7V.png" alt="28674cb38321348d9f4261dc4a8654e.png"></p>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 修饰符 与 Number&amp;Math类</title>
    <link href="/2020/04/23/Java%20%E4%BF%AE%E9%A5%B0%E7%AC%A6%20%E4%B8%8E%20Number&amp;Math%E7%B1%BB/"/>
    <url>/2020/04/23/Java%20%E4%BF%AE%E9%A5%B0%E7%AC%A6%20%E4%B8%8E%20Number&amp;Math%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<center>主要说修饰符的static和final以及Number课件中我不太懂的几个题。</center><span id="more"></span><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>1.静态变量：</p><p>static关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。<br>换句话说就是用static声明类变量，所有对象里的该变量都一样（<strong>相当于类的全局变量</strong>）</p><p>2.静态方法：</p><p>static关键字用来声明<strong>独立于对象的</strong>静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mystery</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mystery</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123; <br>  <span class="hljs-comment">// 这里一定要有static！！</span><br>  <span class="hljs-comment">//要不然会报错：无法从静态上下文中引用非静态 方法 mystery(int,int)</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>==b)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a + mystery(a, b-<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x = mystery(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>);<br>    System.out.println(x);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="fianal"><a href="#fianal" class="headerlink" title="fianal"></a>fianal</h2><p>final class 不可被继承<br>final可以用于variables, methods, classes， 限制继承和覆写</p><h2 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h2><p>接口及接口的成员变量和成员方法不能声明为 protected<br>protected对同一包内的类和所有子类可见。</p><h1 id="Number-amp-Math类"><a href="#Number-amp-Math类" class="headerlink" title="Number&amp;Math类"></a>Number&amp;Math类</h1><p>所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类 Number 的子类。<br><img src="https://www.runoob.com/wp-content/uploads/2013/12/number1.png"></p><h2 id="常用的"><a href="#常用的" class="headerlink" title="常用的"></a>常用的</h2><p>1    xxxValue()<br>将 Number 对象转换为xxx数据类型的值并返回。<br>3    equals()<br>判断number对象是否与参数相等。<br>5    toString()<br>以字符串形式返回值。<br>6    parseInt()<br>将字符串解析为int类型。<br>7    abs()<br>返回参数的绝对值。<br>11    round()<br>它表示四舍五入，算法为 Math.floor(x+0.5)，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。<br>12    min()<br>返回两个参数中的最小值。<br>13    max()<br>返回两个参数中的最大值。<br>27    random()<br>返回一个随机数。</p><h2 id="不常用的"><a href="#不常用的" class="headerlink" title="不常用的"></a>不常用的</h2><p>8    ceil()<br>返回大于等于( &gt;= )给定参数的的最小整数，类型为双精度浮点型。<br>9    floor()<br>返回小于等于（&lt;=）给定参数的最大整数 。<br>14    exp()<br>返回自然数底数e的参数次方。<br>15    log()<br>返回参数的自然数底数的对数值。<br>16    pow()<br>返回第一个参数的第二个参数次方。<br>17    sqrt()<br>求参数的算术平方根。<br>18    sin()<br>求指定double类型参数的正弦值。<br>19    cos()<br>求指定double类型参数的余弦值。<br>20    tan()<br>求指定double类型参数的正切值。<br>21    asin()<br>求指定double类型参数的反正弦值。<br>22    acos()<br>求指定double类型参数的反余弦值。<br>23    atan()<br>求指定double类型参数的反正切值。<br>24    atan2()<br>将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。<br>25    toDegrees()<br>将参数转化为角度。<br>26    toRadians()<br>将角度转换为弧度。</p><h1 id="Practice-Exercise-2"><a href="#Practice-Exercise-2" class="headerlink" title="Practice Exercise 2"></a>Practice Exercise 2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParameterUse</span> </span>&#123;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> y = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span>[] z = &#123;<span class="hljs-number">2</span>&#125;;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] w = &#123;<span class="hljs-number">3</span>&#125;;<br>        useArgs(x, y, z, w);<br>      &#125;<br>      <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useArgs</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b,</span></span><br><span class="hljs-function"><span class="hljs-params">                          <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] c, <span class="hljs-keyword">int</span>[] d)</span> </span>&#123;<br>        <span class="hljs-comment">// 输入到useArgs里的就看这个函数的参数就可以了，不用管xyzw</span><br>        <span class="hljs-comment">// a是final，所以a不能被改变，但是b可以，b可以被随意更改</span><br>        a++; <span class="hljs-comment">// Error</span><br>        b++;<br>        b=a;<br>        <span class="hljs-comment">//后面的三个，表示数组c或者d的地址不能改变，但是里面的内容可以改变</span><br>        c[<span class="hljs-number">0</span>]++; <span class="hljs-comment">// Ok</span><br>        d[<span class="hljs-number">0</span>]++; <span class="hljs-comment">// Ok</span><br>        c=d; <span class="hljs-comment">// Error</span><br>      &#125; <br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="有关不可变类的理解"><a href="#有关不可变类的理解" class="headerlink" title="有关不可变类的理解"></a>有关不可变类的理解</h1><p>&emsp;&emsp;不可变类（immutable class）是指当创建了这个类的实例后，就不允许修改它的值了，也就是说一个对象被创建以后，在整个生命周期内，它的成员变量就不能被修改了。有点类似与常量（const）不允许别的程序进行修改。<br>&emsp;&emsp;Java类库中，所有基本类型的包装类都是不可变类（Byte、Boolean、Short、Char、Integer、Float、Long、Double），此外String也是不可变类。<a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Object.html">Object也是一个基本类型</a>,他在java.lang.Object里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;Hello&quot;</span>;<br><br>s += <span class="hljs-string">&quot; World&quot;</span>;<br><br>System.out.println(s);<br></code></pre></td></tr></table></figure><p>运行结果是：Hello World<br>其实程序是在执行 s += “ World” 时创建了一个新的对象”Hello World”，s指向了这个新建的对象。原来的”Hello”字符串常量在内存中并没有被改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer a = <span class="hljs-number">1</span>;<br>Integer b = a;<br>b++;<br>System.out.print(a + <span class="hljs-string">&quot; &quot;</span> + b);<br></code></pre></td></tr></table></figure><p>运行结果：1 2<br>上面程序执行完 b++后，由于Integer是不可变类，因此会创建一个新值为2的Integer赋值给b，此时b和a已经没有任何关系。</p><hr><p>参考文献</p><blockquote><p><a href="https://www.runoob.com/java/java-number.html">Java Number &amp; Math 类</a><br><a href="https://blog.csdn.net/u012005549/article/details/82684652">Java基本数据类型以及由不可变类带来的值传递和引用传递的难点分析</a><br><a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Object.html">Java Object Api</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Interface</title>
    <link href="/2020/04/23/Interface/"/>
    <url>/2020/04/23/Interface/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。<br>&emsp;&emsp;除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。<br>&emsp;&emsp;接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。<br>&emsp;&emsp;只有interfaces可以多继承。interfaces是抽象类。</p><span id="more"></span><h1 id="接口与类的区别："><a href="#接口与类的区别：" class="headerlink" title="接口与类的区别："></a>接口与类的区别：</h1><p>接口不能用于实例化对象。<br>接口没有构造方法。<br>接口中所有的方法必须是抽象方法。<br>接口不能包含成员变量，除了 static 和 final 变量。<br>接口不是被类继承了，而是要被类实现。<br>接口支持多继承。</p><h1 id="接口特性"><a href="#接口特性" class="headerlink" title="接口特性"></a>接口特性</h1><p><font color="red">接口中的所有属性 默认的修饰符是  public static final。</font><br><font color="red">接口中的所有方法 默认的修饰符是  public abstract。</font><br>接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 public abstract（只能是 public abstract，其他修饰符都会报错）。<br>接口中可以含有变量，但是接口中的变量会被隐式的指定为 public static final 变量（并且只能是 public，用 private 修饰会报编译错误）。<br>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。</p><h1 id="接口声明"><a href="#接口声明" class="headerlink" title="接口声明"></a>接口声明</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">[可见度] interface 接口名称 [extends 其他的接口名] &#123;<br>        <span class="hljs-comment">// 声明变量</span><br>        <span class="hljs-comment">// 抽象方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">...implements 接口名称[, 其他接口名称, 其他接口名称..., ...] ...<br><span class="hljs-comment">//For Example</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MammalInt</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Animal</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><h1 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h1><p>在Java中，类的多继承是不合法，但接口允许多继承。<br>在接口的多继承中extends关键字只需要使用一次，在其后跟着继承接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Hockey</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Sports</span>, <span class="hljs-title">Event</span></span><br></code></pre></td></tr></table></figure><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>1.抽象类和接口都不能实例化。（也就是不能初始化）<br>2.如果您不提供任何方法实现，请使用接口代替抽象类。（因为抽象类也可以不完成方法，所以用接口更好）<br>3.A class can implementmany interfaces, but extendsonly one superclass.<br>4.Both abstract classes and interfaces cancontain constants, which will be inherited by classes that extendor implementthem, respectively.</p><p>以下代码是说明interface是如何多继承的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Father</span></span>&#123; <span class="hljs-keyword">int</span> age = <span class="hljs-number">30</span>; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wash</span><span class="hljs-params">()</span></span>; &#125; <br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Mother</span></span>&#123; <span class="hljs-keyword">long</span> bank_account = <span class="hljs-number">100000</span>; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cook</span><span class="hljs-params">()</span></span>; &#125; <br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span>, <span class="hljs-title">Mother</span></span>&#123; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cry</span><span class="hljs-params">(booleantear)</span></span>; &#125;  <br></code></pre></td></tr></table></figure><p>Childinherits from Fatherand Motherand has the following:<br>intage = 30; (!!)<br>long bank_account= 100000;<br>void wash();<br>void cook();<br>void cry(booleantear);</p><h1 id="Name-Conflicts"><a href="#Name-Conflicts" class="headerlink" title="Name Conflicts"></a>Name Conflicts</h1><p>•What happens if Fatherinterface and Motherinterface contain same named methodsand variables(constants)? </p><h2 id="–Same-named-methods"><a href="#–Same-named-methods" class="headerlink" title="–Same named methods:"></a>–Same named methods:</h2><p>&emsp;&emsp;•If they have different parameters, then Childinterface has both (this is same as overloading).<br>&emsp;&emsp;•If they differ by only return type, then error.<br>&emsp;&emsp;•If the two methods are identical, only keep one. </p><h2 id="–Same-named-constants"><a href="#–Same-named-constants" class="headerlink" title="–Same named constants:"></a>–Same named constants:</h2><p>we keep both constants. To refer to them, use parent interface nameas prefix.<br>&emsp;&emsp;•Example: –If both Fatherand Mothercontain an agevariable, then Child interface contains both. –To refer to them, we use: Father.ageor Mother.age.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TestInterface1</span> </span>&#123; <br>  <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123; <br>    System.out.println(<span class="hljs-string">&quot;Default TestInterface1&quot;</span>); <br>  &#125; <br>&#125; <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TestInterface2</span> </span>&#123; <br>  <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123; <br>    System.out.println(<span class="hljs-string">&quot;Default TestInterface2&quot;</span>); <br>  &#125; <br>&#125; <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TestInterface1</span>, <span class="hljs-title">TestInterface2</span> </span>&#123; <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123; <br>    TestInterface1.<span class="hljs-keyword">super</span>.show();   <br>    TestInterface2.<span class="hljs-keyword">super</span>.show(); <br>  &#125; <br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <br>    TestClass d = <span class="hljs-keyword">new</span> TestClass(); <br>    d.show(); <br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>TestInterface1.super.show();<br>TestInterface2.super.show();<br>如果一个类同时实现接口A和B，接口A和B中有相同的default方法，这时，该类必须重写接口中的default方法。<br>为什么要重写呢？是因为，类在继承接口中的default方法时，不知道应该继承哪一个接口中的default方法。</p><p>在interface中，声明default可以直接完成函数。<br>如果一个类同时实现接口A和B，接口A和B中有相同的default方法，这时，该类必须重写接口中的default方法。</p><p>好好理解一下这里的super，没有是不行的。<br><font color="red">如果实现类中要访问接口中的成员，不能使用super关键字。因为两者之间没有显示的继承关系，况且<strong>当接口中的成员成员属性是静态的</strong>。可以使用接口名直接访问。</font></p><hr><p><font color="red">interface里不允许使用修饰符protected<br>protected对同一包内的类和所有子类可见。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyConstants</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> r = <span class="hljs-number">4</span>;<br>  <span class="hljs-keyword">int</span> s = <span class="hljs-number">6</span>;<br><br>  <span class="hljs-comment">// INSERT CODE HERE</span><br>  <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> circumference = <span class="hljs-number">2</span>*Math.PI*r;<br>  <span class="hljs-comment">// int total = total + r + s; //Error, No declare total value.</span><br>  <span class="hljs-keyword">int</span> AREA = r*s;<br>  <span class="hljs-comment">// public static MAIN = 15; //Error, NO int or double, etc.</span><br>  <span class="hljs-comment">// protected int CODE = 31337; // Can not be protected!</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Week2 Practice</title>
    <link href="/2020/04/14/Practice/"/>
    <url>/2020/04/14/Practice/</url>
    
    <content type="html"><![CDATA[<p>必须要写点什么才能折叠起来。</p><span id="more"></span><h1 id="Question1（好）"><a href="#Question1（好）" class="headerlink" title="Question1（好）"></a>Question1（好）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Question1</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    <span class="hljs-comment">// double numbers = &#123;2.5, 6, 2.6, 8.0&#125;;</span><br>    <span class="hljs-keyword">double</span>[] numbers = &#123;<span class="hljs-number">2.5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2.6</span>, <span class="hljs-number">8.0</span>&#125;;<br><br>    <span class="hljs-comment">// int[] marks = int[60];</span><br>    <span class="hljs-keyword">int</span>[] marks = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">60</span>];<br><br>    <span class="hljs-comment">// char letters[] = &#123;a, b, c, d, e, f&#125;;</span><br>    <span class="hljs-keyword">char</span>[] letters = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>&#125;;<br>    <br>    <span class="hljs-comment">// String[] books = &#123;Java, SQL, PHP&#125;;</span><br>    String[] books = &#123;<span class="hljs-string">&quot;Java&quot;</span>, <span class="hljs-string">&quot;SQL&quot;</span>, <span class="hljs-string">&quot;PHP&quot;</span>&#125;;<br><br> <br>    <span class="hljs-keyword">char</span> letter = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Question2"><a href="#Question2" class="headerlink" title="Question2"></a>Question2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Out of the range</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Q2</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    <span class="hljs-keyword">int</span>[] intArray = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;=intArray.length; i++)&#123;<br>       intArray[i] = i;<br>    &#125;<br>    System.out.println(intArray);<br><br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;会超界导致无法输出，只需要把=去掉就可以了。</p><h1 id="Question3"><a href="#Question3" class="headerlink" title="Question3"></a>Question3</h1><p>&emsp;&emsp;Assume we have a Flowerclass (*), and two of its methods are setColour(String colour)and setHeight(double height). What is wrong with the following code? Explain your answer. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Flower[] f = <span class="hljs-keyword">new</span> Flower[<span class="hljs-number">2</span>];<br>f[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> Flower(); <br>f[<span class="hljs-number">0</span>].setColour(<span class="hljs-string">&quot;Red&quot;</span>); <br>f[<span class="hljs-number">0</span>].setHeight(<span class="hljs-number">4.0</span>); <br>f[<span class="hljs-number">1</span>].setColour(<span class="hljs-string">&quot;Blue&quot;</span>); <br>f[<span class="hljs-number">1</span>].setHeight(<span class="hljs-number">3.5</span>);<br>````<br>&amp;emsp;&amp;emsp;缺少一个 f[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> Flower(); <br># Question4<br>&amp;emsp;&amp;emsp;<span class="hljs-function">Assume we have a <span class="hljs-title">Flowerclass</span> <span class="hljs-params">(\*)</span>, and two of its methods are <span class="hljs-title">setColour</span><span class="hljs-params">(String colour)</span>and <span class="hljs-title">setHeight</span><span class="hljs-params">(<span class="hljs-keyword">double</span> height)</span>. What is wrong with the following code? Explain your answer.</span><br><span class="hljs-function">```java</span><br><span class="hljs-function">Flower[] f </span>= <span class="hljs-keyword">new</span> Flower[<span class="hljs-number">2</span>]; <br>f[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> Flower(); <br>f[<span class="hljs-number">0</span>].setColour(<span class="hljs-string">&quot;Red&quot;</span>); <br>f[<span class="hljs-number">0</span>].setHeight(<span class="hljs-number">4.0</span>); <br>f[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> Flower(); <br>f[<span class="hljs-number">1</span>].setColour(<span class="hljs-string">&quot;Blue&quot;</span>); <br>f[<span class="hljs-number">1</span>].setHeight(<span class="hljs-number">3.5</span>); f[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> Flower();      <br>f[<span class="hljs-number">2</span>].setColour(<span class="hljs-string">&quot;Pink&quot;</span>); <br>f[<span class="hljs-number">2</span>].setHeight(<span class="hljs-number">2.5</span>);<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;同上，也是超界，把2改成3就对了。</p><h1 id="Question5（好）"><a href="#Question5（好）" class="headerlink" title="Question5（好）"></a>Question5（好）</h1><p>Assume we have a Flowerclass (*), and two of its methods are setColour(String colour)and setHeight(double height). What is wrong with the following code? Explain your answer.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//No initialize i</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Q5</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    i = i + <span class="hljs-number">5</span>;<br>    System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&ensp;&ensp;Local Variables are not given a defined value! Instance variables are.<br>&emsp;&emsp;可以 int i = 0;</p><h1 id="Question7（好）"><a href="#Question7（好）" class="headerlink" title="Question7（好）"></a>Question7（好）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square_Q7a</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x*x; &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-keyword">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> y*y; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;问题：square(int)已经被定义过一次了，所以不能被重复定义，可以改成public double square(double y) { return y*y; }</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square_Q7b</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x*x; &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-keyword">double</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> y*y; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;莫得问题！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square_Q7c</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x*x; &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-keyword">double</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> y*y; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;转化会有损失精度问题，直接下下面的int改成double就可以了。</p><h1 id="Question8"><a href="#Question8" class="headerlink" title="Question8"></a>Question8</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">()</span> </span>&#123; System.out.println(<span class="hljs-string">&quot;car 1&quot;</span>); &#125; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m2</span><span class="hljs-params">()</span> </span>&#123; System.out.println(<span class="hljs-string">&quot;car 2&quot;</span>); &#125; <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;vroom&quot;</span>; &#125; &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Truck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Car</span> </span>&#123; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">()</span> </span>&#123; System.out.println(<span class="hljs-string">&quot;truck 1&quot;</span>); &#125; <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Truck mycar= <span class="hljs-keyword">new</span> Truck(); <br>System.out.println(mycar); <br>mycar.m1(); mycar.m2(); <br></code></pre></td></tr></table></figure><p>输出内容：<br>vroom<br>truck 1<br>car 2</p><h1 id="Question9"><a href="#Question9" class="headerlink" title="Question9"></a>Question9</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">()</span></span>&#123; System.out.println(<span class="hljs-string">&quot;car 1&quot;</span>); &#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m2</span><span class="hljs-params">()</span></span>&#123; System.out.println(<span class="hljs-string">&quot;car 2&quot;</span>); &#125; <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;vroom&quot;</span>; &#125; &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Truck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Car</span> </span>&#123; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">()</span> </span>&#123; System.out.println(<span class="hljs-string">&quot;truck 1&quot;</span>); &#125; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m2</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">super</span>.m1(); &#125; <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.toString()+ <span class="hljs-string">&quot;T&quot;</span>; &#125; <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Truck mycar= <span class="hljs-keyword">new</span> Truck(); <br>System.out.println(mycar); <br>mycar.m1(); <br>mycar.m2(); <br></code></pre></td></tr></table></figure><p>输出内容：<br>vroomT<br>truck 1<br>car 1</p><h1 id="Question10"><a href="#Question10" class="headerlink" title="Question10"></a>Question10</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Q10</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    String s = <span class="hljs-string">&quot;6&quot;</span>;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">double</span> d = <span class="hljs-number">4.5</span>;<br>    System.out.println(s + n + d);<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出内容：634.5</p><h1 id="Question11"><a href="#Question11" class="headerlink" title="Question11"></a>Question11</h1><p>Identify which statements are TRUE and which are FALSE. Justify your answers.<br>1.subclass has direct access to its superclass’ private data and   methods.<br>2.A class can extend more than one superclass.<br>3.An abstract class must contain at least one abstract method.<br>4.An abstract class must not contain any instance variables.</p><p>1:错 不能继承private，只能继承protected和public<br>2:错 一个类不能继承多个父类，但是多个类可以继承一个类，这个Java继承里面有写<br>3:错 可以不包含任何抽象的方法以及变量，只是因为它是一个抽象，必须要事例<br>4:错 可以包含常量</p><h1 id="Question12"><a href="#Question12" class="headerlink" title="Question12"></a>Question12</h1><p>A class Animalhas a subclass Dog. Which of the following is TRUE?<br>a)     Dog cannot have subclasses.<br>b)   Dog has no other parent than Animal.<br>c)   Animal can have only one subclass.<br>d)   Dog cannot have siblings.<br>答案： b<br>解析：a)狗可以有子类，比如母狗，公狗等。<br>    c)动物可以分子类，比如猫，兔子等<br>    d)狗也可以有兄弟姐妹，比如上面说的猫和兔子</p><h1 id="Question13"><a href="#Question13" class="headerlink" title="Question13"></a>Question13</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Q13a</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    System.out.println(s1==s2);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Q13b</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    System.out.println(s1.equals(s2));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Q13c</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    String s1 = <span class="hljs-string">&quot;aaa&quot;</span>;<br>    String s2 = <span class="hljs-string">&quot;aaa&quot;</span>;<br>    System.out.println(s1==s2);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>true</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java继承(Inheritance)</title>
    <link href="/2020/04/12/Java%E7%BB%A7%E6%89%BF/"/>
    <url>/2020/04/12/Java%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这个继承可真的是太南了！</p><span id="more"></span><h1 id="继承-Inheritance"><a href="#继承-Inheritance" class="headerlink" title="继承(Inheritance)"></a>继承(Inheritance)</h1><p>&emsp;&emsp;子类拥有父类<strong>非 private</strong>的属性、方法。<br>&emsp;&emsp;Java不支持多继承，但支持多重继承。<br><img src="https://www.runoob.com/wp-content/uploads/2013/12/types_of_inheritance-1.png"></p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>&emsp;&emsp;抽象类不能直接New一个对象，需要用extends来定义在父类中的abstract内容。直到所有的abstract变量和函数全都被重写，才可以New对象。</p><h2 id="Creature-cCreature-new-Turtle-问题"><a href="#Creature-cCreature-new-Turtle-问题" class="headerlink" title="Creature cCreature = new Turtle();问题"></a>Creature cCreature = new Turtle();问题</h2><p>&emsp;&emsp;在New对象的时候，也会先走父类函数，如果子类对父类有重写，则运行子类重写的函数。如果子类对父类有重载，则按照相应规则进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span></span>&#123;<br>        func2();<br>    &#125;<br>    <span class="hljs-comment">//这是父类中的func2()方法，因为下面的子类中重写了该方法所以在父类类型的引用中调用时，这个方法将不再有效</span><br>    <span class="hljs-comment">//取而代之的是将调用子类中重写的func2()方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;AAA&quot;</span>);<br>    &#125;<br>&#125;<br> <br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-comment">//func1(int i)是对func1()方法的一个重载由于在父类中没有定义这个方法，所以它不能被父类类型的引用调用</span><br>    <span class="hljs-comment">//所以在下面的main方法中child.func1(68)是不对的</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;BBB&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//func2()重写了父类Father中的func2()方法如果父类类型的引用中调用了func2()方法，那么必然是子类中重写的这个方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CCC&quot;</span>);<br>    &#125;<br>&#125;<br> <br> <br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PolymorphismTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Father child = <span class="hljs-keyword">new</span> Child();<br>        child.func1();<span class="hljs-comment">//打印结果将会是什么？</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;上面的程序是个很典型的多态的例子。子类Child继承了父类Father，并重载了父类的func1()方法，重写了父类的func2()方法。重载后的func1(int i)和func1()不再是同一个方法，由于父类中没有func1(int i),那么，父类类型的引用child就不能调用func1(int i)方法。而子类重写了func2()方法，那么父类类型的引用child在调用该方法时将会调用子类中重写的func2()。<br>&emsp;&emsp;那么该程序将会打印出什么样的结果呢？很显然，应该是“CCC”。</p><p>&emsp;&emsp;这就可以很好解释我在QMPlus上问的问题了。代码位置：Code\Set_12\slides_41</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoctorTest</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ArrayList&lt;Doctor&gt; dlist = <span class="hljs-keyword">new</span> ArrayList&lt;Doctor&gt;();<br>    dlist.add(<span class="hljs-keyword">new</span> Doctor());<br>    dlist.add(<span class="hljs-keyword">new</span> Surgeon());<br>    dlist.add(<span class="hljs-keyword">new</span> FamilyDoctor());<br>    dlist.add(<span class="hljs-keyword">new</span> Surgeon());<br><br>    <span class="hljs-keyword">for</span> (Doctor d : dlist) &#123;<br>      d.treatPatient();<br>      <span class="hljs-comment">// d.giveAdvice();</span><br>    &#125;<br><br>    <span class="hljs-comment">//System.out.println(dlist.get(2).giveAdvice());</span><br>    <span class="hljs-comment">// System.out.println(dlist.indexOf(new FamilyDoctor()));</span><br>    &#125;<br><br>    <span class="hljs-comment">// dlist.get(2).giveAdvice();</span><br>    <span class="hljs-comment">// dlist.get(1).makeIncision();</span><br> <br>&#125;<br><br><span class="hljs-comment">//如何在ArrayList中没用命名的情况下调用里面的函数</span><br><span class="hljs-comment">//如何在ArrayList中对象没有命名的时候 用indexOf索引出来</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;为什么FamilyDoctor不能giveAdvice()?为什么Surgeon不能makeIncision()?明明在他们自己的类中都有定义？<br>&emsp;&emsp;因为，这个里面新建的是Doctor ArrayList，所以只能进行Doctor的操作，其他单独特有的操作，在这个ArrayList里面是无法进行的。<br>&emsp;&emsp;同时，ArrayList可以直接用indexOf(int n)，n为对象所在的位置。<br>&emsp;&emsp;同时下面这个问题和上面的问题一样，父类无法调用子类，如果没有复写的话。 位置：Code\Set_12\slides_32</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Turtle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Creature</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">success</span><span class="hljs-params">()</span></span>&#123;<br>  System.out.println(<span class="hljs-string">&quot;Create a Turtle object successfully&quot;</span>);<br>  &#125;<br>  <br>&#125;          <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MakeCreatures</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    MakeCreatures mCreat = <span class="hljs-keyword">new</span> MakeCreatures();<br>    mCreat.go();<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Creature aCreature = new Creature();</span><br><br>    Creature bCreature = <span class="hljs-keyword">new</span> Rabbit();<br>    bCreature.run(<span class="hljs-number">5</span>, <span class="hljs-keyword">true</span>);<br><br>    Creature cCreature = <span class="hljs-keyword">new</span> Turtle();<br>    System.out.println(cCreature);<br>    <span class="hljs-comment">// cCreature.success(); 因为cCreature创造的是父类，无法调用子类的函数</span><br>    cCreature.swim(<span class="hljs-number">5</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;cCreature.success(); 因为cCreature创造的是父类，无法调用子类的函数。</p><h1 id="重写-Override"><a href="#重写-Override" class="headerlink" title="重写(Override)"></a>重写(Override)</h1><p>重写是子类对父类的允许访问的方法的实现过程进行重新编写,返回值和形参都不能改变。即外壳不变，核心重写！<br>重写的好处在于子类可以根据需要，定义特定于自己的行为。就是说子类能够根据需要实现父类的方法。<br>1.参数列表必须完全与被重写方法的相同。<br>也就是比如 public void sell(){ }<br>重写的子类中也必须是 public void sell() {}<br>如果是 public int sell() {} 会报错 “ 返回类型int与void不兼容 ”<br>2.访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。<br>3.构造方法不能被重写。<br>4.如果不能继承一个方法，则不能重写这个方法。<br>5.重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</p><h1 id="重载-Overload"><a href="#重载-Overload" class="headerlink" title="重载(Overload)"></a>重载(Overload)</h1><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。<br>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。<br>最常用的地方就是构造器的重载。<br>重载规则:<br>1.被重载的方法必须改变参数列表(参数个数或类型不一样)；<br>2.被重载的方法可以改变返回类型；<br>3.被重载的方法可以改变访问修饰符；<br>4.被重载的方法可以声明新的或更广的检查异常；<br>5.方法能够在同一个类中或者在一个子类中被重载。<br>6.无法以返回值类型作为重载函数的区分标准。</p><h1 id="重写与重载之间的区别"><a href="#重写与重载之间的区别" class="headerlink" title="重写与重载之间的区别"></a>重写与重载之间的区别</h1><p>区别点     重载方法    重写方法<br>参数列表   必须修改    一定不能修改<br>返回类型   可以修改    一定不能修改<br>异常       可以修改    可以减少或删除，一定不能抛出新的或者更广的异常<br>访问       可以修改    一定不能做更严格的限制（可以降低限制）</p><hr><p>参考文献</p><blockquote><p><a href="https://blog.csdn.net/weixin_40449300/article/details/84558692">【java基础】——java中父类声明子类实例化</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小学期总结</title>
    <link href="/2019/09/09/%E5%B0%8F%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/"/>
    <url>/2019/09/09/%E5%B0%8F%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;小学期两周的计算机实习结束了，时间虽然不长，但是这两周的收获可并不小，无论是经验还是教训，是个人还是团队，是整体还是细节，都收获颇多。从第一天确定题目，没有基本的架构的思绪混乱，到后来框架渐渐清晰，再到最终整合完成后不断地debug，每天都是满满当当，每天都有不一样的收获。最后一天验收并没有想象中的那么紧张和快乐，反而是异常平静，还有一丝小失落。总的来说，达到了计算机实习的既定目标。<br>&emsp;&emsp;回顾这十多天的经历，还是学会很多的，比如说ftell , fseek等用法、意义，系统时间的调用，以及可以用变量创建不同的文件等，接下来我想从整体把握和细节处理两个方面谈谈我的心得体会。<span id="more"></span></p><h1 id="整体把握"><a href="#整体把握" class="headerlink" title="整体把握"></a>整体把握</h1><h2 id="分工合作"><a href="#分工合作" class="headerlink" title="分工合作"></a>分工合作</h2><p>&emsp;&emsp;先从整体把握方面来说，第一点，我认为最重要的就是分工合作，而在分工合作中组长起着至关重要的作用，任务分配和进度管理，都是对组长的一个考验，同时组员也有义务帮助组长看安排的是否合理。我们组前两天有些操之过急，而且大部分都是各自做各自的事情，对任务的分配也不是很明确，也就是不知道自己到底在写什么，写的代码到底应该放到什么地方去，不清楚自己在干什么大大的浪费了时间。再者，分工的时候也要有先后，有的部分需要有前面的作为基础才能够写，所以大家可以先集中去把框架搭起来，然后再去分配重新分配任务。最后就是整合，整合的过程会出现很多的问题。比如前面一个函数需要调用后面一个函数，但是后面函数需要的东西，前面函数不需要，所以还要改前面函数的定义，把后面函数需要调用的输入到前面函数，再调用到后面的函数。同时再改版的时候，由于大家是一起工作，所以会有人拿的版本新，有的人拿的版本老，就导致，有些已经改动过的内容由于版本旧会相当于没改，也浪费了许多时间。</p><h2 id="心态方面"><a href="#心态方面" class="headerlink" title="心态方面"></a>心态方面</h2><p>&emsp;&emsp;第二点是心态方面，由于开始有些操之过急，应该实现的效果实现的并不是很好，所以后面要有改动，有的改动还是大改动。因为不完美，后面就需要用更长的时间去看自己写的代码，以及看懂之后怎么改，有的时候不放弃旧的思路是不行的，逻辑问题非常严重，不得不从头再来。而且有的时候心态很着急，就耐不下心来去看代码，毛毛躁躁的越看越看不下去，时间都白白地浪费掉了。所以今后在编程地过程中，要平心静气，要一点一点地去解决问题，不能因为怕麻烦一眼看过几行代码，代码的意义全都不懂，最后落得重新开始的结果。</p><h2 id="工作日志"><a href="#工作日志" class="headerlink" title="工作日志"></a>工作日志</h2><p>&emsp;&emsp;第三点是工作日志和工作进度方面，每个人每天都应该写自己的工作日志，今天到底干了些什么，有哪些地方已经弄好，有哪些地方还没有写完，会有什么存在的逻辑问题，以及今后需要优化做的事情。写完之后统一交给组长，由组长对今天任务进度进行把控，对没有按时完成进度的同学进行关照，是组长分配任务的不合理，还是因为别的事情耽误了，再综合考虑后，重新规划明天的任务，保证每天大体按进度进行，做到稳中有序，不慌不忙。</p><h2 id="编程方面"><a href="#编程方面" class="headerlink" title="编程方面"></a>编程方面</h2><p>&emsp;&emsp;第四点是关于编程方面的，在开始编程的时候没有考虑到天数的问题，所有的文件和数据都是按照一天的情况写的，所以导致后面需要将数组升维，每个里面再重新加入判断是今天还是明天的代码。还有就是变量没有统一，很多重复意义的变量名称导致调用的时候混乱。前后写入的方式没有统一，所以会出现一直debug，bug一直有的情况。开工之前应该把大家都用到的变量和函数统一，防止发生重复，以及调用混乱的情况。第四点是关于编程方面的，在开始编程的时候没有考虑到天数的问题，所有的文件和数据都是按照一天的情况写的，所以导致后面需要将数组升维，每个里面再重新加入判断是今天还是明天的代码。还有就是变量没有统一，很多重复意义的变量名称导致调用的时候混乱。前后写入的方式没有统一，所以会出现一直debug，bug一直有的情况。开工之前应该把大家都用到的变量和函数统一，防止发生重复，以及调用混乱的情况。开工前要先画流程图，对程序运行的过程要有一个整体的把握。写代码应该由实际情况出发，优先考虑好需要满足的功能、需要考虑到的特殊情况以及题目中或现实生活中提供的情景与限制，从这个基础出发再去考虑如何在代码层面上实现各个功能及满足限制，以确保代码上的逻辑正确。</p><h1 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h1><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p>&emsp;&emsp;前面谈完了整体把握方面，现在来说说细节处理。第一点写代码要合乎规范，通俗易懂。队友之间要作妖沟通，因为是团队合作，所以肯定会有互相调用函数的情况，有的函数的变量可能别人用不到，但是自己会用到，对别人的函数进行修改的时候一定要做好注释，不然就会导致这个函数最后谁都看不懂，每个人只能看懂自己写的一部分，一旦出了问题，那么改起来就要从头开始了，是十分费力不讨好的事情。</p><h2 id="逻辑思维"><a href="#逻辑思维" class="headerlink" title="逻辑思维"></a>逻辑思维</h2><p>&emsp;&emsp;第二点就是思维逻辑，考虑问题是否周全。要对不同种的情况进行考虑，写完之后也要进行多种可能发生的情况测试，边测边改，如果发现改代码的代价太大，要果断地敢于放弃之前写的代码，重新开始。有的时候，重新开始比在之前的路上继续走要更有勇气和动力！</p><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p>&emsp;&emsp;第三点是Debug。很多情况都是一些很小的问题，有些可以一眼看出来，这个样的还好，但是有些找出来需要花费的代价太大，这些都是编程没有养成良好习惯造成的。比如说，文件没关，之前打开的只读，写入写不进去，或者写入没关，直接显示没写进去的情况。变量名称之间引用错误，如用户数有很多个，本来是j但是习惯性的打成I 。Debug的时候顾前忘后，比如前面的都改成了Seats[day+date-1]，到后面的都改成了Sears[day]，然后一直发现只是第一天的，bug一直找不到。又比如关于回车的问题，对于一个文件有三个情况都会改写。但是有的最后会打一个回车，有的不会，这就造成读取行的时候会差一的问题，所以要在写文件的时候明确规范，到底要不要回车。同时回车有的时候会在gets使用的时候吞掉，所以要记得释放键盘缓冲区。</p><h2 id="文件应用"><a href="#文件应用" class="headerlink" title="文件应用"></a>文件应用</h2><p>&emsp;&emsp;第四点是多余文件记录信息。如果可以用现有的文件生成所需要的信息，就不用再单独写一个文件了，而且多余文件之间还需要进行联动，对于编程也是一大难点，应该确定主文件，只要主文件变，其他相应的文件都应该跟着改。除非是需要永久存储的信息，需要写入到文件中。</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>&emsp;&emsp;这次小学期是第一次进行小组合作完成任务，在合作中出现很多出人意料的问题也都是很正常的情况，这些问题让我们在个人能力和团队合作上都有了提升。恪守北邮“厚德博学，敬业乐群”的校训，兢兢业业地完成自己的工作，十多天的时间不长，却让我对北邮的校训有了新的理解和体会。虽然合作中有很都不尽如人意的地方，但是能和这样认真负责的队友一起完成任务，着实是一件很快乐，很充实的事情。小学期的意义不仅在于编程技术上的提升，更在当今合作的大趋势下，教会我如何与队友合作，去完成更加艰巨的任务。</p>]]></content>
    
    
    <categories>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言自写头文件</title>
    <link href="/2019/07/21/c%E8%AF%AD%E8%A8%80%E8%87%AA%E5%86%99%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <url>/2019/07/21/c%E8%AF%AD%E8%A8%80%E8%87%AA%E5%86%99%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;当你在一个项目小组做一个相对较复杂的工程时，意味着你不再独自单干。你需要和你的小组成员分工合作，一起完成项目，这就要求小组成员各自负责一部分工程。比如你可能只是负责通讯或者显示这一块。这个时候，你就应该将自己的这一块程序写成一个模块，单独调试，留出接口供其它模块调用。最后，小组成员都将自己负责的模块写完并调试无误后，由项目组长进行组合调试。像这些场合就要求程序必须模块化。模块化的好处是很多的，不仅仅是便于分工，它还有助于程序的调试，有利于程序结构的划分，还能增加程序的可读性和可移植性。（这句话是抄的）<br>&emsp;&emsp;总的来说就是在一个工程中添加 <em>.h 和 * .c文件，然后引用</em>.h即可。</p><span id="more"></span><p>引用的方法有两种例如要引用一个叫stdio.h的头文件。<br>方法一：#include &lt;stdio.h&gt;<br>方法二：#include “stdio.h”<br>我想用一个例子就来说明这个问题。<br>请看下面的源代码。😄<br>文件名max.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;max.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdio.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span>&#123;<br><span class="hljs-keyword">int</span> max;<br><span class="hljs-keyword">if</span>(a&gt;=b&amp;&amp;a&gt;=c)<br><span class="hljs-keyword">return</span> a;<br><span class="hljs-keyword">if</span>(b&gt;=a&amp;&amp;b&gt;=c)<br><span class="hljs-keyword">return</span> b;<br><span class="hljs-keyword">if</span>(c&gt;=a&amp;&amp;c&gt;=b)<br><span class="hljs-keyword">return</span> c;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>文件名max.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> max_h</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> max_h<span class="hljs-comment">//注意不要写成max.h的格式</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>文件名main.c(这个名字可以是随意的，可以是c也可以是cpp的格式)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;max.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a,b,c;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input a:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\ninput b:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\ninput c:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;c);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>,max(a,b,c));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;整体合在一起就可以啦！<br>&emsp;&emsp;性能的好坏看.c文件写的怎么样，规定动作是.h的格式。</p><hr><p>参考文献</p><blockquote><p><a href="https://blog.csdn.net/zhzht19861011/article/details/5974945">嵌入式C语言之—模块化编程</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言结构</title>
    <link href="/2019/07/16/c%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84/"/>
    <url>/2019/07/16/c%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;结构是c语言中比较重要的一部分，但是我的使用频率不高，为了防止遗忘，就写了这篇。不要说我能不用结构就不用结构，每个事物的存在都有其必然性，在你需要的时候你就会想起它啦！<br>&emsp;&emsp;如果有很多个结构，比较容易搞混，尤其是结构带着数组、指针，再写在函数里面就更热闹了。下面这个图写着我满脸的开心。🙂<br><img src="https://i.loli.net/2019/07/16/5d2dd3bda9b1641061.png"></p><span id="more"></span><h1 id="结构体的定义"><a href="#结构体的定义" class="headerlink" title="结构体的定义"></a>结构体的定义</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>　结构体名&#123;</span>  <br>     类型名<span class="hljs-number">1</span>　成员名<span class="hljs-number">1</span>;<br>     类型名<span class="hljs-number">2</span>　成员名<span class="hljs-number">2</span>;<br>    ……<br>     类型名n　成员名n;　　　<br> &#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br>    <span class="hljs-keyword">char</span>*name;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> age;<span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">float</span> height;<span class="hljs-comment">//身高</span><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="结构体变量的定义（三种方法）"><a href="#结构体变量的定义（三种方法）" class="headerlink" title="结构体变量的定义（三种方法）"></a>结构体变量的定义（三种方法）</h1><h2 id="先定义结构体类型，再定义变量"><a href="#先定义结构体类型，再定义变量" class="headerlink" title="先定义结构体类型，再定义变量"></a>先定义结构体类型，再定义变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br>    <span class="hljs-keyword">char</span>*name;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> age;<span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">float</span> height;<span class="hljs-comment">//身高</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu</span>;</span><br><span class="hljs-comment">//定义了一个结构体变量，变量名为stu。</span><br><span class="hljs-comment">//struct和Student是连着使用的。</span><br></code></pre></td></tr></table></figure><h2 id="定义结构体类型的同时定义变量"><a href="#定义结构体类型的同时定义变量" class="headerlink" title="定义结构体类型的同时定义变量"></a>定义结构体类型的同时定义变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br>    <span class="hljs-keyword">char</span>*name;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> age;<span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">float</span> height;<span class="hljs-comment">//身高</span><br>&#125;stu;<span class="hljs-comment">//结构体变量名为stu</span><br></code></pre></td></tr></table></figure><h2 id="直接定义结构体类型变量，省略类型名"><a href="#直接定义结构体类型变量，省略类型名" class="headerlink" title="直接定义结构体类型变量，省略类型名"></a>直接定义结构体类型变量，省略类型名</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">char</span>*name;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> age;<span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">float</span> height;<span class="hljs-comment">//身高</span><br>&#125;stu;<br><span class="hljs-comment">//结构体变量名为stu</span><br></code></pre></td></tr></table></figure><h1 id="结构体的注意点"><a href="#结构体的注意点" class="headerlink" title="结构体的注意点"></a>结构体的注意点</h1><p>&emsp;&emsp;<strong>不允许对结构体本身递归定义，但是结构体内可以包含别的结构体。</strong><br>&emsp;&emsp;定义结构体类型，只是说明了该类型的组成情况，并没有给它分配存储空间，就像系统不为int类型本身分配空间一样。只有当定义属于结构体类型的变量时，系统才会分配存储空间给该变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Date</span>&#123;</span><br><span class="hljs-keyword">int</span> year;<br><span class="hljs-keyword">int</span> month;<br><span class="hljs-keyword">int</span> day;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br><span class="hljs-keyword">char</span> *name;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Date</span> <span class="hljs-title">birthday</span>;</span><span class="hljs-comment">//结构体内可以包含别的结构体</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu</span>;</span><br>stu.name=<span class="hljs-string">&quot;someone&quot;</span>;<br>stu.birthday.year=<span class="hljs-number">2018</span>;<br>stu.birthday.month=<span class="hljs-number">8</span>;<br>stu.birthday.day=<span class="hljs-number">15</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,stu.name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>,stu.birthday.year,stu.birthday.month,stu.birthday.day);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结构体的初始化"><a href="#结构体的初始化" class="headerlink" title="结构体的初始化"></a>结构体的初始化</h1><p>&emsp;&emsp;将各成员的初值，按顺序地放在一对大括号{}中，并用逗号分隔，一一对应赋值。<br>&emsp;&emsp;<strong>注意一定是用大括号！！字符型的用””,int or float就用数值。</strong><br>&emsp;&emsp;只能在定义变量的同时进行初始化赋值，初始化赋值和变量的定义不能分开。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br>    <span class="hljs-keyword">char</span> *name;<br>    <span class="hljs-keyword">int</span> age;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu</span> =</span> &#123;<span class="hljs-string">&quot;MJ&quot;</span>, <span class="hljs-number">27</span>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-keyword">char</span> *name;<br><span class="hljs-keyword">int</span> age;<br>&#125;stu[<span class="hljs-number">2</span>]=&#123;&#123;<span class="hljs-string">&quot;ta&quot;</span>,<span class="hljs-number">19</span>&#125;,&#123;<span class="hljs-string">&quot;ni&quot;</span>,<span class="hljs-number">19</span>&#125;&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>,stu[<span class="hljs-number">0</span>].name,stu[<span class="hljs-number">0</span>].age);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>,stu[<span class="hljs-number">1</span>].name,stu[<span class="hljs-number">1</span>].age);<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="结构体的使用"><a href="#结构体的使用" class="headerlink" title="结构体的使用"></a>结构体的使用</h1><p>&emsp;&emsp;一般对结构体变量的操作是以成员为单位进行的，引用的一般形式为：结构体变量名.成员名<br>&emsp;&emsp;(2)行对结构体的age成员进行了赋值。”.”称为成员运算符，它在所有运算符中优先级最高。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br>     <span class="hljs-keyword">char</span> *name;<br>     <span class="hljs-keyword">int</span> age;<br> &#125;;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu</span>;</span> <br> stu.age = <span class="hljs-number">27</span>; <span class="hljs-comment">// 访问stu的age成员........(2)</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;相同类型的结构体变量之间可以进行整体赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">3</span>、相同类型的结构体变量之间可以进行整体赋值<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br>      <span class="hljs-keyword">char</span> *name;<br>      <span class="hljs-keyword">int</span> age;<br>  &#125;;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu1</span> =</span> &#123;<span class="hljs-string">&quot;MJ&quot;</span>, <span class="hljs-number">27</span>&#125;;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu2</span> =</span> stu1; <span class="hljs-comment">// 将stu1直接赋值给stu2</span><br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;age is %d&quot;</span>, stu2.age);<br> <span class="hljs-comment">//输出结果为： age is 27</span><br></code></pre></td></tr></table></figure><h1 id="结构体作为函数参数"><a href="#结构体作为函数参数" class="headerlink" title="结构体作为函数参数"></a>结构体作为函数参数</h1><p>&emsp;&emsp;我记得期末考试的时候好像出了这么一道题。<br>&emsp;&emsp;将结构体变量作为函数参数进行传递时，其实传递的是全部成员的值，也就是将实参中成员的值一一赋值给对应的形参成员。因此，形参的改变不会影响到实参。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br><span class="hljs-keyword">int</span> age;<br>&#125; ;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(struct Student stu)</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改前的形参：%d \n&quot;</span>,stu.age);<br><span class="hljs-comment">//修改实参中的age</span><br>stu.age = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改后的形参: %d \n&quot;</span>,stu.age); <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu</span> =</span> &#123;<span class="hljs-number">30</span>&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改前的实参：%d \n&quot;</span>,stu.age);<br><span class="hljs-comment">//调用test函数</span><br>test(stu);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改后的实参: %d \n&quot;</span>,stu.age);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2dcbde265c822589.png"></p><p>&emsp;&emsp;可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span></span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-keyword">char</span>  title[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  author[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-keyword">int</span>   book_id;<br>&#125;;<br> <br><span class="hljs-comment">/* 函数声明 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">( struct Books book )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span> <span class="hljs-title">Book1</span>;</span>        <span class="hljs-comment">/* 声明 Book1，类型为 Books */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span> <span class="hljs-title">Book2</span>;</span>        <span class="hljs-comment">/* 声明 Book2，类型为 Books */</span><br> <br>   <span class="hljs-comment">/* Book1 详述 */</span><br>   <span class="hljs-built_in">strcpy</span>( Book1.title, <span class="hljs-string">&quot;C Programming&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book1.author, <span class="hljs-string">&quot;Nuha Ali&quot;</span>); <br>   <span class="hljs-built_in">strcpy</span>( Book1.subject, <span class="hljs-string">&quot;C Programming Tutorial&quot;</span>);<br>   Book1.book_id = <span class="hljs-number">6495407</span>;<br> <br>   <span class="hljs-comment">/* Book2 详述 */</span><br>   <span class="hljs-built_in">strcpy</span>( Book2.title, <span class="hljs-string">&quot;Telecom Billing&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book2.author, <span class="hljs-string">&quot;Zara Ali&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book2.subject, <span class="hljs-string">&quot;Telecom Billing Tutorial&quot;</span>);<br>   Book2.book_id = <span class="hljs-number">6495700</span>;<br> <br>   <span class="hljs-comment">/* 输出 Book1 信息 */</span><br>   printBook( Book1 );<br> <br>   <span class="hljs-comment">/* 输出 Book2 信息 */</span><br>   printBook( Book2 );<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">( struct Books book )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book title : %s\n&quot;</span>, book.title);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book author : %s\n&quot;</span>, book.author);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book subject : %s\n&quot;</span>, book.subject);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book book_id : %d\n&quot;</span>, book.book_id);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="指向结构体的指针变量"><a href="#指向结构体的指针变量" class="headerlink" title="指向结构体的指针变量"></a>指向结构体的指针变量</h1><p>1、每个结构体变量都有自己的存储空间和地址，因此指针也可以指向结构体变量<br>2、结构体指针变量的定义形式：struct 结构体名称 *指针变量名<br>3、有了指向结构体的指针，那么就有3种访问结构体成员的方式<br>（1）、结构体变量名.成员名<br>（2）、(*指针变量名).成员名<br>（3）、指针变量名-&gt;成员名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br><span class="hljs-keyword">char</span> *name;<br><span class="hljs-keyword">int</span> age;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu</span> =</span> &#123;<span class="hljs-string">&quot;OJ&quot;</span>,<span class="hljs-number">18</span>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> *<span class="hljs-title">p</span>;</span><br>p = &amp;stu;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;name=%s,age = %d \n&quot;</span>,stu.name,stu.age);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;name=%s,age = %d \n&quot;</span>,(*p).name,(*p).age);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;name=%s,age = %d \n&quot;</span>,p-&gt;name,p-&gt;age);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2dcdef3633092072.png"></p><p>&emsp;&emsp;您可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，如下所示：</p><center> struct Books *struct_pointer;</center>&emsp;&emsp;现在，您可以在上述定义的指针变量中存储结构变量的地址。为了查找结构变量的地址，请把 & 运算符放在结构名称的前面，如下所示：<center> struct_pointer = &Book1;</center>&emsp;&emsp;为了使用指向该结构的指针访问结构的成员，您必须使用 -> 运算符，如下所示：<center> struct_pointer->title;</center><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span></span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-keyword">char</span>  title[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  author[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-keyword">int</span>   book_id;<br>&#125;;<br> <br><span class="hljs-comment">/* 函数声明 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">( struct Books *book )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span> <span class="hljs-title">Book1</span>;</span>        <span class="hljs-comment">/* 声明 Book1，类型为 Books */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span> <span class="hljs-title">Book2</span>;</span>        <span class="hljs-comment">/* 声明 Book2，类型为 Books */</span><br> <br>   <span class="hljs-comment">/* Book1 详述 */</span><br>   <span class="hljs-built_in">strcpy</span>( Book1.title, <span class="hljs-string">&quot;C Programming&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book1.author, <span class="hljs-string">&quot;Nuha Ali&quot;</span>); <br>   <span class="hljs-built_in">strcpy</span>( Book1.subject, <span class="hljs-string">&quot;C Programming Tutorial&quot;</span>);<br>   Book1.book_id = <span class="hljs-number">6495407</span>;<br> <br>   <span class="hljs-comment">/* Book2 详述 */</span><br>   <span class="hljs-built_in">strcpy</span>( Book2.title, <span class="hljs-string">&quot;Telecom Billing&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book2.author, <span class="hljs-string">&quot;Zara Ali&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book2.subject, <span class="hljs-string">&quot;Telecom Billing Tutorial&quot;</span>);<br>   Book2.book_id = <span class="hljs-number">6495700</span>;<br> <br>   <span class="hljs-comment">/* 通过传 Book1 的地址来输出 Book1 信息 */</span><br>   printBook( &amp;Book1 );<br> <br>   <span class="hljs-comment">/* 通过传 Book2 的地址来输出 Book2 信息 */</span><br>   printBook( &amp;Book2 );<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">( struct Books *book )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book title : %s\n&quot;</span>, book-&gt;title);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book author : %s\n&quot;</span>, book-&gt;author);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book subject : %s\n&quot;</span>, book-&gt;subject);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book book_id : %d\n&quot;</span>, book-&gt;book_id);<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>参考文献</p><blockquote><p><a href="http://www.runoob.com/cprogramming/c-structures.html">C 结构体| 菜鸟教程</a><br><a href="https://www.kancloud.cn/digest/clearning/149712">C语言入门教程24-结构体· C语言编程基础· 看云</a><br><a href="https://www.jianshu.com/p/11338c411bec">c语言中的关键字struct(结构体)的用法- 简书</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言作业总结</title>
    <link href="/2019/07/04/c%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9A%E6%80%BB%E7%BB%93/"/>
    <url>/2019/07/04/c%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9A%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这篇博客记录了学习c语言过程中遇到的问题，以及解决方案。很多问题都很简单，但是经常会碰到。我把这些踩过的坑记录下来，防止日后再踩。<br>&emsp;&emsp;其中也有一些掌握不太好的，主要是写代码时不太常用，再想用的时候又要去查，所以我也把这些记录下来了。<br><img src="https://i.loli.net/2019/07/04/5d1dee5dc0db071158.png" alt="图片来源于网络"></p><span id="more"></span><h1 id="switch的用法"><a href="#switch的用法" class="headerlink" title="switch的用法"></a>switch的用法</h1><p>&emsp;&emsp;switch后不能是实参，case后不能是变量</p><h2 id="整型数来选择情况"><a href="#整型数来选择情况" class="headerlink" title="整型数来选择情况"></a>整型数来选择情况</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<span class="hljs-comment">//不要忘记地址符</span><br><span class="hljs-keyword">switch</span>(n)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: 语句<span class="hljs-number">1</span>;  <span class="hljs-keyword">break</span>;<span class="hljs-comment">//如果没有特殊的要求，switch后要加break;</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: 语句<span class="hljs-number">2</span>;  <span class="hljs-keyword">break</span>;<br>       <span class="hljs-keyword">default</span>: 语句<span class="hljs-number">3</span>;<span class="hljs-comment">//default后不用break，因为已经到最后了</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="字符选择情况"><a href="#字符选择情况" class="headerlink" title="字符选择情况"></a>字符选择情况</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">char</span> c;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;c);<br><span class="hljs-keyword">switch</span>(c)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>: 语句<span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<span class="hljs-comment">//注意case后加的是 &#x27;字符&#x27;，而不是直接 字符</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>: 语句<span class="hljs-number">2</span>;<span class="hljs-keyword">break</span>;<span class="hljs-comment">//与上一个区分开</span><br><span class="hljs-keyword">default</span>: 语句<span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="取整的话，正数可以直接加0-5取整，但是负数不行"><a href="#取整的话，正数可以直接加0-5取整，但是负数不行" class="headerlink" title="取整的话，正数可以直接加0.5取整，但是负数不行"></a>取整的话，正数可以直接加0.5取整，但是负数不行</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">round_to_nearest</span><span class="hljs-params">(<span class="hljs-keyword">float</span> num)</span></span>;<span class="hljs-comment">//我喜欢先写函数，写完再复制到上面来声明</span><br><span class="hljs-comment">//int round_to_nearest(float);这个num可写可不写，只要告诉类型即可</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">float</span> num;<br>    <span class="hljs-keyword">int</span> result;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;num)!=EOF)<span class="hljs-comment">//无限次循环语句</span><br>&#123;<br>result = round_to_nearest(num);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,result);<br>&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">round_to_nearest</span><span class="hljs-params">(<span class="hljs-keyword">float</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (num&gt;=<span class="hljs-number">0</span>)                 <span class="hljs-comment">//正数取整</span><br><span class="hljs-keyword">return</span> ((<span class="hljs-keyword">int</span>)(num+<span class="hljs-number">0.5</span>));<br>  <span class="hljs-keyword">else</span>                        <span class="hljs-comment">//负数取整</span><br>  <span class="hljs-keyword">return</span> ((<span class="hljs-keyword">int</span>)(num<span class="hljs-number">-0.5</span>));    <span class="hljs-comment">//强制类型转换是(int)数，而不是int(数)</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="打印出表格的效果"><a href="#打印出表格的效果" class="headerlink" title="打印出表格的效果"></a>打印出表格的效果</h1><p>&emsp;&emsp;目前能想到的方法有两种，第一种方法是用数组处理，然后用循环把数组打印出来；第二种方法是将内容写在文件里面，然后从文件中读取打印到屏幕上。(人工手动敲出来的我就不说了，这应该是计算机做的事情，而不是人应该做的)<br>&emsp;&emsp;数组的好处在于可以直接进行处理，不需要再进行写入和读取的操作，同时也不是一个一个定义的，存储有永久性，可以随用随调。缺点就是，也算不上是缺点吧，如果数组比较多的话，可能需要用到结构，那么写的代码行数自然就多了，而且自己可能还弄不明白，绕来绕去就糊涂了。<br>&emsp;&emsp;文件的好处在于简单，也就是做完一步就可以把想显示的内容写到文件当中，只需要最后去按行读取、打印就可以了。（文件的读取有一个函数，会在后面写出来）</p><h1 id="循环和递归"><a href="#循环和递归" class="headerlink" title="循环和递归"></a>循环和递归</h1><p>&emsp;&emsp;如果能用循环解决问题就不要用递归解决，递归耗内存，耗时间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">intergerPower2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> base,<span class="hljs-keyword">int</span> exponent)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> base,exponent,result;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;base,&amp;exponent)!=EOF)<br>    &#123;<br>    result = intergerPower2(base,exponent);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,result);<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">intergerPower2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> base,<span class="hljs-keyword">int</span> exponent)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> result2=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(exponent&lt;=<span class="hljs-number">0</span>)<span class="hljs-comment">//或者是</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//if(exponent&lt;=1)</span><br>    <span class="hljs-comment">//return base;</span><br>    <span class="hljs-keyword">return</span> base*intergerPower2(base,exponent<span class="hljs-number">-1</span>);<br>  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;递归的基本形式。</p><h1 id="循环中gets会吃上一次的回车"><a href="#循环中gets会吃上一次的回车" class="headerlink" title="循环中gets会吃上一次的回车"></a>循环中gets会吃上一次的回车</h1><p>&ensp;&ensp;Write a program that enters 5 names of towns and their respective distance (an integer) from London in miles. The program will print of the names of the towns that are less than 100 miles from London. Use arrays and character strings to implement your program.<br>&emsp;&emsp;例如在这题中，如果你考虑城市的名称中有空格的存在，那么你就不应该用sacnf去读取城市的名称，你应该用gets去读取。但是gets会把回车吃掉。举个例子。如果你这么写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">less100</span><span class="hljs-params">(<span class="hljs-keyword">int</span> miles)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">10000</span>];<br><span class="hljs-keyword">int</span> distance[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> i,a=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Enter Name : &quot;</span>);<br>gets(name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Enter the distance:&quot;</span>); <br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;distance[i]);<br>a = less100(distance[i]);<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s is less than 100 miles from London\n\n&quot;</span>,name);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">less100</span><span class="hljs-params">(<span class="hljs-keyword">int</span> miles)</span></span>&#123;<br><span class="hljs-keyword">if</span> (miles &lt; <span class="hljs-number">100</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/04/5d1de9dda5f6647120.png"><br>&emsp;&emsp;效果是这个样子的，原因是上一次的回车停留在缓冲区，下一次输入敲回车，得到的是上次的回车，会有错位的情况，所以解决问题的方法是清除缓冲区[fflush(stdin);]stdin就是键盘。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">less100</span><span class="hljs-params">(<span class="hljs-keyword">int</span> miles)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">10000</span>];<br><span class="hljs-keyword">int</span> distance[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> i,a=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Enter Name : &quot;</span>);<br>gets(name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>fflush(<span class="hljs-built_in">stdin</span>);   <span class="hljs-comment">//清空缓冲区</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Enter The Distance From London : &quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;distance[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>fflush(<span class="hljs-built_in">stdin</span>);   <span class="hljs-comment">//清空缓冲区</span><br>a = less100(distance[i]);<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n\n&quot;</span>,name);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">less100</span><span class="hljs-params">(<span class="hljs-keyword">int</span> miles)</span></span>&#123;<br><span class="hljs-keyword">if</span> (miles &lt; <span class="hljs-number">100</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="函数回传指针"><a href="#函数回传指针" class="headerlink" title="函数回传指针"></a>函数回传指针</h1><p>&emsp;&emsp;如果函数的返回值是一个指针的话，同时要进行多次循环调用函数的话，如果没有把指针定义成数组的形式，是无法进行整体输出的。需要在每次调用完函数之后进行输出，也就是所谓的释放空间。如果定义成数组的形式，可以回传整个指针(或者说是数组)，然后用循环整体打印。<br>&emsp;&emsp;回传的如果是数组，打印的话不能写成printf(“%d”,p);而应该是printf(“%d”,p[0]);这是读取数组里的第一个元素，依次类推。如果是printf(“%d”,p);显示的则是p数组的地址，而不是数值。</p><h1 id="关于字符串"><a href="#关于字符串" class="headerlink" title="关于字符串"></a>关于字符串</h1><p>&emsp;&emsp;可以说字符串就是数组，数组就是字符串。如果想定义二维数组的字符串可以像这样定义char string[5][10000]; string[0]就是第一个字符串，string[1]是第二个字符串，依次类推到string[4]，长度均为10000。<br>&emsp;&emsp;还有就是strlen和sizeof的区别，由于字符串都会以”\0”结尾，所以真实长度比你输入的长度多1。例如字符串’Happy’的长度为6，分别为 H a p p y \0 。 所以如果用strlen取字符串长度会得到5，也就是不会读取 \0 ， 但是如果用sizeof会得到6 ， 也就是算上了\0。 使用时要格外注意。</p><h1 id="读取数组的四种方法"><a href="#读取数组的四种方法" class="headerlink" title="读取数组的四种方法"></a>读取数组的四种方法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> num1[<span class="hljs-number">5</span>],num2[<span class="hljs-number">5</span>],i;<br><span class="hljs-keyword">int</span> *p=num2;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num1[i]);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>num2[i]=num1[<span class="hljs-number">4</span>-i];<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,num2[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(num2+i));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(p+i));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,p[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;可以看出，数组和指针是一个东西。<del>而且读取很方便，想读谁就可以直接读取。</del>我才不会主动用指针写程序呢。</p><h1 id="检验字符串是否合法"><a href="#检验字符串是否合法" class="headerlink" title="检验字符串是否合法"></a>检验字符串是否合法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//Check if the input is valid</span><br><span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Enter Your ID Number:&quot;</span>);<br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-keyword">if</span>(k&gt;<span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Your ID Number Includes 2 Letters and 4 Digits:&quot;</span>);<br>k++;<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,ID);<br>&#125;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">strlen</span>(ID)!=<span class="hljs-number">6</span>||valid(ID)!=<span class="hljs-number">1</span>);<span class="hljs-comment">//If the length is not 6, it will ask to put again, and the speed will be fast</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">valid</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *<span class="hljs-built_in">string</span>)</span></span>&#123;<br><span class="hljs-keyword">int</span> i,letter=<span class="hljs-number">0</span>,number=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>((<span class="hljs-built_in">string</span>[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; <span class="hljs-built_in">string</span>[i]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>) || (<span class="hljs-built_in">string</span>[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; <span class="hljs-built_in">string</span>[i]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>))<span class="hljs-comment">//How many letters</span><br>letter+=<span class="hljs-number">1</span>;<br>&#125;<br> <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;<span class="hljs-number">6</span>;i++)<br> &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">string</span>[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; <span class="hljs-built_in">string</span>[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<span class="hljs-comment">//How many numbers</span><br>number+=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(letter == <span class="hljs-number">2</span> &amp;&amp; number == <span class="hljs-number">4</span>)<span class="hljs-comment">//If the string is valid, return 1</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//If it is invalid, return 0</span><br>&#125; <br><br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;检验字符串的合法性，先检验长度是否满足，如果长度不满足，直接判断为不合法，可以加快判断速度。因为计算机做判断和循环是很浪费时间的。所以先判断字符串长度是否符合可以加快程序运行的速度。<br>&emsp;&emsp;还有就是如果输入错误的话，让用户重新输入的提示，可以用一个判断来进行，让第二次的显示不同于第一次，如果可以的话，还可以告诉用户到底是哪里输入错误，还有怎么输入才是正确的。</p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="文件使用"><a href="#文件使用" class="headerlink" title="文件使用"></a>文件使用</h2><p>&emsp;&emsp;需要先定义文件  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *tset<br><span class="hljs-keyword">if</span>( (test=fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)) == <span class="hljs-literal">NULL</span> )&#123;<br>       perror(<span class="hljs-string">&quot;test.txt&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br> &#125;<br> <br></code></pre></td></tr></table></figure><p>w写入，但如果之前有会把之前的清空<br>a追加，在文件的最后写入，不会把之前的清空<br>r读取。<br>w+,r+,a+,表示之前的功能都有，也可以写入<br>带b的就是以二进制的形式对文件进行操作</p><h2 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *record;<br>readfile(record);<span class="hljs-comment">//调用函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">readfile</span><span class="hljs-params">(FILE *record)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> *str1,*ptr;<br><span class="hljs-keyword">char</span> *res[<span class="hljs-number">999</span>];<br><span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<br>FILE *pFile;<br><span class="hljs-keyword">char</span> mystring[<span class="hljs-number">1000</span>];<br>pFile = fopen(<span class="hljs-string">&quot;record.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (pFile == <span class="hljs-literal">NULL</span>)<br>        perror (<span class="hljs-string">&quot;Error opening file&quot;</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">while</span> (fgets (mystring , <span class="hljs-number">100</span> , pFile) != <span class="hljs-literal">NULL</span> )<span class="hljs-comment">//读取长度为100</span><br>            &#123;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(mystring);<span class="hljs-comment">//Read the record.tet by line</span><br><span class="hljs-keyword">if</span>(mystring[len<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;\n&#x27;</span>)<span class="hljs-comment">//Think of a line as a string</span><br>  mystring[len<span class="hljs-number">-1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<span class="hljs-comment">//按行读取</span><br><br><span class="hljs-keyword">char</span>* tmp = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<br>            <span class="hljs-built_in">memcpy</span>(tmp,mystring,len);<span class="hljs-comment">//usage memcpy(dest, src, strlen(src)); </span><br>            res[p++] = tmp;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;p;i++)<span class="hljs-comment">//如果想打印文件，可以直接printf(&quot;%s&quot;,res[i]);</span><br>&#123;<br>ptr = <span class="hljs-built_in">strstr</span>(res[i],ID);<br><span class="hljs-comment">//strstr用来判断前面的字符串是否包含后面字符串的内容。</span><br>&#125;<span class="hljs-comment">//Determine whether the string containing the ID</span><br><span class="hljs-keyword">if</span>( ptr != <span class="hljs-literal">NULL</span> )<span class="hljs-comment">//If it does contain the string of ID </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,ptr);<span class="hljs-comment">//Printf the string</span><br>&#125;<br>        fclose (pFile);<span class="hljs-comment">//Close the file </span><br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;文件使用前要打开，使用后要关闭，可以的话可以清空缓冲区，并把指针调回。</p><h1 id="精准计时"><a href="#精准计时" class="headerlink" title="精准计时"></a>精准计时</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">clock_t</span> start, finish;<br><span class="hljs-keyword">double</span> duration;<br>start = clock();<br><span class="hljs-comment">//把需要进行计时的部分放到这里</span><br>finish= clock();<br>duration = (<span class="hljs-keyword">double</span>)(finish- start) / CLOCKS_PER_SEC;<br><span class="hljs-comment">//这个用的是处理器的时间计时，所以要除以1s的处理器时间(CLOCKS_PER_SEC)</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The time is %.2lfs.\n&quot;</span>,duration);<span class="hljs-comment">//一般秒就保留到两位小数就可以了。</span><br></code></pre></td></tr></table></figure><h1 id="如何产生真正的随机数，随机并且平均"><a href="#如何产生真正的随机数，随机并且平均" class="headerlink" title="如何产生真正的随机数，随机并且平均"></a>如何产生真正的随机数，随机并且平均</h1><p>&emsp;&emsp;随机数的产生依赖种子，一般就是用时间的不同显示种子的不同。我们不用秒作为种子，用更精细的clock(),也就是srand((unsigned)clock());<br>&emsp;&emsp;比如大作业的十个算术题，要加减乘除每个最少两次，最多三次怎么做到呢？<br>&emsp;&emsp;可以让前八个题每种算法都只出现两次，后两个只要是不同的就行。<br>&emsp;&emsp;用循环和判断来解决这个问题。比如加法，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> add=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>；i&lt;<span class="hljs-number">8</span>;i++)<br><span class="hljs-keyword">if</span>(add&lt;<span class="hljs-number">2</span>)<br>&#123;<br>进行加法运算;<br>i++;<br>add++;<br>&#125;<br><span class="hljs-keyword">else</span><br>i--;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;如果要用switch来选择，那么应该每个后面加一个break; 注意区分break和continue的区别，break是停止，是跳出，而且只能跳出一层，不可以直接都跳出来。continue是结束本次循环，重新进行循环是否满足条件的判断，满足就进行，不满足就不进行，而不是直接开始下次循环。也帮有的同学看过代码，出现的问题就是还没有确定满足能输出的条件呢，就add++了，所以最后出来的题的数目一定会小于10道。同时也有后面的问题，就是最后两次的判断条件是if(add&lt;1)后面的都一样，出来的结果肯定是只有八个题，因为前面已经加减乘除的计数都到2了，所以小于1是不可能的，程序就会出现想卡出一样的情况。<br>&emsp;&emsp;这个i- -用的很巧妙，简而言之就是如果不行，这次循环大家就当无事发生，重新来过。</p><h1 id="while-的循环"><a href="#while-的循环" class="headerlink" title="while 的循环"></a>while 的循环</h1><p>&emsp;&emsp;如果想用while一直循环，可以直接写while(1){运行语句}就可以了，虽然老师说这就是个死程序，但是你可以中间添加break; 来实现你的目的，等到用户输入一个特定的值的时候，你就break跳出循环，十分的方便。顺便提一句，想把内容调回开头可以用goto语法，但是不是很推荐，有兴趣的可以自己了解。<br>&emsp;&emsp;如果你想一直输入无限个数，就用while(scanf(“%d”,&amp;num)){运行语句}。如果是想输入有限个数,可以定义有几个数n，然后用for循环，个人觉得for循环可以解决循环80%的问题，剩下的20%是用while，极少数用do-while，就是判断合法性的时候用一下do-while。for可以代替while和do-while，就是用的时候看起来不太美观。不要为了使用某个语句而用某个语句，而是你觉得就应该用它，你就用它，自己看着怎么舒服怎么来。<br>&emsp;&emsp;同时如果while循环一个大的整体的时候，需要考虑下一次的把上一次的该清零的清零，该重置的重置，不然会影响程序的运行。并不是简单的三行代码就能实现完美循环，还要不断的调试、优化。</p>]]></content>
    
    
    <categories>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件、网站推荐</title>
    <link href="/2019/04/10/%E8%BD%AF%E4%BB%B6%E3%80%81%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    <url>/2019/04/10/%E8%BD%AF%E4%BB%B6%E3%80%81%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<p>今天星期三，整整一下午加一晚上全在写物理实验报告，刚刚写完，已经不想再去动其他科了，就来写写博客放松一下。第二次写是得知高数考试推迟，我就不太忙了，想想这周也没怎么休息就写写玩玩吧！话不多说我们直接进入正题！<span id="more"></span></p><hr><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><p>今天主要说说下面四个浏览器：Microsoft Edge、Google Chrome、Firefox、Tor（链接均为维基百科内容，需要科学浏览）</p><h2 id="Microsoft-Edge"><a href="#Microsoft-Edge" class="headerlink" title="Microsoft Edge"></a><a href="https://zh.wikipedia.org/wiki/Microsoft_Edge">Microsoft Edge</a></h2><p>这个相信大家都不陌生,IE就是它的的前身。不过IE的BUG太多了，经常爆出有安全漏洞，安全性极低，补补修修也根本修不完。有人就要问了为什么不对IE进行大刀阔斧的改动，这个并不是微软不想弄，只不过是公司经常换人，IE浏览器代码的注释不行，不是没有就是看不懂，中间有六年的时间微软几乎停止了对IE的修补，就是因为公司换人，前面的人的代码看不懂，后面的人也不敢对其进行大的改动，就是这么一个这么多BUG的浏览器被无数人用过。直到出现Microsoft Edge，微软彻底放弃了IE。尽管性能，安全性都有了很大的改进，但是还是有部分原来IE的影子，如果有些网站不兼容，你可能还是需要它的。<strong>但是我不是很推荐。</strong></p><h2 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a><a href="https://zh.wikipedia.org/wiki/Google_Chrome">Google Chrome</a></h2><p>这个就是谷歌自家的浏览器了，支持多种插件，插件可以在谷歌商店里直接下载，方便快捷！这个是Chrome，还有一个就是Chromium。Chromium是谷歌开放源代码的浏览器，不过是BSD协议，而且开放的源代码也是一部分。所以并不是完全的开源和安全！而且无数的人去维护去尝试，发现的BUG也不会少，如果你更新的不及时（更新速度很快的，几个小时一个新的版本）也有可能出现安全问题。Chrome69之前出现过删除Cookies时，谷歌自家的Cookies会保存，上传给谷歌。还有Chrome74之后，用户无法再禁用“点击追踪”，简单解释就是统计【外链】的点击情况。其实谷歌真正的用户不是你我，而是那些想投放广告的广告商，谷歌通过收集用户的行为数据，进行统计，分析，最后实现精准投放广告。可以说谷歌也在侵犯隐私的路上越走越远。<br>所以我的建议的是<strong>可以装一个Chrome<a href="https://www.google.com/chrome/?brand=CHBD&gclid=CjwKCAjwqLblBRBYEiwAV3pCJvPY1z5jfAFKG-OCeQKuHyN4-hXX0usBPP_WlWjQqB2a4Lbs3ZGiDBoC0P4QAvD_BwE&gclsrc=aw.ds">这个是下载的地址</a></strong></p><h2 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a><a href="https://zh.wikipedia.org/wiki/Firefox">Firefox</a></h2><p>这个就比较好啦！Firefox是民间非盈利机构创造和维护的，所以不会存在谷歌一样收集用户行为的癖好，即使是有，也会告诉你说是参与用户体验计划。你想参加就参加，不想就可以不参加。最安全的当属Firefox ESR,这个版本的火狐是火狐一直长期维护的，每天晚上都会有一部分人去修BUG，而且版本稳定，一般一年才会更新，所以BUG修的都差不多了，安全上没有问题！同样也支持插件，不比Chrome差。包括Tor,也是内置的火狐。可以说火狐是你的最佳选择！<a href="https://www.mozilla.org/en-US/firefox/new/">下载链接</a></p><h2 id="Tor"><a href="#Tor" class="headerlink" title="Tor"></a><a href="https://zh.wikipedia.org/wiki/Tor">Tor</a></h2><p>这个就比较骚气了！Tor是洋葱路由的简称，因为打开网站的方式像剥洋葱一样，一层一层的，所以得名。Tor的使用主要是实现网络的匿名化，即不想让对方得知你的身份（你的IP地址），Tor通过至少三级跳转实现对目标网站的访问。这些中转都是全世界希望匿名上网的志愿者，自发共享自己的IP组成的。由于是全世界的IP，可以随便跳转。所以加大了侦查的难度，国与国之间想要得到IP也要去进行社交，而且各个点之间都是遵循Tor的加密传输协议，如果没有遇到几个中转都是“蜜罐”的情况，可以保证是安全的。Tor的每次访问页面都是不同IP，因此，就更不可能看出来是一个人的操作行为。但是Tor并不是万能的，Tor的流量特征十分明显，所以有的时候就需要混淆流量，<strong>不要用Tor去看视频，这是十分不道德的行为</strong>，因为这样会占用大量的带宽，Tor目的是实现匿名登录，而不是去看视频，并且网速并不是很快，只有几十到几百KB。再者，不要将Tor和暗网混淆，Tor是实现匿名网络访问，也只是登录比较大的暗网的一种工具而已，至于有没有其他暗网需要别的浏览器，这个本人就不知道了。<a href="https://www.torproject.org/download/">下载地址，可能已经被屏蔽了</a>下载完成后也是需要配置的，这个自己网上找个视频，基本是傻瓜式操作，就不再赘述了。</p><h1 id="插件（脚本）"><a href="#插件（脚本）" class="headerlink" title="插件（脚本）"></a>插件（脚本）</h1><p>主要介绍一个脚本叫油猴脚本（洋文：Tampermonkey),功能十分的强大，趁现在没有被屏蔽，抓紧时间用！<br>功能有：一键VIP视频解析、去广告（全网），一站式音乐搜索下载；百度网盘直接下载、知乎视频下载等多合一版；百度文库文档免费下载，文档内容自由复制；解除大部分网站的限制；AC-baidu:重定向优化百度搜狗谷歌搜索、去广告、favicon_双列；解除B站区域限制；超星网课助手；购物党自动比价工具-领取淘宝内部券等等。<br>功能强大，操作简单！<a href="https://greasyfork.org/zh-CN">网址：https://greasyfork.org/zh-CN </a><br><img src="/images/Tampermonkey.png" alt="Tampermonkey"><br><strong>只支持Chrome和Firefox</strong>而且只有电脑版，手机党就享不了这个福了。<br>如果你是Chrome就点第一个Tampermonkey，如果是Firefox就点第二个Tampermonkey。安装完之后再回到<a href="https://greasyfork.org/zh-CN">这个界面</a>,点下面的浏览此网站，从中选择你想要的脚本，然后安装，完成！</p><h1 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h1><h2 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h2><p>我改一下鲁迅先生说的话，我向来不禅以最坏的恶意揣测别人。但是我还是想在这里抹黑一下百度。以下是我之前对《搜索引擎百度已死》的跟帖，这也仅仅是一个愤青的抱怨罢了。</p><blockquote><p><em>我平常就搜个网页，搜个题，你给我显示打不开该网页，因为以丢失网络连接。网又分为内网外网，你说墙外的翻不过去就算了，你墙内的不是被封，就是404 not found，你说我要的信息你都给我弄没了，我要你何用。你开始搜索的时候开头都是广告，之后都是百家号的，谁给的钱多把谁放在前面，真正有用的内容搜不到，我觉得没有人会一页一页点开直到第十页的。就算是有，也会发现没半点有用的东西。然后网又分为明网深网和暗网，暗网的安全性在没有绝对的技术的情况下没有保证就不说了，深网也有一些不是社会正能量的内容，看的恶心想吐，影响人的身心健康。你说我为了找点简单的信息非要翻墙挂个洋葱浏览器，去把每个浏览器的库都去爬下来，费不费劲，麻不麻烦。你百度的程序员能负点责任吗，中国这么多人用的搜索引擎，弄的这个样子，你说你不是辣鸡，你是什么！活该被喷，百度已死！</em></p></blockquote><p>百度的搜索可以说是相当的不准确，你搜个舆论八卦用百度是再好不过了。之前前两页也有大量百家号的文章充斥着，并不是说百家号不好，但是百度作为搜索引擎，为自家的流量引流，搜索质量下降严重，这个就不好了。<br>几年前，百度还是你用中文探索世界的入口，但看看如今的百度成了什么样子。百度已经为了钱黑化了。百度的项目多到你根本想不到。给你看看百度全家桶到底长什么样子。<br><img src="/images/baidu.png" alt="百度全家桶"><br>可以说的干的太多真是辛苦你了，可是你一个都没干好。<br>还有这个百度网盘，你看看这个限速，是人能干出来的事吗？叫鸡肋网盘没有任何毛病啊。偶尔几兆我还能接受，你弄个一个多GB的，下载三四个小时，能把你气死。不过对于这种公司我是不会给他一分钱的！<strong>解决方法有两种</strong>：一个是之前说的油猴插件可以破解限速；另一个就是pandownload和pansousou了。可以自行了解一下，我就不再赘述了。<br>包括之前血友吧事件和魏则西事件，百度竞价排名，但是这个不算在公告的范围之内。法律认为这是甲方（广告方）提供钱给乙方（百度），然后乙方给甲方宣传，这是一次合法的交易，所以你就是去上诉，也是没用的。魏则西曾在知乎上发帖过：《你认为人性最大的【恶】是什么》 有兴趣的同学可以自行了解一下。<br><img src="/images/weizexi.png" alt="魏则西发帖"><br>但可惜，百度并没有意识到自己的恶，反而有愈演愈烈之势。</p><h2 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h2><p>这个就不过多谈论了。谷歌一向以准确著称，是你英文搜索和其他语言的最佳选择。用过的人都知道，不过现在谷歌已经退出大陆，唯一提供服务的就是谷歌翻译和谷歌地图，其他的都被屏蔽，不能看了。</p><h1 id="杀毒软件"><a href="#杀毒软件" class="headerlink" title="杀毒软件"></a>杀毒软件</h1><h2 id="火绒"><a href="#火绒" class="headerlink" title="火绒"></a>火绒</h2><p>专业做杀毒，有企业版和个人版，个人版免费。火绒十分的良心，只做杀毒，在杀毒上追求到极致，各位看官可以看一看杀毒软件的评测，你会发现火绒的病毒库是最全的。包括我平时自己写代码也不会出现乱报的现象。</p><h2 id="360安全卫士"><a href="#360安全卫士" class="headerlink" title="360安全卫士"></a>360安全卫士</h2><p>流氓头子，自己还好意思叫安全卫士。（就是捆绑只能我捆绑，安装只能我安装）你装了个360，电脑就卡的不行。还有360安全浏览器，就是多了安全两个字，很多人就都信了他安全的邪。同时，隔三差五的弹出一个窗口，用户体验极差！！写代码也有报错删除的情况！<br>不过也有值得表扬的点，就是电脑只能登陆QQ，不能上网的时候，360挺好用的，除此之外，就没有了。</p><h2 id="腾讯安全管家、金山毒霸"><a href="#腾讯安全管家、金山毒霸" class="headerlink" title="腾讯安全管家、金山毒霸"></a>腾讯安全管家、金山毒霸</h2><p>基本和360安全卫士差不多，就是没有上网修复。</p><h2 id="2345"><a href="#2345" class="headerlink" title="2345"></a>2345</h2><p><del>垃圾中的垃圾，</del>捆绑软件，用你的电脑挖矿（这个就是挖比特币），下载了2345基本就等于中木马病毒了，电脑卡到爆炸。而且有一部分做ghost镜像的（也就是操作系统），都会加上2345，2345给做系统镜像的钱，安装一个用户就给多少钱的。所以它是流氓中头子的头子。</p><h1 id="平常我会用到的软件、网站"><a href="#平常我会用到的软件、网站" class="headerlink" title="平常我会用到的软件、网站"></a>平常我会用到的软件、网站</h1><h2 id="网易见外工作台"><a href="#网易见外工作台" class="headerlink" title="网易见外工作台"></a><a href="https://jianwai.netease.com/">网易见外工作台</a></h2><p>可以实现语音转化成文字，字幕。做视频剪辑的时候非常好用，再者就是做英语听力文本练习的时候也非常好用，直接输出文本，省去了自己打字的烦恼！</p><h2 id="Grammarly"><a href="#Grammarly" class="headerlink" title="Grammarly"></a>Grammarly</h2><p>这个好像是个外国的软件，主要是对语法进行纠正，比如你想写一篇文章，可以根据你对不同用户，选择不同的用词。可以说是写稿的最佳选择，人工智能审核，不用再去求大佬帮你看看文章哪里需要润色润色了。</p><h2 id="QTranslate"><a href="#QTranslate" class="headerlink" title="QTranslate"></a>QTranslate</h2><p>这个及时翻译的，可以对屏幕上的文字进行翻译，操作简单，只用两次敲击Ctrl键。支持谷歌，有道等著名词典的翻译。</p><h2 id="欧路词典"><a href="#欧路词典" class="headerlink" title="欧路词典"></a>欧路词典</h2><p>这里推荐一下朗文词典，可以在<a href="https://www.ldoceonline.com/">官网查词</a>，英英释义解释，比中英解释要好很多。只用差不多记住3000词汇就可以解释所有的词，像一些比较简单的词如banana也在这3000词里面，是不是很酷炫！<br>这个是手机端的，如果你想讲朗文词典弄到自己的手机上，并且不花钱，可以下载一个朗文词典的包，然后用欧路词典打开，内容一样，可能呈现的方式略有不同。</p><h1 id="以下就不是正题了"><a href="#以下就不是正题了" class="headerlink" title="以下就不是正题了"></a>以下就不是正题了</h1><p>其实还挺想谈谈心态方面的影响，最近也看开了很多的事情想写下来，不过之后等有时间再谈谈吧。<br>还有就是想写一篇文章，《为什么我开始准备写博客》，这两个坑我挖下了，之后我再填上。<br>再者就是考虑到Github是一个代码托管平台，我要不写技术点的文章，有点对不起Github，现在还是先用着吧，等到之后有时间再考虑搬家，这个以后就主要用来托管自己的代码，以及编程中的心得体会和血泪史。</p><h2 id="欢迎各位在文章下方留言，以及在右边的对话框私聊我，看到后我会尽快回复，也欢迎邮箱联系"><a href="#欢迎各位在文章下方留言，以及在右边的对话框私聊我，看到后我会尽快回复，也欢迎邮箱联系" class="headerlink" title="欢迎各位在文章下方留言，以及在右边的对话框私聊我，看到后我会尽快回复，也欢迎邮箱联系"></a><strong>欢迎各位在文章下方留言，以及在右边的对话框私聊我，看到后我会尽快回复，也欢迎邮箱联系</strong></h2><p>需要科学浏览的</p><blockquote><p><a href="https://zh.wikipedia.org/wiki/Microsoft_Edge">Microsoft Edge</a><br><a href="https://zh.wikipedia.org/wiki/Google_Chrome">Google Chrome</a><br><a href="https://zh.wikipedia.org/wiki/Firefox">Firefox</a><br><a href="https://zh.wikipedia.org/wiki/Tor">Tor</a><br><a href="https://www.torproject.org/download/">Tor Download</a></p></blockquote><p>不需要科学就能浏览的</p><blockquote><p><a href="https://www.google.com/chrome/?brand=CHBD&gclid=CjwKCAjwqLblBRBYEiwAV3pCJvPY1z5jfAFKG-OCeQKuHyN4-hXX0usBPP_WlWjQqB2a4Lbs3ZGiDBoC0P4QAvD_BwE&gclsrc=aw.ds">Chrome下载的地址</a><br><a href="https://greasyfork.org/zh-CN">Tampermonkey官网</a><br><a href="https://jianwai.netease.com/">网易见外工作台</a><br><a href="https://www.ldoceonline.com/">朗文词典官网</a></p></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>推荐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
