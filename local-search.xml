<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java Interface Usage</title>
    <link href="/2021/06/17/Java-Interface-Usage/"/>
    <url>/2021/06/17/Java-Interface-Usage/</url>
    
    <content type="html"><![CDATA[<p>接口的作用对于很多新手来说很不容易理解，我给大家举个例子。<br>接口只是一个规范，所以里面的方法都是空的。<br>假如我开了一个宠物粮店，声明所有宠物都可以来我这里买粮食，这就相当于一个接口，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PetRestaurant</span> </span>&#123; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span><span class="hljs-params">()</span></span>;&#125;<br></code></pre></td></tr></table></figure><p>当一只狗看到了，知道自己是宠物，所以它去实现这个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DogPet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PetRestaurant</span> </span>&#123; <br><span class="hljs-meta">@Override</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span><span class="hljs-params">()</span> </span>&#123;  <br>System.out.println(<span class="hljs-string">&quot;我是狗，我要买狗粮&quot;</span>); <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当一只猫看到了，知道自己也是宠物，所以也去实现这个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CatPet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PetRestaurant</span> </span>&#123; <br><span class="hljs-meta">@Override</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span><span class="hljs-params">()</span> </span>&#123;  <br>System.out.println(<span class="hljs-string">&quot;我是猫，我要买猫粮&quot;</span>); <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当狗和猫来我的店之前，我是不知道他们到底是什么，但是当他们来到我的店，我就知道一个要猫粮食，一个要狗粮食。因为他们都实现了 我这个接口，都可以买。下面这个类相当于一个接待顾客的类，即店小二，他接待所有实现了我这个宠物店接口的动物，传进来一个PetRestaurant 类型的宠物，注意，这个PetRestaurant 是接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span><span class="hljs-params">(PetRestaurant pet)</span> </span>&#123;  pet.buy(); &#125;&#125;<br></code></pre></td></tr></table></figure><p>好了，这个时候我这个老板出现了，我可以给他们卖粮食了，相当于测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tests</span> </span>&#123; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <br>PetRestaurant dog = <span class="hljs-keyword">new</span> DogPet();  <span class="hljs-comment">//实例化一个狗，相当于把狗顾客实例化  </span><br>PetRestaurant cat = <span class="hljs-keyword">new</span> CatPet();<span class="hljs-comment">//实例化一个猫，相当于把猫顾客实例化    </span><br>test t = <span class="hljs-keyword">new</span> test();  <span class="hljs-comment">//实例化一个店小二  </span><br>t.buy(cat);  <span class="hljs-comment">//把猫交给店小二  </span><br>t.buy(dog); <span class="hljs-comment">//把狗交给店小二 &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样运行的结果就是<br>我是猫，我要买猫粮<br>我是狗，我要买狗粮</p><p>你知道吗，整个过程我这个店主其实根本不知道来的到底是猫是狗还是其他什么，我只要有一个店小二，把这些来的不知什么动物都全部交给店小二，店小二就知道怎么去卖了，因为这些狗啊猫啊都实现了我这个宠物店的接口，而店小二就负责接待所有实现了我这个接口的动物。这就有一个好处，假如明天来了一头小猪，只要它实现了我这个接口，我只管交给店小二处理就OK了，我这个店小二根本不需要变化，我这个店主也只需要实例化一下这个动物就OK</p><p>你想，假如没有接口，会怎么办，来一个猫，我要去创造一个猫，还要实例化，来一只狗，我要创建一只狗，同样要实例化，还要配备专门的店小二去接待，就会相当麻烦</p><p>作者：知乎用户<br>链接：<a href="https://www.zhihu.com/question/20111251/answer/14760353">https://www.zhihu.com/question/20111251/answer/14760353</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><blockquote><p><a href="https://www.zhihu.com/question/20111251/answer/14760353">Java 中的接口有什么作用</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch入门学习</title>
    <link href="/2021/04/01/PyTorch%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/04/01/PyTorch%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>只是自己理解，感觉怎么学也学的不是很明白。只是能跑，但是你问我为什么能跑，我也不知道。</p><span id="more"></span><h2 id="PyTorch深度学习，60分钟入门"><a href="#PyTorch深度学习，60分钟入门" class="headerlink" title="PyTorch深度学习，60分钟入门"></a>PyTorch深度学习，60分钟入门</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Net</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">super</span>(Net, self).__init__()<br>        self.conv1 = nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>) <span class="hljs-comment"># 1 input image channel, 6 output channels, 5x5 square convolution kernel</span><br>        self.conv2 = nn.Conv2d(<span class="hljs-number">6</span>, <span class="hljs-number">16</span>, <span class="hljs-number">5</span>)<br>        self.fc1   = nn.Linear(<span class="hljs-number">16</span>*<span class="hljs-number">5</span>*<span class="hljs-number">5</span>, <span class="hljs-number">120</span>) <span class="hljs-comment"># an affine operation: y = Wx + b</span><br>        self.fc2   = nn.Linear(<span class="hljs-number">120</span>, <span class="hljs-number">84</span>)<br>        self.fc3   = nn.Linear(<span class="hljs-number">84</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x</span>):</span><br>        x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)) <span class="hljs-comment"># Max pooling over a (2, 2) window</span><br>        x = F.max_pool2d(F.relu(self.conv2(x)), <span class="hljs-number">2</span>) <span class="hljs-comment"># If the size is a square you can only specify a single number</span><br>        x = x.view(-<span class="hljs-number">1</span>, self.num_flat_features(x))<br>        x = F.relu(self.fc1(x))<br>        x = F.relu(self.fc2(x))<br>        x = self.fc3(x)<br>        <span class="hljs-keyword">return</span> x<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">num_flat_features</span>(<span class="hljs-params">self, x</span>):</span><br>        size = x.size()[<span class="hljs-number">1</span>:] <span class="hljs-comment"># all dimensions except the batch dimension</span><br>        num_features = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> size:<br>            num_features *= s<br>        <span class="hljs-keyword">return</span> num_features<br><br>net = Net()<br>net<br></code></pre></td></tr></table></figure><p>首先创造了Net类，然后def <em>init</em>(self)中定义了网络层次，一共有五层，再在forward中将需要跑的内容放进去。</p><p>仅仅需要定义一个forward函数就可以了，backward会自动地生成。<br>你可以在forward函数中使用所有的Tensor中的操作。<br><strong>模型中可学习的参数会由net.parameters()返回。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">params = <span class="hljs-built_in">list</span>(net.parameters())<br>print(<span class="hljs-built_in">len</span>(params))<br>print(params[<span class="hljs-number">0</span>].size()) <span class="hljs-comment"># conv1&#x27;s .weight</span><br><br><span class="hljs-built_in">input</span> = Variable(torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>out = net(<span class="hljs-built_in">input</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;out 的输出结果如下</span><br><span class="hljs-string">Variable containing:</span><br><span class="hljs-string">-0.0158 -0.0682 -0.1239 -0.0136 -0.0645  0.0107 -0.0230 -0.0085  0.1172 -0.0393</span><br><span class="hljs-string">[torch.FloatTensor of size 1x10]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>net.zero_grad() <span class="hljs-comment"># 对所有的参数的梯度缓冲区进行归零</span><br>out.backward(torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)) <span class="hljs-comment"># 使用随机的梯度进行反向传播</span><br></code></pre></td></tr></table></figure><p>Reference</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/25572330">PyTorch深度学习，60分钟入门</a><br><a href="https://blog.csdn.net/zpcxh95/article/details/69952020?winzoom=1">深度神经网络基本问题</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SystemView5.0在Win10安装过程中读条后无反应</title>
    <link href="/2021/03/31/System-View-5-0-%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/31/System-View-5-0-%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>安装了大约七八个小时都没有安装好😫</p><h2 id="安装后无反应的解决方案"><a href="#安装后无反应的解决方案" class="headerlink" title="安装后无反应的解决方案"></a>安装后无反应的解决方案</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>先说直接在WIN10 就能装的：<br>双击安装程序后，若无反应，右键任务栏，打开任务管理器，有一个32-bit setup launcher的任务，右键转到详细信息，再右键分析等待链。<br>会发现一个正在等待名为promecefpluginhost的任务进行，在详细信息中找到它，右键打开文件位置。<br>发现是wps或者office(office有没有不知道，我电脑是装的WPS)里的一个exe文件。<br>将它暂时放入回收站（如果删除时告诉你有程序正在用没法删就在任务里把它右键结束进程树），删这个文件好像要手速哈哈哈，不过我室友说可能是我设置了WPS的相关服务自启动造成的，关了自启动应该也行，或者先把安装进程树全关闭了，再删掉应该也行（我是靠手速删的），暂时将promecefpluginhost放入回收站，再运行安装程序就完美安装了<br>第一个方法安装时本人没有使用关闭杀软的操作，我用的火绒，看了别的帖子，怀疑这个promecefpluginhost可能在其他软件里也会有 ，反正根据步骤找到它的文件路径删掉他应该也可以了（因为有人说他们把后台罗技鼠标驱动关了也行了）</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>第二个方法就简单粗暴，装个VMware虚拟机，在XP环境里运行就可以了，我室友就用的这个方法，贴吧有人讲过这个了就不赘述，装个虚拟机也行</p><h3 id="自己总结"><a href="#自己总结" class="headerlink" title="自己总结"></a>自己总结</h3><p>这个软件太老了，一般的电脑都能安装上。但是我的电脑就是不行。<br>一般不能安装都是在双击后无反应，读条一闪而过。而我的问题是有读条，在跳到100%之后没有反应。相当于能安装，但是安装到一般就退出了。试过很多方法，帮我的同学都解决了，自己的还是不行。所以你也有和我一样的问题就没有办法只能用虚拟机了。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="https://tieba.baidu.com/p/6763142144">systemview5.0在win10安装过程中读条后无反应的解决</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>软件安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware Workstation 无法打开内核设备</title>
    <link href="/2021/03/31/Vmware-workstation-%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E5%86%85%E6%A0%B8%E8%AE%BE%E5%A4%87/"/>
    <url>/2021/03/31/Vmware-workstation-%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E5%86%85%E6%A0%B8%E8%AE%BE%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h2 id="问题重述"><a href="#问题重述" class="headerlink" title="问题重述"></a>问题重述</h2><p>无法打开内核设备“\.\VMCIDev\VMX”: 系统找不到指定的文件。你想要在安装 VMware Workstation 前重启吗?</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="关闭VMCare"><a href="#关闭VMCare" class="headerlink" title="关闭VMCare"></a>关闭VMCare</h3><h3 id="进入虚拟机的安装地址，用记事本打开以-vmx结尾的文件，如下图："><a href="#进入虚拟机的安装地址，用记事本打开以-vmx结尾的文件，如下图：" class="headerlink" title="进入虚拟机的安装地址，用记事本打开以.vmx结尾的文件，如下图："></a>进入虚拟机的安装地址，用记事本打开以.vmx结尾的文件，如下图：</h3><p><img src="https://i.loli.net/2021/03/31/YcrAtWIwjzo3nMK.png" alt="屏幕截图 2021-03-31 195124.png"></p><h3 id="Crtl-F搜索vmci0-present，把后面的TRUE替换成FALSE，如下图："><a href="#Crtl-F搜索vmci0-present，把后面的TRUE替换成FALSE，如下图：" class="headerlink" title="Crtl+F搜索vmci0.present，把后面的TRUE替换成FALSE，如下图："></a>Crtl+F搜索vmci0.present，把后面的TRUE替换成FALSE，如下图：</h3><p><img src="https://img-blog.csdnimg.cn/20200627190239729.png"></p><h3 id="以管理员身份运行VMware"><a href="#以管理员身份运行VMware" class="headerlink" title="以管理员身份运行VMware"></a>以管理员身份运行VMware</h3>]]></content>
    
    
    
    <tags>
      
      <tag>VMware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu Install Nvidia Driver</title>
    <link href="/2021/03/18/Ubuntu-Install-Nvidia-Driver/"/>
    <url>/2021/03/18/Ubuntu-Install-Nvidia-Driver/</url>
    
    <content type="html"><![CDATA[<h1 id="Problem-Restatement"><a href="#Problem-Restatement" class="headerlink" title="Problem Restatement"></a>Problem Restatement</h1><p>  <strong>NVIDIA-SMI has failed because it couldn’t communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running.</strong></p><span id="more"></span><h3 id="Step1-uninstall-the-old-version-NVIDIA-driver"><a href="#Step1-uninstall-the-old-version-NVIDIA-driver" class="headerlink" title="Step1 uninstall the old version NVIDIA driver"></a>Step1 uninstall the old version NVIDIA driver</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> <span class="hljs-builtin-name">remove</span> --purge nvidia*<br></code></pre></td></tr></table></figure><p>If the above command is not work, you can try the command below which is more effective.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo <span class="hljs-regexp">/usr/</span>bin/nvidia-uninstall <br></code></pre></td></tr></table></figure><h3 id="Step2-download-the-NVIDIA-driver"><a href="#Step2-download-the-NVIDIA-driver" class="headerlink" title="Step2 download the NVIDIA driver"></a>Step2 download the NVIDIA driver</h3><p>Search your NVIDIA driver by input your computer information in <a href="https://www.nvidia.com/Download/index.aspx?lang=en-us">Nvidia Web</a>.<br>And then download the .run file.</p><h3 id="step3-install-the-NVIDIA-driver"><a href="#step3-install-the-NVIDIA-driver" class="headerlink" title="step3 install the NVIDIA driver"></a>step3 install the NVIDIA driver</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo service lightdm <span class="hljs-built_in">stop</span> <span class="hljs-comment">// Ensure it doesn&#x27;t work, maybe default is stop state.</span><br>sudo sh NVIDIA-Linux-x86_64<span class="hljs-number">-390.77</span>.<span class="hljs-built_in">run</span> <span class="hljs-comment">// Change the filename to what you download</span><br>sudo service lightdm start<br></code></pre></td></tr></table></figure><h2 id="Some-tips-Importanct"><a href="#Some-tips-Importanct" class="headerlink" title="Some tips !Importanct!"></a>Some tips !Importanct!</h2><ul><li>The distribution-provided pre-install script failed! Are you sure you want to continue?  <strong>Choose “yes” to continue.</strong></li><li>Would you like to register the kernel module souces with DKMS? This will allow DKMS to automatically build a new module, if you install a different kernel later? <strong>Choose “no” to continue.</strong></li><li>Nvidia’s 32-bit compatibility libraries? <strong>Choose “no” to continue.</strong></li><li>Would you like to run the nvidia-xconfigutility to automatically update your x configuration so that the NVIDIA x driver will be used when you restart x? Any pre-existing x confile will be backed up.  <strong>Choose “yes” to continue.</strong></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><p><a href="https://blog.csdn.net/u013832707/article/details/93157805">Ubuntu安装、更新显卡驱动</a><br><a href="https://blog.csdn.net/munan2017/article/details/106884950">linux服务器 更新显卡驱动</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高级网络编程Thread</title>
    <link href="/2020/11/08/%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BThread/"/>
    <url>/2020/11/08/%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BThread/</url>
    
    <content type="html"><![CDATA[<center>别人写的都太好了，我这里直接甩连接了。</center><span id="more"></span><hr><blockquote><p><a href="https://blog.csdn.net/Evankaka/article/details/44153709">Java多线程学习（吐血超详细总结）</a><br><a href="https://juejin.im/post/6844904030930468872#heading-16">Java 线程基础</a><br><a href="https://www.jianshu.com/p/6c62cd06fb89">实操七</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 部署问题</title>
    <link href="/2020/08/25/hexo-%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/"/>
    <url>/2020/08/25/hexo-%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<center>报错FATAL Cannot read property 'replace' of null</center><span id="more"></span><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">FATAL Cannot read property &#x27;replace&#x27; of null<br>TypeError: Cannot read property &#x27;replace&#x27; of null<br>    at fs.exists.then.then.then.config (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>oad_config.js:34:31)<br>    at tryCatcher (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\u</span>til.js:16:23)<br>    at Promise._settlePromiseFromHandler (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:512:31)<br>    at Promise._settlePromise (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:569:18)<br>    at Promise._settlePromise0 (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:614:10)<br>    at Promise._settlePromises (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:694:18)<br>    at _drainQueueStep (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:138:12)<br>    at _drainQueue (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:131:9)<br>    at Async._drainQueues (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:147:5)<br>    at Immediate.Async.drainQueues [as _onImmediate] (D:<span class="hljs-symbol">\b</span>log<span class="hljs-symbol">\l</span>eevisin<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:17:14)<br>    at runCallback (timers.js:705:18)<br>    at tryOnImmediate (timers.js:676:5)<br>    at processImmediate (timers.js:658:5)<br></code></pre></td></tr></table></figure><p>之前配置<br>url: <a href="https://leevisin.github.io/">https://leevisin.github.io/</a><br>root: </p><p>在_config.yml文件中的root下改为如下<br>url: <a href="https://leevisin.github.io/">https://leevisin.github.io/</a><br>root: /</p><hr><p>参考文献</p><blockquote><p><a href="https://github.com/hexojs/hexo/issues/2006">hexo issues #2006</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tensorflow 安装踩坑</title>
    <link href="/2020/08/24/Tensorflow-%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91/"/>
    <url>/2020/08/24/Tensorflow-%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<center>最近在琢磨琢磨TensorFlow，花了很多时间才搭建成功，在此记下自己碰到的问题</center><span id="more"></span><h1 id="下载Python"><a href="#下载Python" class="headerlink" title="下载Python"></a>下载Python</h1><font color="red">注意：1、机器必须是64位的，TensorFlow不支持32位！TensorFlow不支持32位！TensorFlow不支持32位！2、Python必须装64位的！</font><p><strong>这个Tensorflow在官网对系统要求<br>Python 3.5-3.7<br>pip 19.0 或更高版本（需要 manylinux2010 支持）<br>而Keras 兼容的 Python 版本: Python 2.7-3.6。<br>所以下载的版本我就选择了python 3.6.0 64位</strong><br>现在的Python已经更新到了3.8.3版本了，更新太快了，但是新的不一定都支持。</p><p>下载完了之后，安装，<strong>点击那个Add to Path选项</strong>，如果可以直接python就可以忽略下面了。<br>调环境变量，在<a href="https://www.runoob.com/python/python-install.html">菜鸟教程</a>上都有，只用把上面用户的系统的系统变量调对了就可以。同时要在PyCharm调整编译器，在<a href="https://www.runoob.com/w3cnote/pycharm-windows-install.html">这里</a>也有教程。</p><h1 id="更新pip和virtualenv"><a href="#更新pip和virtualenv" class="headerlink" title="更新pip和virtualenv"></a>更新pip和virtualenv</h1><p>pip一定要更新到19.0版本以后，现在最新的是20.0<br>virtualenv没看出来有什么用处，我好像虚拟环境用，但我直接在系统环境里装的</p><h1 id="下载Tensorflow"><a href="#下载Tensorflow" class="headerlink" title="下载Tensorflow"></a>下载Tensorflow</h1><p>如果直接使用 pip install –upgrade tensorflow由于国内网络问题，会导致下载不下来，根本不可能安装上。<br>所以可以在<a href="http://mirrors.aliyun.com/pypi/simple/">国内镜像</a>去下载，我这里选的阿里云的镜像。需要手动下载的，在<a href="http://mirrors.aliyun.com/pypi/simple/">这里</a>直接Ctrl + F搜索 tensorflow就可以找到下载地方了。<br><img src="https://upload-images.jianshu.io/upload_images/1925876-f7655d761ad346e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp"></p><h1 id="安装Tensorflow"><a href="#安装Tensorflow" class="headerlink" title="安装Tensorflow"></a>安装Tensorflow</h1><p>安装命令pip install建议在PowerShell里面执行，Powershell的打开方式是在目标文件夹下按住shift+鼠标右键，选择Window PowerShell，就打开了。<br>直接在下载到的TensorFlow目录下（就是你刚才把Tensorflow下载的地方）执行pip install tensorflow-2.3.0-cp36-cp36m-win_amd64.whl 期间会安装一些TensorFLow的依赖，同样的，可能安装失败。因为文件一大就下载不下来，所以解决的最好办法就是手动下载，再安装。<br>如我的numpy安装失败了</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">Collecting numpy&gt;=1.11.0 (from tensorflow==1.0.0)<br>  Downloading numpy-1.12.0-cp35-none-win_amd64.whl (7.7MB)<br>Exception:<br>Traceback (most recent call last):<br>  File &quot;c:<span class="hljs-symbol">\p</span>ython35-3<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\s</span>ite-packages<span class="hljs-symbol">\p</span>ip<span class="hljs-symbol">\_</span>vendor<span class="hljs-symbol">\r</span>equests<span class="hljs-symbol">\p</span>ackages<span class="hljs-symbol">\u</span>rllib3<span class="hljs-symbol">\r</span>esponse.py&quot;, line 232, in _error_catcher<br>    yield<br>  File &quot;c:<span class="hljs-symbol">\p</span>ython35-3<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\s</span>ite-packages<span class="hljs-symbol">\p</span>ip<span class="hljs-symbol">\_</span>vendor<span class="hljs-symbol">\r</span>equests<span class="hljs-symbol">\p</span>ackages<span class="hljs-symbol">\u</span>rllib3<span class="hljs-symbol">\r</span>esponse.py&quot;, line 314, in read<br>    data = self._fp.read(amt)<br></code></pre></td></tr></table></figure><p>在<a href="http://mirrors.aliyun.com/pypi/simple/">这里</a>同样搜索<a href="http://mirrors.aliyun.com/pypi/simple/numpy">numpy</a>，下载在手动安装，这要注意依赖的版本，直接复制numpy-1.12.0-cp35-none-win_amd64.whl，这个文件在你下载的地方会显示，直接复制查找下载就好，搜索一下就行：<br>现在都是竖着排列的，很方便查看了。<br><img src="https://upload-images.jianshu.io/upload_images/1925876-6f24023d92bdc609.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp"></p><p>在PowerShell输入pip install numpy-1.12.0-cp35-none-win_amd64.whl<br>手动安装成功：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install numpy-<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>-cp<span class="hljs-number">35</span>-none-win_amd<span class="hljs-number">64</span>.whl<br><span class="hljs-attribute">Processing</span> f:\tensorflow\numpy-<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>-cp<span class="hljs-number">35</span>-none-win_amd<span class="hljs-number">64</span>.whl<br><span class="hljs-attribute">Installing</span> collected packages: numpy<br><span class="hljs-attribute">Successfully</span> installed numpy-<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><font color="red">其他的包安装方法同理。</font></p><h1 id="测试安装结果"><a href="#测试安装结果" class="headerlink" title="测试安装结果"></a>测试安装结果</h1><p>在PyCharm里输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br>tf.compat.v1.disable_eager_execution()<br>hello = tf.constant(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>sess= tf.compat.v1.Session()<br>print(sess.run(hello))<br></code></pre></td></tr></table></figure><p>如果最后能输出结果b’hello则成功</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span>.<span class="hljs-number">435756</span>: I tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">48</span>] Successfully opened dynamic library cudart<span class="hljs-number">64</span>_<span class="hljs-number">101</span>.dll<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">03</span>.<span class="hljs-number">200442</span>: I tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">48</span>] Successfully opened dynamic library nvcuda.dll<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">03</span>.<span class="hljs-number">875290</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class="hljs-number">1716</span>] Found device <span class="hljs-number">0</span> with properties: <br><span class="hljs-attribute">pciBusID</span>: <span class="hljs-number">0000</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span>.<span class="hljs-number">0</span> name: GeForce MX<span class="hljs-number">150</span> computeCapability: <span class="hljs-number">6</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">coreClock</span>: <span class="hljs-number">1</span>.<span class="hljs-number">0375</span>GHz coreCount: <span class="hljs-number">3</span> deviceMemorySize: <span class="hljs-number">2</span>.<span class="hljs-number">00</span>GiB deviceMemoryBandwidth: <span class="hljs-number">37</span>.<span class="hljs-number">33</span>GiB/s<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">03</span>.<span class="hljs-number">875660</span>: I tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">48</span>] Successfully opened dynamic library cudart<span class="hljs-number">64</span>_<span class="hljs-number">101</span>.dll<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">03</span>.<span class="hljs-number">877846</span>: W tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">59</span>] Could not load dynamic library &#x27;cublas<span class="hljs-number">64</span>_<span class="hljs-number">10</span>.dll&#x27;; dlerror: cublas<span class="hljs-number">64</span>_<span class="hljs-number">10</span>.dll not found<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">03</span>.<span class="hljs-number">993896</span>: I tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">48</span>] Successfully opened dynamic library cufft<span class="hljs-number">64</span>_<span class="hljs-number">10</span>.dll<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">000945</span>: I tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">48</span>] Successfully opened dynamic library curand<span class="hljs-number">64</span>_<span class="hljs-number">10</span>.dll<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">062328</span>: I tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">48</span>] Successfully opened dynamic library cusolver<span class="hljs-number">64</span>_<span class="hljs-number">10</span>.dll<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">063793</span>: W tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">59</span>] Could not load dynamic library &#x27;cusparse<span class="hljs-number">64</span>_<span class="hljs-number">10</span>.dll&#x27;; dlerror: cusparse<span class="hljs-number">64</span>_<span class="hljs-number">10</span>.dll not found<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">064736</span>: W tensorflow/stream_executor/platform/default/dso_loader.cc:<span class="hljs-number">59</span>] Could not load dynamic library &#x27;cudnn<span class="hljs-number">64</span>_<span class="hljs-number">7</span>.dll&#x27;; dlerror: cudnn<span class="hljs-number">64</span>_<span class="hljs-number">7</span>.dll not found<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">064970</span>: W tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class="hljs-number">1753</span>] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.<br><span class="hljs-attribute">Skipping</span> registering GPU devices...<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">066352</span>: I tensorflow/core/platform/cpu_feature_guard.cc:<span class="hljs-number">142</span>] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN)to use the following CPU instructions in performance-critical operations:  AVX<span class="hljs-number">2</span><br><span class="hljs-attribute">To</span> enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">077843</span>: I tensorflow/compiler/xla/service/service.cc:<span class="hljs-number">168</span>] XLA service <span class="hljs-number">0</span>x<span class="hljs-number">1</span>f<span class="hljs-number">2523</span>ef<span class="hljs-number">360</span> initialized for platform Host (this does not guarantee that XLA will be used). Devices:<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">078174</span>: I tensorflow/compiler/xla/service/service.cc:<span class="hljs-number">176</span>]   StreamExecutor device (<span class="hljs-number">0</span>): Host, Default Version<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">078547</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class="hljs-number">1257</span>] Device interconnect StreamExecutor with strength <span class="hljs-number">1</span> edge matrix:<br><span class="hljs-attribute">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">25</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span>.<span class="hljs-number">078731</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class="hljs-number">1263</span>]      <br><span class="hljs-attribute">b</span>&#x27;hello&#x27;<br><br><span class="hljs-attribute">Process</span> finished with exit code <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><p>如果版本不行就更新tensorflow的版本，好像说1.15的版本支持比较好</p><h2 id="tensorflow出现-ImportError-DLL-load-failed-找不到指定的程序"><a href="#tensorflow出现-ImportError-DLL-load-failed-找不到指定的程序" class="headerlink" title="tensorflow出现 ImportError: DLL load failed: 找不到指定的程序"></a>tensorflow出现 ImportError: DLL load failed: 找不到指定的程序</h2><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">Traceback (most recent call last): <br>File “D:/pyfile/word4/yy.py”, line 3, in <br>import tensorflow as tf <br>File “D:<span class="hljs-symbol">\p</span>yfile<span class="hljs-symbol">\w</span>ord4<span class="hljs-symbol">\v</span>env<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\s</span>ite-packages<span class="hljs-symbol">\t</span>ensorflow__init__.py”, line 24, in <br>from tensorflow.python import pywrap_tensorflow # pylint: disable=unused-import <br>File “D:<span class="hljs-symbol">\p</span>yfile<span class="hljs-symbol">\w</span>ord4<span class="hljs-symbol">\v</span>env<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\s</span>ite-packages<span class="hljs-symbol">\t</span>ensorflow<span class="hljs-symbol">\p</span>ython__init__.py”, line 52, in <br>from tensorflow.core.framework.graph_pb2 import * <br>File “D:<span class="hljs-symbol">\p</span>yfile<span class="hljs-symbol">\w</span>ord4<span class="hljs-symbol">\v</span>env<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\s</span>ite-packages<span class="hljs-symbol">\t</span>ensorflow<span class="hljs-symbol">\c</span>ore<span class="hljs-symbol">\f</span>ramework<span class="hljs-symbol">\g</span>raph_pb2.py”, line 6, in <br>from google.protobuf import descriptor as _descriptor <br>File “D:<span class="hljs-symbol">\p</span>yfile<span class="hljs-symbol">\w</span>ord4<span class="hljs-symbol">\v</span>env<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\s</span>ite-packages<span class="hljs-symbol">\g</span>oogle<span class="hljs-symbol">\p</span>rotobuf<span class="hljs-symbol">\d</span>escriptor.py”, line 47, in <br>from google.protobuf.pyext import _message <br>ImportError: DLL load failed: 找不到指定的程序。<br></code></pre></td></tr></table></figure><p><font color="red">解决方法</font><br>没有注意到protobuf已经更新。 在自动安装了tensorflow时， protobuf安装的是最新版本3.6.1， 出现了不兼容的问题。<br>更换为 protobuf 3.6.0即可</p><p>在刚才的PowerShell里输入<br>pip install protobuf==3.6.0<br>问题解决<br>参考内容(<a href="https://blog.csdn.net/lijil168/article/details/82289596">https://blog.csdn.net/lijil168/article/details/82289596</a>)</p><h2 id="解决-tensorflow-gpu-2-1-出现错误-“Could-not-load-dynamic-library-‘cudart64-101-dll’"><a href="#解决-tensorflow-gpu-2-1-出现错误-“Could-not-load-dynamic-library-‘cudart64-101-dll’" class="headerlink" title="解决 tensorflow-gpu 2.1 出现错误 “Could not load dynamic library ‘cudart64_101.dll’"></a>解决 tensorflow-gpu 2.1 出现错误 “Could not load dynamic library ‘cudart64_101.dll’</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">&gt;&gt;&gt; <span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-number">2020</span><span class="hljs-number">-04</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">19</span>:<span class="hljs-number">56.862944</span>: W tensorflow/stream_executor/platform/<span class="hljs-keyword">default</span>/dso_loader.cc:<span class="hljs-number">55</span>] Could not load <span class="hljs-built_in">dynamic</span> <span class="hljs-keyword">library</span> <span class="hljs-string">&#x27;cudart64_101.dll&#x27;</span>; dlerror: cudart64_101.dll not found<br><span class="hljs-number">2020</span><span class="hljs-number">-04</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">19</span>:<span class="hljs-number">56.867965</span>: I tensorflow/stream_executor/cuda/cudart_stub.cc:<span class="hljs-number">29</span>] Ignore above cudart dlerror <span class="hljs-keyword">if</span> you <span class="hljs-keyword">do</span> not have a GPU <span class="hljs-keyword">set</span> up <span class="hljs-keyword">on</span> your machine.<br></code></pre></td></tr></table></figure><p>原因<br>cudart64_101.dll”是cuda10.1这个版本中才含有的，而我安装的cuda的不是，如果你是10.0或者10.2或者11.0等都可以用这个解决。<br>解决方法<br>将“cudart64_101.dll”添加到“C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\bin”中去，问题解决。<br>cudart64_101.dll的下载地址：<a href="https://cn.dll-files.com/cudart64_101.dll.html">cudart64_101.dll</a><br>参考内容(<a href="https://blog.csdn.net/wjhua_223/article/details/105681521">https://blog.csdn.net/wjhua_223/article/details/105681521</a>)</p><h2 id="出现很多I的警告"><a href="#出现很多I的警告" class="headerlink" title="出现很多I的警告"></a>出现很多I的警告</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs gradle">(tensorflow1) C:\Users\Administrator&gt;python<br>Python <span class="hljs-number">3.7</span>.<span class="hljs-number">7</span> (<span class="hljs-keyword">default</span>, May  <span class="hljs-number">6</span> <span class="hljs-number">2020</span>, <span class="hljs-number">11</span>:<span class="hljs-number">45</span>:<span class="hljs-number">54</span>) [MSC v.<span class="hljs-number">1916</span> <span class="hljs-number">64</span> bit (AMD64)] :: Anaconda, Inc. on win32<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt; <span class="hljs-keyword">import</span> tensorflow as tf<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">23.205171</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cudart64_101.dll<br>&gt;&gt;&gt; tf.compat.v1.disable_eager_execution()<br>&gt;&gt;&gt; hello = tf.constant(<span class="hljs-string">&#x27;hello,tensorflow&#x27;</span>)<br>&gt;&gt;&gt; sess= tf.compat.v1.Session()<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.472006</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library nvcuda.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.580727</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1555</span>] Found device <span class="hljs-number">0</span> with properties:<br>pciBusID: <span class="hljs-number">0000</span>:<span class="hljs-number">00</span>:<span class="hljs-number">1</span>e.<span class="hljs-number">0</span> name: Tesla T4 computeCapability: <span class="hljs-number">7.5</span><br>coreClock: <span class="hljs-number">1.59</span>GHz coreCount: <span class="hljs-number">40</span> deviceMemorySize: <span class="hljs-number">14.85</span>GiB deviceMemoryBandwidth: <span class="hljs-number">298.08</span>GiB/s<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.589145</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cudart64_101.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.600717</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cublas64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.614987</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cufft64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.622689</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library curand64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.637295</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cusolver64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.645685</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cusparse64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.673263</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cudnn64_7.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.678463</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1697</span>] Adding visible gpu devices: <span class="hljs-number">0</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.683543</span>: I tensorflow<span class="hljs-regexp">/core/</span>platform/cpu_feature_guard.cc:<span class="hljs-number">142</span>] Your CPU supports instructions that <span class="hljs-keyword">this</span> TensorFlow binary was not compiled to use: AVX AVX2<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.690563</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1555</span>] Found device <span class="hljs-number">0</span> with properties:<br>pciBusID: <span class="hljs-number">0000</span>:<span class="hljs-number">00</span>:<span class="hljs-number">1</span>e.<span class="hljs-number">0</span> name: Tesla T4 computeCapability: <span class="hljs-number">7.5</span><br>coreClock: <span class="hljs-number">1.59</span>GHz coreCount: <span class="hljs-number">40</span> deviceMemorySize: <span class="hljs-number">14.85</span>GiB deviceMemoryBandwidth: <span class="hljs-number">298.08</span>GiB/s<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.701724</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cudart64_101.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.705676</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cublas64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.711700</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cufft64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.716021</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library curand64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.720220</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cusolver64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.724584</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cusparse64_10.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.732739</span>: I tensorflow<span class="hljs-regexp">/stream_executor/</span>platform<span class="hljs-regexp">/default/</span>dso_loader.cc:<span class="hljs-number">44</span>] Successfully opened dynamic library cudnn64_7.dll<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">25.738786</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1697</span>] Adding visible gpu devices: <span class="hljs-number">0</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">26.578678</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1096</span>] Device interconnect StreamExecutor with strength <span class="hljs-number">1</span> edge matrix:<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">26.583080</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1102</span>]      <span class="hljs-number">0</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">26.586153</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1115</span>] <span class="hljs-number">0</span>:   N<br><span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">21</span> <span class="hljs-number">04</span>:<span class="hljs-number">02</span>:<span class="hljs-number">26.591704</span>: I tensorflow<span class="hljs-regexp">/core/</span>common_runtime<span class="hljs-regexp">/gpu/g</span>pu_device.cc:<span class="hljs-number">1241</span>] Created TensorFlow device (<span class="hljs-regexp">/job:localhost/</span>replica:<span class="hljs-number">0</span><span class="hljs-regexp">/task:0/</span>device:GPU:<span class="hljs-number">0</span> with <span class="hljs-number">14239</span> MB memory) -&gt; physical GPU (device: <span class="hljs-number">0</span>, name: Tesla T4, pci bus id: <span class="hljs-number">0000</span>:<span class="hljs-number">00</span>:<span class="hljs-number">1</span>e.<span class="hljs-number">0</span>, compute capability: <span class="hljs-number">7.5</span>)<br>&gt;&gt;&gt; <span class="hljs-keyword">print</span>(sess.run(hello))<br>b<span class="hljs-string">&#x27;hello,tensorflow&#x27;</span><br></code></pre></td></tr></table></figure><p>这个不是问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br>tf.compat.v1.disable_eager_execution()<br>hello = tf.constant(<span class="hljs-string">&#x27;hello,tensorflow&#x27;</span>)<br>sess= tf.compat.v1.Session()<br>print(sess.run(hello))<br></code></pre></td></tr></table></figure><p>这里需要注意的是，由于本文使用的Tensorflow版本是2.1，原来1.1版本中的Session方法已经过期，因此在2.x上调用Session的方法需要修改为compat.v1.Session。否则会报告方法不可用。<br>只要最后打出了hello表示配置成功。<br>参考内容(<a href="https://blog.bitipcman.com/install-tensorflow-on-windows/">https://blog.bitipcman.com/install-tensorflow-on-windows/</a>)</p><hr><p>参考文献</p><blockquote><p><a href="https://www.runoob.com/python/python-install.html">菜鸟教程</a><br><a href="http://mirrors.aliyun.com/pypi/simple/">国内镜像</a><br><a href="https://www.jianshu.com/p/d3bd17953862">PiP Install TensorFlow 报错*** is not a supported wheel on this platform.</a><br><a href="https://blog.csdn.net/lijil168/article/details/82289596">tensorflow出现 ImportError: DLL load failed: 找不到指定的程序</a><br><a href="https://blog.csdn.net/wjhua_223/article/details/105681521">解决 tensorflow-gpu 2.1 出现错误 “Could not load dynamic library ‘cudart64_101.dll’</a><br><a href="https://cn.dll-files.com/cudart64_101.dll.html">cudart64_101.dll.html文件下载</a><br><a href="https://blog.bitipcman.com/install-tensorflow-on-windows/">在Windows下安装Tensorflow</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
      <category>Tensorflow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tensorflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning Model Summary</title>
    <link href="/2020/07/19/Machine-Learning-Model-Summary/"/>
    <url>/2020/07/19/Machine-Learning-Model-Summary/</url>
    
    <content type="html"><![CDATA[<center>记录一些模型的优缺点，以及自己的一些理解。</center><span id="more"></span><h1 id="K-Means"><a href="#K-Means" class="headerlink" title="K-Means"></a><a href="https://zh.wikipedia.org/wiki/K-%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95">K-Means</a></h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>k-平均聚类的目的是：把n个点（可以是样本的一次观察或一个实例）划分到k个聚类中，使得每个点都属于离他最近的均值（此即聚类中心）对应的聚类，以之作为聚类的标准。</p><h2 id="主成分分析（PCA）"><a href="#主成分分析（PCA）" class="headerlink" title="主成分分析（PCA）"></a>主成分分析（PCA）</h2><p>有一些研究表明，k-均值的放松形式解（由聚类指示向量表示），可由主成分分析中的主成分给出，并且主成分分析由主方向张成的子空间与聚类图心空间是等价的。不过，主成分分析是k-均值聚类的有效放松形式并不是一个新的结果()，并且还有的研究结果直接揭示了关于“聚类图心子空间是由主成分方向张成的”这一论述的反例 。</p><h1 id="Decision-tree-决策树"><a href="#Decision-tree-决策树" class="headerlink" title="Decision tree (决策树)"></a><a href="https://zh.wikipedia.org/wiki/%E5%86%B3%E7%AD%96%E6%A0%91">Decision tree (决策树)</a></h1><p><img src="https://upload.wikimedia.org/wikipedia/commons/f/ff/Decision_tree_model.png" alt="决策树图大概样子"></p><h2 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h2><p>数据挖掘中决策树是一种经常要用到的技术，可以用于分析数据，同样也可以用来作预测。<br>决策树经常在运筹学中使用，特别是在决策分析中，它帮助确定一个能最可能达到目标的策略。如果在实际中，决策不得不在没有完备知识的情况下被在线采用，一个决策树应该平行概率模型作为最佳的选择模型或在线选择模型算法。决策树的另一个使用是作为计算条件概率的描述性手段。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>**决策树易于理解和实现.**人们在通过解释后都有能力去理解决策树所表达的意义。</li><li>**对于决策树，数据的准备往往是简单或者是不必要的.**其他的技术往往要求先把数据一般化，比如去掉多余的或者空白的属性。</li><li><strong>能够同时处理数据型和常规型属性。</strong>其他的技术往往要求数据属性的单一。</li><li><strong>是一个白盒模型</strong>如果给定一个观察的模型，那么根据所产生的决策树很容易推出相应的逻辑表达式。</li><li><strong>易于通过静态测试来对模型进行评测。</strong>表示有可能测量该模型的可信度。</li><li><strong>在相对短的时间内能够对大型数据源做出可行且效果良好的结果。</strong></li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>对于那些各类别样本数量不一致的数据，在决策树当中信息增益的结果偏向于那些具有更多数值的特征。</p><h2 id="Network-Pruning-决策树的剪枝"><a href="#Network-Pruning-决策树的剪枝" class="headerlink" title="Network Pruning (决策树的剪枝)"></a>Network Pruning (决策树的剪枝)</h2><p>剪枝是决策树停止分支的方法之一，剪枝有分预先剪枝和后剪枝两种。预先剪枝是在树的生长过程中设定一个指标，当达到该指标时就停止生长，这样做容易产生“视界局限”，就是一旦停止分支，使得节点N成为叶节点，就断绝了其后继节点进行“好”的分支操作的任何可能性。不严格的说这会已停止的分支会误导学习算法，导致产生的树不纯度降差最大的地方过分靠近根节点。后剪枝中树首先要充分生长，直到叶节点都有最小的不纯度值为止，因而可以克服“视界局限”。然后对所有相邻的成对叶节点考虑是否消去它们，如果消去能引起令人满意的不纯度增长，那么执行消去，并令它们的公共父节点成为新的叶节点。这种“合并”叶节点的做法和节点分支的过程恰好相反，经过剪枝后叶节点常常会分布在很宽的层次上，树也变得非平衡。后剪枝技术的优点是克服了“视界局限”效应，而且无需保留部分样本用于交叉验证，所以可以充分利用全部训练集的信息。但后剪枝的计算量代价比预剪枝方法大得多，特别是在大样本集中，不过对于小样本的情况，后剪枝方法还是优于预剪枝方法的</p><h3 id="Network-Pruning优点"><a href="#Network-Pruning优点" class="headerlink" title="Network Pruning优点"></a>Network Pruning优点</h3><p>1）最直接的好处就是计算量的减小，从而使计算时间更少，功耗更小。<br>2）Memory footprint变小，可以放到更低端的设备上跑。还有个额外的性能好处是本来需要既慢又耗电的DRAM参与，现在有可能放在SRAM就搞定。<br>3）Size更小的包有利于应用发布和更新。如一些手机市场会对应用的大小有限制，另外也有利于车OTA升级。</p><h3 id="Network-Pruning缺点"><a href="#Network-Pruning缺点" class="headerlink" title="Network Pruning缺点"></a>Network Pruning缺点</h3><p>容易造成精度大幅下降，同时模型残留冗余</p><h3 id="Network-Pruning备注"><a href="#Network-Pruning备注" class="headerlink" title="Network Pruning备注"></a>Network Pruning备注</h3><p>可以解决DNN计算量太大的问题，用Pruning来对每个部分的神经网络分别训练，开始的准确率会下降，但是训练后的准确率会逐渐上升，每次的改动都不要太大，进而达到全部训练的目标。</p><p><img src="https://i.loli.net/2020/08/25/5zcg3nsAYlW6M7V.png" alt="28674cb38321348d9f4261dc4a8654e.png"></p>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 修饰符 与 Number&amp;Math类</title>
    <link href="/2020/04/23/Java%20%E4%BF%AE%E9%A5%B0%E7%AC%A6%20%E4%B8%8E%20Number&amp;Math%E7%B1%BB/"/>
    <url>/2020/04/23/Java%20%E4%BF%AE%E9%A5%B0%E7%AC%A6%20%E4%B8%8E%20Number&amp;Math%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<center>主要说修饰符的static和final以及Number课件中我不太懂的几个题。</center><span id="more"></span><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>1.静态变量：</p><p>static关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。<br>换句话说就是用static声明类变量，所有对象里的该变量都一样（<strong>相当于类的全局变量</strong>）</p><p>2.静态方法：</p><p>static关键字用来声明<strong>独立于对象的</strong>静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mystery</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mystery</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123; <br>  <span class="hljs-comment">// 这里一定要有static！！</span><br>  <span class="hljs-comment">//要不然会报错：无法从静态上下文中引用非静态 方法 mystery(int,int)</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>==b)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a + mystery(a, b-<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x = mystery(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>);<br>    System.out.println(x);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="fianal"><a href="#fianal" class="headerlink" title="fianal"></a>fianal</h2><p>final class 不可被继承<br>final可以用于variables, methods, classes， 限制继承和覆写</p><h2 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h2><p>接口及接口的成员变量和成员方法不能声明为 protected<br>protected对同一包内的类和所有子类可见。</p><h1 id="Number-amp-Math类"><a href="#Number-amp-Math类" class="headerlink" title="Number&amp;Math类"></a>Number&amp;Math类</h1><p>所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类 Number 的子类。<br><img src="https://www.runoob.com/wp-content/uploads/2013/12/number1.png"></p><h2 id="常用的"><a href="#常用的" class="headerlink" title="常用的"></a>常用的</h2><p>1    xxxValue()<br>将 Number 对象转换为xxx数据类型的值并返回。<br>3    equals()<br>判断number对象是否与参数相等。<br>5    toString()<br>以字符串形式返回值。<br>6    parseInt()<br>将字符串解析为int类型。<br>7    abs()<br>返回参数的绝对值。<br>11    round()<br>它表示四舍五入，算法为 Math.floor(x+0.5)，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。<br>12    min()<br>返回两个参数中的最小值。<br>13    max()<br>返回两个参数中的最大值。<br>27    random()<br>返回一个随机数。</p><h2 id="不常用的"><a href="#不常用的" class="headerlink" title="不常用的"></a>不常用的</h2><p>8    ceil()<br>返回大于等于( &gt;= )给定参数的的最小整数，类型为双精度浮点型。<br>9    floor()<br>返回小于等于（&lt;=）给定参数的最大整数 。<br>14    exp()<br>返回自然数底数e的参数次方。<br>15    log()<br>返回参数的自然数底数的对数值。<br>16    pow()<br>返回第一个参数的第二个参数次方。<br>17    sqrt()<br>求参数的算术平方根。<br>18    sin()<br>求指定double类型参数的正弦值。<br>19    cos()<br>求指定double类型参数的余弦值。<br>20    tan()<br>求指定double类型参数的正切值。<br>21    asin()<br>求指定double类型参数的反正弦值。<br>22    acos()<br>求指定double类型参数的反余弦值。<br>23    atan()<br>求指定double类型参数的反正切值。<br>24    atan2()<br>将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。<br>25    toDegrees()<br>将参数转化为角度。<br>26    toRadians()<br>将角度转换为弧度。</p><h1 id="Practice-Exercise-2"><a href="#Practice-Exercise-2" class="headerlink" title="Practice Exercise 2"></a>Practice Exercise 2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParameterUse</span> </span>&#123;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> y = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span>[] z = &#123;<span class="hljs-number">2</span>&#125;;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] w = &#123;<span class="hljs-number">3</span>&#125;;<br>        useArgs(x, y, z, w);<br>      &#125;<br>      <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useArgs</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b,</span></span><br><span class="hljs-function"><span class="hljs-params">                          <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] c, <span class="hljs-keyword">int</span>[] d)</span> </span>&#123;<br>        <span class="hljs-comment">// 输入到useArgs里的就看这个函数的参数就可以了，不用管xyzw</span><br>        <span class="hljs-comment">// a是final，所以a不能被改变，但是b可以，b可以被随意更改</span><br>        a++; <span class="hljs-comment">// Error</span><br>        b++;<br>        b=a;<br>        <span class="hljs-comment">//后面的三个，表示数组c或者d的地址不能改变，但是里面的内容可以改变</span><br>        c[<span class="hljs-number">0</span>]++; <span class="hljs-comment">// Ok</span><br>        d[<span class="hljs-number">0</span>]++; <span class="hljs-comment">// Ok</span><br>        c=d; <span class="hljs-comment">// Error</span><br>      &#125; <br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="有关不可变类的理解"><a href="#有关不可变类的理解" class="headerlink" title="有关不可变类的理解"></a>有关不可变类的理解</h1><p>&emsp;&emsp;不可变类（immutable class）是指当创建了这个类的实例后，就不允许修改它的值了，也就是说一个对象被创建以后，在整个生命周期内，它的成员变量就不能被修改了。有点类似与常量（const）不允许别的程序进行修改。<br>&emsp;&emsp;Java类库中，所有基本类型的包装类都是不可变类（Byte、Boolean、Short、Char、Integer、Float、Long、Double），此外String也是不可变类。<a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Object.html">Object也是一个基本类型</a>,他在java.lang.Object里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;Hello&quot;</span>;<br><br>s += <span class="hljs-string">&quot; World&quot;</span>;<br><br>System.out.println(s);<br></code></pre></td></tr></table></figure><p>运行结果是：Hello World<br>其实程序是在执行 s += “ World” 时创建了一个新的对象”Hello World”，s指向了这个新建的对象。原来的”Hello”字符串常量在内存中并没有被改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer a = <span class="hljs-number">1</span>;<br>Integer b = a;<br>b++;<br>System.out.print(a + <span class="hljs-string">&quot; &quot;</span> + b);<br></code></pre></td></tr></table></figure><p>运行结果：1 2<br>上面程序执行完 b++后，由于Integer是不可变类，因此会创建一个新值为2的Integer赋值给b，此时b和a已经没有任何关系。</p><hr><p>参考文献</p><blockquote><p><a href="https://www.runoob.com/java/java-number.html">Java Number &amp; Math 类</a><br><a href="https://blog.csdn.net/u012005549/article/details/82684652">Java基本数据类型以及由不可变类带来的值传递和引用传递的难点分析</a><br><a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Object.html">Java Object Api</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Interface</title>
    <link href="/2020/04/23/Interface/"/>
    <url>/2020/04/23/Interface/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。<br>&emsp;&emsp;除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。<br>&emsp;&emsp;接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。<br>&emsp;&emsp;只有interfaces可以多继承。interfaces是抽象类。</p><span id="more"></span><h1 id="接口与类的区别："><a href="#接口与类的区别：" class="headerlink" title="接口与类的区别："></a>接口与类的区别：</h1><p>接口不能用于实例化对象。<br>接口没有构造方法。<br>接口中所有的方法必须是抽象方法。<br>接口不能包含成员变量，除了 static 和 final 变量。<br>接口不是被类继承了，而是要被类实现。<br>接口支持多继承。</p><h1 id="接口特性"><a href="#接口特性" class="headerlink" title="接口特性"></a>接口特性</h1><p><font color="red">接口中的所有属性 默认的修饰符是  public static final。</font><br><font color="red">接口中的所有方法 默认的修饰符是  public abstract。</font><br>接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 public abstract（只能是 public abstract，其他修饰符都会报错）。<br>接口中可以含有变量，但是接口中的变量会被隐式的指定为 public static final 变量（并且只能是 public，用 private 修饰会报编译错误）。<br>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。</p><h1 id="接口声明"><a href="#接口声明" class="headerlink" title="接口声明"></a>接口声明</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">[可见度] interface 接口名称 [extends 其他的接口名] &#123;<br>        <span class="hljs-comment">// 声明变量</span><br>        <span class="hljs-comment">// 抽象方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">...implements 接口名称[, 其他接口名称, 其他接口名称..., ...] ...<br><span class="hljs-comment">//For Example</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MammalInt</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Animal</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><h1 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h1><p>在Java中，类的多继承是不合法，但接口允许多继承。<br>在接口的多继承中extends关键字只需要使用一次，在其后跟着继承接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Hockey</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Sports</span>, <span class="hljs-title">Event</span></span><br></code></pre></td></tr></table></figure><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>1.抽象类和接口都不能实例化。（也就是不能初始化）<br>2.如果您不提供任何方法实现，请使用接口代替抽象类。（因为抽象类也可以不完成方法，所以用接口更好）<br>3.A class can implementmany interfaces, but extendsonly one superclass.<br>4.Both abstract classes and interfaces cancontain constants, which will be inherited by classes that extendor implementthem, respectively.</p><p>以下代码是说明interface是如何多继承的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Father</span></span>&#123; <span class="hljs-keyword">int</span> age = <span class="hljs-number">30</span>; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wash</span><span class="hljs-params">()</span></span>; &#125; <br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Mother</span></span>&#123; <span class="hljs-keyword">long</span> bank_account = <span class="hljs-number">100000</span>; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cook</span><span class="hljs-params">()</span></span>; &#125; <br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span>, <span class="hljs-title">Mother</span></span>&#123; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cry</span><span class="hljs-params">(booleantear)</span></span>; &#125;  <br></code></pre></td></tr></table></figure><p>Childinherits from Fatherand Motherand has the following:<br>intage = 30; (!!)<br>long bank_account= 100000;<br>void wash();<br>void cook();<br>void cry(booleantear);</p><h1 id="Name-Conflicts"><a href="#Name-Conflicts" class="headerlink" title="Name Conflicts"></a>Name Conflicts</h1><p>•What happens if Fatherinterface and Motherinterface contain same named methodsand variables(constants)? </p><h2 id="–Same-named-methods"><a href="#–Same-named-methods" class="headerlink" title="–Same named methods:"></a>–Same named methods:</h2><p>&emsp;&emsp;•If they have different parameters, then Childinterface has both (this is same as overloading).<br>&emsp;&emsp;•If they differ by only return type, then error.<br>&emsp;&emsp;•If the two methods are identical, only keep one. </p><h2 id="–Same-named-constants"><a href="#–Same-named-constants" class="headerlink" title="–Same named constants:"></a>–Same named constants:</h2><p>we keep both constants. To refer to them, use parent interface nameas prefix.<br>&emsp;&emsp;•Example: –If both Fatherand Mothercontain an agevariable, then Child interface contains both. –To refer to them, we use: Father.ageor Mother.age.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TestInterface1</span> </span>&#123; <br>  <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123; <br>    System.out.println(<span class="hljs-string">&quot;Default TestInterface1&quot;</span>); <br>  &#125; <br>&#125; <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TestInterface2</span> </span>&#123; <br>  <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123; <br>    System.out.println(<span class="hljs-string">&quot;Default TestInterface2&quot;</span>); <br>  &#125; <br>&#125; <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TestInterface1</span>, <span class="hljs-title">TestInterface2</span> </span>&#123; <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123; <br>    TestInterface1.<span class="hljs-keyword">super</span>.show();   <br>    TestInterface2.<span class="hljs-keyword">super</span>.show(); <br>  &#125; <br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <br>    TestClass d = <span class="hljs-keyword">new</span> TestClass(); <br>    d.show(); <br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>TestInterface1.super.show();<br>TestInterface2.super.show();<br>如果一个类同时实现接口A和B，接口A和B中有相同的default方法，这时，该类必须重写接口中的default方法。<br>为什么要重写呢？是因为，类在继承接口中的default方法时，不知道应该继承哪一个接口中的default方法。</p><p>在interface中，声明default可以直接完成函数。<br>如果一个类同时实现接口A和B，接口A和B中有相同的default方法，这时，该类必须重写接口中的default方法。</p><p>好好理解一下这里的super，没有是不行的。<br><font color="red">如果实现类中要访问接口中的成员，不能使用super关键字。因为两者之间没有显示的继承关系，况且<strong>当接口中的成员成员属性是静态的</strong>。可以使用接口名直接访问。</font></p><hr><p><font color="red">interface里不允许使用修饰符protected<br>protected对同一包内的类和所有子类可见。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyConstants</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> r = <span class="hljs-number">4</span>;<br>  <span class="hljs-keyword">int</span> s = <span class="hljs-number">6</span>;<br><br>  <span class="hljs-comment">// INSERT CODE HERE</span><br>  <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> circumference = <span class="hljs-number">2</span>*Math.PI*r;<br>  <span class="hljs-comment">// int total = total + r + s; //Error, No declare total value.</span><br>  <span class="hljs-keyword">int</span> AREA = r*s;<br>  <span class="hljs-comment">// public static MAIN = 15; //Error, NO int or double, etc.</span><br>  <span class="hljs-comment">// protected int CODE = 31337; // Can not be protected!</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Week2 Practice</title>
    <link href="/2020/04/14/Practice/"/>
    <url>/2020/04/14/Practice/</url>
    
    <content type="html"><![CDATA[<p>必须要写点什么才能折叠起来。</p><span id="more"></span><h1 id="Question1（好）"><a href="#Question1（好）" class="headerlink" title="Question1（好）"></a>Question1（好）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Question1</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    <span class="hljs-comment">// double numbers = &#123;2.5, 6, 2.6, 8.0&#125;;</span><br>    <span class="hljs-keyword">double</span>[] numbers = &#123;<span class="hljs-number">2.5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2.6</span>, <span class="hljs-number">8.0</span>&#125;;<br><br>    <span class="hljs-comment">// int[] marks = int[60];</span><br>    <span class="hljs-keyword">int</span>[] marks = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">60</span>];<br><br>    <span class="hljs-comment">// char letters[] = &#123;a, b, c, d, e, f&#125;;</span><br>    <span class="hljs-keyword">char</span>[] letters = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>&#125;;<br>    <br>    <span class="hljs-comment">// String[] books = &#123;Java, SQL, PHP&#125;;</span><br>    String[] books = &#123;<span class="hljs-string">&quot;Java&quot;</span>, <span class="hljs-string">&quot;SQL&quot;</span>, <span class="hljs-string">&quot;PHP&quot;</span>&#125;;<br><br> <br>    <span class="hljs-keyword">char</span> letter = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Question2"><a href="#Question2" class="headerlink" title="Question2"></a>Question2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Out of the range</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Q2</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    <span class="hljs-keyword">int</span>[] intArray = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;=intArray.length; i++)&#123;<br>       intArray[i] = i;<br>    &#125;<br>    System.out.println(intArray);<br><br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;会超界导致无法输出，只需要把=去掉就可以了。</p><h1 id="Question3"><a href="#Question3" class="headerlink" title="Question3"></a>Question3</h1><p>&emsp;&emsp;Assume we have a Flowerclass (*), and two of its methods are setColour(String colour)and setHeight(double height). What is wrong with the following code? Explain your answer. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Flower[] f = <span class="hljs-keyword">new</span> Flower[<span class="hljs-number">2</span>];<br>f[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> Flower(); <br>f[<span class="hljs-number">0</span>].setColour(<span class="hljs-string">&quot;Red&quot;</span>); <br>f[<span class="hljs-number">0</span>].setHeight(<span class="hljs-number">4.0</span>); <br>f[<span class="hljs-number">1</span>].setColour(<span class="hljs-string">&quot;Blue&quot;</span>); <br>f[<span class="hljs-number">1</span>].setHeight(<span class="hljs-number">3.5</span>);<br>````<br>&amp;emsp;&amp;emsp;缺少一个 f[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> Flower(); <br># Question4<br>&amp;emsp;&amp;emsp;<span class="hljs-function">Assume we have a <span class="hljs-title">Flowerclass</span> <span class="hljs-params">(\*)</span>, and two of its methods are <span class="hljs-title">setColour</span><span class="hljs-params">(String colour)</span>and <span class="hljs-title">setHeight</span><span class="hljs-params">(<span class="hljs-keyword">double</span> height)</span>. What is wrong with the following code? Explain your answer.</span><br><span class="hljs-function">```java</span><br><span class="hljs-function">Flower[] f </span>= <span class="hljs-keyword">new</span> Flower[<span class="hljs-number">2</span>]; <br>f[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> Flower(); <br>f[<span class="hljs-number">0</span>].setColour(<span class="hljs-string">&quot;Red&quot;</span>); <br>f[<span class="hljs-number">0</span>].setHeight(<span class="hljs-number">4.0</span>); <br>f[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> Flower(); <br>f[<span class="hljs-number">1</span>].setColour(<span class="hljs-string">&quot;Blue&quot;</span>); <br>f[<span class="hljs-number">1</span>].setHeight(<span class="hljs-number">3.5</span>); f[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> Flower();      <br>f[<span class="hljs-number">2</span>].setColour(<span class="hljs-string">&quot;Pink&quot;</span>); <br>f[<span class="hljs-number">2</span>].setHeight(<span class="hljs-number">2.5</span>);<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;同上，也是超界，把2改成3就对了。</p><h1 id="Question5（好）"><a href="#Question5（好）" class="headerlink" title="Question5（好）"></a>Question5（好）</h1><p>Assume we have a Flowerclass (*), and two of its methods are setColour(String colour)and setHeight(double height). What is wrong with the following code? Explain your answer.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//No initialize i</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Q5</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    i = i + <span class="hljs-number">5</span>;<br>    System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&ensp;&ensp;Local Variables are not given a defined value! Instance variables are.<br>&emsp;&emsp;可以 int i = 0;</p><h1 id="Question7（好）"><a href="#Question7（好）" class="headerlink" title="Question7（好）"></a>Question7（好）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square_Q7a</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x*x; &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-keyword">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> y*y; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;问题：square(int)已经被定义过一次了，所以不能被重复定义，可以改成public double square(double y) { return y*y; }</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square_Q7b</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x*x; &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-keyword">double</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> y*y; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;莫得问题！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square_Q7c</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x*x; &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-keyword">double</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> y*y; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;转化会有损失精度问题，直接下下面的int改成double就可以了。</p><h1 id="Question8"><a href="#Question8" class="headerlink" title="Question8"></a>Question8</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">()</span> </span>&#123; System.out.println(<span class="hljs-string">&quot;car 1&quot;</span>); &#125; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m2</span><span class="hljs-params">()</span> </span>&#123; System.out.println(<span class="hljs-string">&quot;car 2&quot;</span>); &#125; <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;vroom&quot;</span>; &#125; &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Truck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Car</span> </span>&#123; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">()</span> </span>&#123; System.out.println(<span class="hljs-string">&quot;truck 1&quot;</span>); &#125; <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Truck mycar= <span class="hljs-keyword">new</span> Truck(); <br>System.out.println(mycar); <br>mycar.m1(); mycar.m2(); <br></code></pre></td></tr></table></figure><p>输出内容：<br>vroom<br>truck 1<br>car 2</p><h1 id="Question9"><a href="#Question9" class="headerlink" title="Question9"></a>Question9</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">()</span></span>&#123; System.out.println(<span class="hljs-string">&quot;car 1&quot;</span>); &#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m2</span><span class="hljs-params">()</span></span>&#123; System.out.println(<span class="hljs-string">&quot;car 2&quot;</span>); &#125; <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;vroom&quot;</span>; &#125; &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Truck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Car</span> </span>&#123; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">()</span> </span>&#123; System.out.println(<span class="hljs-string">&quot;truck 1&quot;</span>); &#125; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m2</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">super</span>.m1(); &#125; <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.toString()+ <span class="hljs-string">&quot;T&quot;</span>; &#125; <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Truck mycar= <span class="hljs-keyword">new</span> Truck(); <br>System.out.println(mycar); <br>mycar.m1(); <br>mycar.m2(); <br></code></pre></td></tr></table></figure><p>输出内容：<br>vroomT<br>truck 1<br>car 1</p><h1 id="Question10"><a href="#Question10" class="headerlink" title="Question10"></a>Question10</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Q10</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    String s = <span class="hljs-string">&quot;6&quot;</span>;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">double</span> d = <span class="hljs-number">4.5</span>;<br>    System.out.println(s + n + d);<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出内容：634.5</p><h1 id="Question11"><a href="#Question11" class="headerlink" title="Question11"></a>Question11</h1><p>Identify which statements are TRUE and which are FALSE. Justify your answers.<br>1.subclass has direct access to its superclass’ private data and   methods.<br>2.A class can extend more than one superclass.<br>3.An abstract class must contain at least one abstract method.<br>4.An abstract class must not contain any instance variables.</p><p>1:错 不能继承private，只能继承protected和public<br>2:错 一个类不能继承多个父类，但是多个类可以继承一个类，这个Java继承里面有写<br>3:错 可以不包含任何抽象的方法以及变量，只是因为它是一个抽象，必须要事例<br>4:错 可以包含常量</p><h1 id="Question12"><a href="#Question12" class="headerlink" title="Question12"></a>Question12</h1><p>A class Animalhas a subclass Dog. Which of the following is TRUE?<br>a)     Dog cannot have subclasses.<br>b)   Dog has no other parent than Animal.<br>c)   Animal can have only one subclass.<br>d)   Dog cannot have siblings.<br>答案： b<br>解析：a)狗可以有子类，比如母狗，公狗等。<br>    c)动物可以分子类，比如猫，兔子等<br>    d)狗也可以有兄弟姐妹，比如上面说的猫和兔子</p><h1 id="Question13"><a href="#Question13" class="headerlink" title="Question13"></a>Question13</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Q13a</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    System.out.println(s1==s2);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Q13b</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    System.out.println(s1.equals(s2));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Q13c</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    String s1 = <span class="hljs-string">&quot;aaa&quot;</span>;<br>    String s2 = <span class="hljs-string">&quot;aaa&quot;</span>;<br>    System.out.println(s1==s2);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>true</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java继承(Inheritance)</title>
    <link href="/2020/04/12/Java%E7%BB%A7%E6%89%BF/"/>
    <url>/2020/04/12/Java%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这个继承可真的是太南了！</p><span id="more"></span><h1 id="继承-Inheritance"><a href="#继承-Inheritance" class="headerlink" title="继承(Inheritance)"></a>继承(Inheritance)</h1><p>&emsp;&emsp;子类拥有父类<strong>非 private</strong>的属性、方法。<br>&emsp;&emsp;Java不支持多继承，但支持多重继承。<br><img src="https://www.runoob.com/wp-content/uploads/2013/12/types_of_inheritance-1.png"></p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>&emsp;&emsp;抽象类不能直接New一个对象，需要用extends来定义在父类中的abstract内容。直到所有的abstract变量和函数全都被重写，才可以New对象。</p><h2 id="Creature-cCreature-new-Turtle-问题"><a href="#Creature-cCreature-new-Turtle-问题" class="headerlink" title="Creature cCreature = new Turtle();问题"></a>Creature cCreature = new Turtle();问题</h2><p>&emsp;&emsp;在New对象的时候，也会先走父类函数，如果子类对父类有重写，则运行子类重写的函数。如果子类对父类有重载，则按照相应规则进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span></span>&#123;<br>        func2();<br>    &#125;<br>    <span class="hljs-comment">//这是父类中的func2()方法，因为下面的子类中重写了该方法所以在父类类型的引用中调用时，这个方法将不再有效</span><br>    <span class="hljs-comment">//取而代之的是将调用子类中重写的func2()方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;AAA&quot;</span>);<br>    &#125;<br>&#125;<br> <br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-comment">//func1(int i)是对func1()方法的一个重载由于在父类中没有定义这个方法，所以它不能被父类类型的引用调用</span><br>    <span class="hljs-comment">//所以在下面的main方法中child.func1(68)是不对的</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;BBB&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//func2()重写了父类Father中的func2()方法如果父类类型的引用中调用了func2()方法，那么必然是子类中重写的这个方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CCC&quot;</span>);<br>    &#125;<br>&#125;<br> <br> <br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PolymorphismTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Father child = <span class="hljs-keyword">new</span> Child();<br>        child.func1();<span class="hljs-comment">//打印结果将会是什么？</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;上面的程序是个很典型的多态的例子。子类Child继承了父类Father，并重载了父类的func1()方法，重写了父类的func2()方法。重载后的func1(int i)和func1()不再是同一个方法，由于父类中没有func1(int i),那么，父类类型的引用child就不能调用func1(int i)方法。而子类重写了func2()方法，那么父类类型的引用child在调用该方法时将会调用子类中重写的func2()。<br>&emsp;&emsp;那么该程序将会打印出什么样的结果呢？很显然，应该是“CCC”。</p><p>&emsp;&emsp;这就可以很好解释我在QMPlus上问的问题了。代码位置：Code\Set_12\slides_41</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoctorTest</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ArrayList&lt;Doctor&gt; dlist = <span class="hljs-keyword">new</span> ArrayList&lt;Doctor&gt;();<br>    dlist.add(<span class="hljs-keyword">new</span> Doctor());<br>    dlist.add(<span class="hljs-keyword">new</span> Surgeon());<br>    dlist.add(<span class="hljs-keyword">new</span> FamilyDoctor());<br>    dlist.add(<span class="hljs-keyword">new</span> Surgeon());<br><br>    <span class="hljs-keyword">for</span> (Doctor d : dlist) &#123;<br>      d.treatPatient();<br>      <span class="hljs-comment">// d.giveAdvice();</span><br>    &#125;<br><br>    <span class="hljs-comment">//System.out.println(dlist.get(2).giveAdvice());</span><br>    <span class="hljs-comment">// System.out.println(dlist.indexOf(new FamilyDoctor()));</span><br>    &#125;<br><br>    <span class="hljs-comment">// dlist.get(2).giveAdvice();</span><br>    <span class="hljs-comment">// dlist.get(1).makeIncision();</span><br> <br>&#125;<br><br><span class="hljs-comment">//如何在ArrayList中没用命名的情况下调用里面的函数</span><br><span class="hljs-comment">//如何在ArrayList中对象没有命名的时候 用indexOf索引出来</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;为什么FamilyDoctor不能giveAdvice()?为什么Surgeon不能makeIncision()?明明在他们自己的类中都有定义？<br>&emsp;&emsp;因为，这个里面新建的是Doctor ArrayList，所以只能进行Doctor的操作，其他单独特有的操作，在这个ArrayList里面是无法进行的。<br>&emsp;&emsp;同时，ArrayList可以直接用indexOf(int n)，n为对象所在的位置。<br>&emsp;&emsp;同时下面这个问题和上面的问题一样，父类无法调用子类，如果没有复写的话。 位置：Code\Set_12\slides_32</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Turtle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Creature</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">success</span><span class="hljs-params">()</span></span>&#123;<br>  System.out.println(<span class="hljs-string">&quot;Create a Turtle object successfully&quot;</span>);<br>  &#125;<br>  <br>&#125;          <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MakeCreatures</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    MakeCreatures mCreat = <span class="hljs-keyword">new</span> MakeCreatures();<br>    mCreat.go();<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Creature aCreature = new Creature();</span><br><br>    Creature bCreature = <span class="hljs-keyword">new</span> Rabbit();<br>    bCreature.run(<span class="hljs-number">5</span>, <span class="hljs-keyword">true</span>);<br><br>    Creature cCreature = <span class="hljs-keyword">new</span> Turtle();<br>    System.out.println(cCreature);<br>    <span class="hljs-comment">// cCreature.success(); 因为cCreature创造的是父类，无法调用子类的函数</span><br>    cCreature.swim(<span class="hljs-number">5</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;cCreature.success(); 因为cCreature创造的是父类，无法调用子类的函数。</p><h1 id="重写-Override"><a href="#重写-Override" class="headerlink" title="重写(Override)"></a>重写(Override)</h1><p>重写是子类对父类的允许访问的方法的实现过程进行重新编写,返回值和形参都不能改变。即外壳不变，核心重写！<br>重写的好处在于子类可以根据需要，定义特定于自己的行为。就是说子类能够根据需要实现父类的方法。<br>1.参数列表必须完全与被重写方法的相同。<br>也就是比如 public void sell(){ }<br>重写的子类中也必须是 public void sell() {}<br>如果是 public int sell() {} 会报错 “ 返回类型int与void不兼容 ”<br>2.访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。<br>3.构造方法不能被重写。<br>4.如果不能继承一个方法，则不能重写这个方法。<br>5.重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</p><h1 id="重载-Overload"><a href="#重载-Overload" class="headerlink" title="重载(Overload)"></a>重载(Overload)</h1><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。<br>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。<br>最常用的地方就是构造器的重载。<br>重载规则:<br>1.被重载的方法必须改变参数列表(参数个数或类型不一样)；<br>2.被重载的方法可以改变返回类型；<br>3.被重载的方法可以改变访问修饰符；<br>4.被重载的方法可以声明新的或更广的检查异常；<br>5.方法能够在同一个类中或者在一个子类中被重载。<br>6.无法以返回值类型作为重载函数的区分标准。</p><h1 id="重写与重载之间的区别"><a href="#重写与重载之间的区别" class="headerlink" title="重写与重载之间的区别"></a>重写与重载之间的区别</h1><p>区别点     重载方法    重写方法<br>参数列表   必须修改    一定不能修改<br>返回类型   可以修改    一定不能修改<br>异常       可以修改    可以减少或删除，一定不能抛出新的或者更广的异常<br>访问       可以修改    一定不能做更严格的限制（可以降低限制）</p><hr><p>参考文献</p><blockquote><p><a href="https://blog.csdn.net/weixin_40449300/article/details/84558692">【java基础】——java中父类声明子类实例化</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小学期总结</title>
    <link href="/2019/09/09/%E5%B0%8F%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/"/>
    <url>/2019/09/09/%E5%B0%8F%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;小学期两周的计算机实习结束了，时间虽然不长，但是这两周的收获可并不小，无论是经验还是教训，是个人还是团队，是整体还是细节，都收获颇多。从第一天确定题目，没有基本的架构的思绪混乱，到后来框架渐渐清晰，再到最终整合完成后不断地debug，每天都是满满当当，每天都有不一样的收获。最后一天验收并没有想象中的那么紧张和快乐，反而是异常平静，还有一丝小失落。总的来说，达到了计算机实习的既定目标。<br>&emsp;&emsp;回顾这十多天的经历，还是学会很多的，比如说ftell , fseek等用法、意义，系统时间的调用，以及可以用变量创建不同的文件等，接下来我想从整体把握和细节处理两个方面谈谈我的心得体会。<span id="more"></span></p><h1 id="整体把握"><a href="#整体把握" class="headerlink" title="整体把握"></a>整体把握</h1><h2 id="分工合作"><a href="#分工合作" class="headerlink" title="分工合作"></a>分工合作</h2><p>&emsp;&emsp;先从整体把握方面来说，第一点，我认为最重要的就是分工合作，而在分工合作中组长起着至关重要的作用，任务分配和进度管理，都是对组长的一个考验，同时组员也有义务帮助组长看安排的是否合理。我们组前两天有些操之过急，而且大部分都是各自做各自的事情，对任务的分配也不是很明确，也就是不知道自己到底在写什么，写的代码到底应该放到什么地方去，不清楚自己在干什么大大的浪费了时间。再者，分工的时候也要有先后，有的部分需要有前面的作为基础才能够写，所以大家可以先集中去把框架搭起来，然后再去分配重新分配任务。最后就是整合，整合的过程会出现很多的问题。比如前面一个函数需要调用后面一个函数，但是后面函数需要的东西，前面函数不需要，所以还要改前面函数的定义，把后面函数需要调用的输入到前面函数，再调用到后面的函数。同时再改版的时候，由于大家是一起工作，所以会有人拿的版本新，有的人拿的版本老，就导致，有些已经改动过的内容由于版本旧会相当于没改，也浪费了许多时间。</p><h2 id="心态方面"><a href="#心态方面" class="headerlink" title="心态方面"></a>心态方面</h2><p>&emsp;&emsp;第二点是心态方面，由于开始有些操之过急，应该实现的效果实现的并不是很好，所以后面要有改动，有的改动还是大改动。因为不完美，后面就需要用更长的时间去看自己写的代码，以及看懂之后怎么改，有的时候不放弃旧的思路是不行的，逻辑问题非常严重，不得不从头再来。而且有的时候心态很着急，就耐不下心来去看代码，毛毛躁躁的越看越看不下去，时间都白白地浪费掉了。所以今后在编程地过程中，要平心静气，要一点一点地去解决问题，不能因为怕麻烦一眼看过几行代码，代码的意义全都不懂，最后落得重新开始的结果。</p><h2 id="工作日志"><a href="#工作日志" class="headerlink" title="工作日志"></a>工作日志</h2><p>&emsp;&emsp;第三点是工作日志和工作进度方面，每个人每天都应该写自己的工作日志，今天到底干了些什么，有哪些地方已经弄好，有哪些地方还没有写完，会有什么存在的逻辑问题，以及今后需要优化做的事情。写完之后统一交给组长，由组长对今天任务进度进行把控，对没有按时完成进度的同学进行关照，是组长分配任务的不合理，还是因为别的事情耽误了，再综合考虑后，重新规划明天的任务，保证每天大体按进度进行，做到稳中有序，不慌不忙。</p><h2 id="编程方面"><a href="#编程方面" class="headerlink" title="编程方面"></a>编程方面</h2><p>&emsp;&emsp;第四点是关于编程方面的，在开始编程的时候没有考虑到天数的问题，所有的文件和数据都是按照一天的情况写的，所以导致后面需要将数组升维，每个里面再重新加入判断是今天还是明天的代码。还有就是变量没有统一，很多重复意义的变量名称导致调用的时候混乱。前后写入的方式没有统一，所以会出现一直debug，bug一直有的情况。开工之前应该把大家都用到的变量和函数统一，防止发生重复，以及调用混乱的情况。第四点是关于编程方面的，在开始编程的时候没有考虑到天数的问题，所有的文件和数据都是按照一天的情况写的，所以导致后面需要将数组升维，每个里面再重新加入判断是今天还是明天的代码。还有就是变量没有统一，很多重复意义的变量名称导致调用的时候混乱。前后写入的方式没有统一，所以会出现一直debug，bug一直有的情况。开工之前应该把大家都用到的变量和函数统一，防止发生重复，以及调用混乱的情况。开工前要先画流程图，对程序运行的过程要有一个整体的把握。写代码应该由实际情况出发，优先考虑好需要满足的功能、需要考虑到的特殊情况以及题目中或现实生活中提供的情景与限制，从这个基础出发再去考虑如何在代码层面上实现各个功能及满足限制，以确保代码上的逻辑正确。</p><h1 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h1><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p>&emsp;&emsp;前面谈完了整体把握方面，现在来说说细节处理。第一点写代码要合乎规范，通俗易懂。队友之间要作妖沟通，因为是团队合作，所以肯定会有互相调用函数的情况，有的函数的变量可能别人用不到，但是自己会用到，对别人的函数进行修改的时候一定要做好注释，不然就会导致这个函数最后谁都看不懂，每个人只能看懂自己写的一部分，一旦出了问题，那么改起来就要从头开始了，是十分费力不讨好的事情。</p><h2 id="逻辑思维"><a href="#逻辑思维" class="headerlink" title="逻辑思维"></a>逻辑思维</h2><p>&emsp;&emsp;第二点就是思维逻辑，考虑问题是否周全。要对不同种的情况进行考虑，写完之后也要进行多种可能发生的情况测试，边测边改，如果发现改代码的代价太大，要果断地敢于放弃之前写的代码，重新开始。有的时候，重新开始比在之前的路上继续走要更有勇气和动力！</p><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p>&emsp;&emsp;第三点是Debug。很多情况都是一些很小的问题，有些可以一眼看出来，这个样的还好，但是有些找出来需要花费的代价太大，这些都是编程没有养成良好习惯造成的。比如说，文件没关，之前打开的只读，写入写不进去，或者写入没关，直接显示没写进去的情况。变量名称之间引用错误，如用户数有很多个，本来是j但是习惯性的打成I 。Debug的时候顾前忘后，比如前面的都改成了Seats[day+date-1]，到后面的都改成了Sears[day]，然后一直发现只是第一天的，bug一直找不到。又比如关于回车的问题，对于一个文件有三个情况都会改写。但是有的最后会打一个回车，有的不会，这就造成读取行的时候会差一的问题，所以要在写文件的时候明确规范，到底要不要回车。同时回车有的时候会在gets使用的时候吞掉，所以要记得释放键盘缓冲区。</p><h2 id="文件应用"><a href="#文件应用" class="headerlink" title="文件应用"></a>文件应用</h2><p>&emsp;&emsp;第四点是多余文件记录信息。如果可以用现有的文件生成所需要的信息，就不用再单独写一个文件了，而且多余文件之间还需要进行联动，对于编程也是一大难点，应该确定主文件，只要主文件变，其他相应的文件都应该跟着改。除非是需要永久存储的信息，需要写入到文件中。</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>&emsp;&emsp;这次小学期是第一次进行小组合作完成任务，在合作中出现很多出人意料的问题也都是很正常的情况，这些问题让我们在个人能力和团队合作上都有了提升。恪守北邮“厚德博学，敬业乐群”的校训，兢兢业业地完成自己的工作，十多天的时间不长，却让我对北邮的校训有了新的理解和体会。虽然合作中有很都不尽如人意的地方，但是能和这样认真负责的队友一起完成任务，着实是一件很快乐，很充实的事情。小学期的意义不仅在于编程技术上的提升，更在当今合作的大趋势下，教会我如何与队友合作，去完成更加艰巨的任务。</p>]]></content>
    
    
    <categories>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言自写头文件</title>
    <link href="/2019/07/21/c%E8%AF%AD%E8%A8%80%E8%87%AA%E5%86%99%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <url>/2019/07/21/c%E8%AF%AD%E8%A8%80%E8%87%AA%E5%86%99%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;当你在一个项目小组做一个相对较复杂的工程时，意味着你不再独自单干。你需要和你的小组成员分工合作，一起完成项目，这就要求小组成员各自负责一部分工程。比如你可能只是负责通讯或者显示这一块。这个时候，你就应该将自己的这一块程序写成一个模块，单独调试，留出接口供其它模块调用。最后，小组成员都将自己负责的模块写完并调试无误后，由项目组长进行组合调试。像这些场合就要求程序必须模块化。模块化的好处是很多的，不仅仅是便于分工，它还有助于程序的调试，有利于程序结构的划分，还能增加程序的可读性和可移植性。（这句话是抄的）<br>&emsp;&emsp;总的来说就是在一个工程中添加 <em>.h 和 * .c文件，然后引用</em>.h即可。</p><span id="more"></span><p>引用的方法有两种例如要引用一个叫stdio.h的头文件。<br>方法一：#include &lt;stdio.h&gt;<br>方法二：#include “stdio.h”<br>我想用一个例子就来说明这个问题。<br>请看下面的源代码。😄<br>文件名max.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;max.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdio.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span>&#123;<br><span class="hljs-keyword">int</span> max;<br><span class="hljs-keyword">if</span>(a&gt;=b&amp;&amp;a&gt;=c)<br><span class="hljs-keyword">return</span> a;<br><span class="hljs-keyword">if</span>(b&gt;=a&amp;&amp;b&gt;=c)<br><span class="hljs-keyword">return</span> b;<br><span class="hljs-keyword">if</span>(c&gt;=a&amp;&amp;c&gt;=b)<br><span class="hljs-keyword">return</span> c;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>文件名max.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> max_h</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> max_h<span class="hljs-comment">//注意不要写成max.h的格式</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>文件名main.c(这个名字可以是随意的，可以是c也可以是cpp的格式)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;max.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a,b,c;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input a:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\ninput b:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\ninput c:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;c);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>,max(a,b,c));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;整体合在一起就可以啦！<br>&emsp;&emsp;性能的好坏看.c文件写的怎么样，规定动作是.h的格式。</p><hr><p>参考文献</p><blockquote><p><a href="https://blog.csdn.net/zhzht19861011/article/details/5974945">嵌入式C语言之—模块化编程</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言结构</title>
    <link href="/2019/07/16/c%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84/"/>
    <url>/2019/07/16/c%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;结构是c语言中比较重要的一部分，但是我的使用频率不高，为了防止遗忘，就写了这篇。不要说我能不用结构就不用结构，每个事物的存在都有其必然性，在你需要的时候你就会想起它啦！<br>&emsp;&emsp;如果有很多个结构，比较容易搞混，尤其是结构带着数组、指针，再写在函数里面就更热闹了。下面这个图写着我满脸的开心。🙂<br><img src="https://i.loli.net/2019/07/16/5d2dd3bda9b1641061.png"></p><span id="more"></span><h1 id="结构体的定义"><a href="#结构体的定义" class="headerlink" title="结构体的定义"></a>结构体的定义</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>　结构体名&#123;</span>  <br>     类型名<span class="hljs-number">1</span>　成员名<span class="hljs-number">1</span>;<br>     类型名<span class="hljs-number">2</span>　成员名<span class="hljs-number">2</span>;<br>    ……<br>     类型名n　成员名n;　　　<br> &#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br>    <span class="hljs-keyword">char</span>*name;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> age;<span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">float</span> height;<span class="hljs-comment">//身高</span><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="结构体变量的定义（三种方法）"><a href="#结构体变量的定义（三种方法）" class="headerlink" title="结构体变量的定义（三种方法）"></a>结构体变量的定义（三种方法）</h1><h2 id="先定义结构体类型，再定义变量"><a href="#先定义结构体类型，再定义变量" class="headerlink" title="先定义结构体类型，再定义变量"></a>先定义结构体类型，再定义变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br>    <span class="hljs-keyword">char</span>*name;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> age;<span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">float</span> height;<span class="hljs-comment">//身高</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu</span>;</span><br><span class="hljs-comment">//定义了一个结构体变量，变量名为stu。</span><br><span class="hljs-comment">//struct和Student是连着使用的。</span><br></code></pre></td></tr></table></figure><h2 id="定义结构体类型的同时定义变量"><a href="#定义结构体类型的同时定义变量" class="headerlink" title="定义结构体类型的同时定义变量"></a>定义结构体类型的同时定义变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br>    <span class="hljs-keyword">char</span>*name;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> age;<span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">float</span> height;<span class="hljs-comment">//身高</span><br>&#125;stu;<span class="hljs-comment">//结构体变量名为stu</span><br></code></pre></td></tr></table></figure><h2 id="直接定义结构体类型变量，省略类型名"><a href="#直接定义结构体类型变量，省略类型名" class="headerlink" title="直接定义结构体类型变量，省略类型名"></a>直接定义结构体类型变量，省略类型名</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">char</span>*name;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> age;<span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">float</span> height;<span class="hljs-comment">//身高</span><br>&#125;stu;<br><span class="hljs-comment">//结构体变量名为stu</span><br></code></pre></td></tr></table></figure><h1 id="结构体的注意点"><a href="#结构体的注意点" class="headerlink" title="结构体的注意点"></a>结构体的注意点</h1><p>&emsp;&emsp;<strong>不允许对结构体本身递归定义，但是结构体内可以包含别的结构体。</strong><br>&emsp;&emsp;定义结构体类型，只是说明了该类型的组成情况，并没有给它分配存储空间，就像系统不为int类型本身分配空间一样。只有当定义属于结构体类型的变量时，系统才会分配存储空间给该变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Date</span>&#123;</span><br><span class="hljs-keyword">int</span> year;<br><span class="hljs-keyword">int</span> month;<br><span class="hljs-keyword">int</span> day;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br><span class="hljs-keyword">char</span> *name;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Date</span> <span class="hljs-title">birthday</span>;</span><span class="hljs-comment">//结构体内可以包含别的结构体</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu</span>;</span><br>stu.name=<span class="hljs-string">&quot;someone&quot;</span>;<br>stu.birthday.year=<span class="hljs-number">2018</span>;<br>stu.birthday.month=<span class="hljs-number">8</span>;<br>stu.birthday.day=<span class="hljs-number">15</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,stu.name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>,stu.birthday.year,stu.birthday.month,stu.birthday.day);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结构体的初始化"><a href="#结构体的初始化" class="headerlink" title="结构体的初始化"></a>结构体的初始化</h1><p>&emsp;&emsp;将各成员的初值，按顺序地放在一对大括号{}中，并用逗号分隔，一一对应赋值。<br>&emsp;&emsp;<strong>注意一定是用大括号！！字符型的用””,int or float就用数值。</strong><br>&emsp;&emsp;只能在定义变量的同时进行初始化赋值，初始化赋值和变量的定义不能分开。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br>    <span class="hljs-keyword">char</span> *name;<br>    <span class="hljs-keyword">int</span> age;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu</span> =</span> &#123;<span class="hljs-string">&quot;MJ&quot;</span>, <span class="hljs-number">27</span>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-keyword">char</span> *name;<br><span class="hljs-keyword">int</span> age;<br>&#125;stu[<span class="hljs-number">2</span>]=&#123;&#123;<span class="hljs-string">&quot;ta&quot;</span>,<span class="hljs-number">19</span>&#125;,&#123;<span class="hljs-string">&quot;ni&quot;</span>,<span class="hljs-number">19</span>&#125;&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>,stu[<span class="hljs-number">0</span>].name,stu[<span class="hljs-number">0</span>].age);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>,stu[<span class="hljs-number">1</span>].name,stu[<span class="hljs-number">1</span>].age);<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="结构体的使用"><a href="#结构体的使用" class="headerlink" title="结构体的使用"></a>结构体的使用</h1><p>&emsp;&emsp;一般对结构体变量的操作是以成员为单位进行的，引用的一般形式为：结构体变量名.成员名<br>&emsp;&emsp;(2)行对结构体的age成员进行了赋值。”.”称为成员运算符，它在所有运算符中优先级最高。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br>     <span class="hljs-keyword">char</span> *name;<br>     <span class="hljs-keyword">int</span> age;<br> &#125;;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu</span>;</span> <br> stu.age = <span class="hljs-number">27</span>; <span class="hljs-comment">// 访问stu的age成员........(2)</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;相同类型的结构体变量之间可以进行整体赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">3</span>、相同类型的结构体变量之间可以进行整体赋值<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br>      <span class="hljs-keyword">char</span> *name;<br>      <span class="hljs-keyword">int</span> age;<br>  &#125;;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu1</span> =</span> &#123;<span class="hljs-string">&quot;MJ&quot;</span>, <span class="hljs-number">27</span>&#125;;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu2</span> =</span> stu1; <span class="hljs-comment">// 将stu1直接赋值给stu2</span><br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;age is %d&quot;</span>, stu2.age);<br> <span class="hljs-comment">//输出结果为： age is 27</span><br></code></pre></td></tr></table></figure><h1 id="结构体作为函数参数"><a href="#结构体作为函数参数" class="headerlink" title="结构体作为函数参数"></a>结构体作为函数参数</h1><p>&emsp;&emsp;我记得期末考试的时候好像出了这么一道题。<br>&emsp;&emsp;将结构体变量作为函数参数进行传递时，其实传递的是全部成员的值，也就是将实参中成员的值一一赋值给对应的形参成员。因此，形参的改变不会影响到实参。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br><span class="hljs-keyword">int</span> age;<br>&#125; ;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(struct Student stu)</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改前的形参：%d \n&quot;</span>,stu.age);<br><span class="hljs-comment">//修改实参中的age</span><br>stu.age = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改后的形参: %d \n&quot;</span>,stu.age); <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu</span> =</span> &#123;<span class="hljs-number">30</span>&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改前的实参：%d \n&quot;</span>,stu.age);<br><span class="hljs-comment">//调用test函数</span><br>test(stu);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改后的实参: %d \n&quot;</span>,stu.age);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2dcbde265c822589.png"></p><p>&emsp;&emsp;可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span></span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-keyword">char</span>  title[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  author[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-keyword">int</span>   book_id;<br>&#125;;<br> <br><span class="hljs-comment">/* 函数声明 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">( struct Books book )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span> <span class="hljs-title">Book1</span>;</span>        <span class="hljs-comment">/* 声明 Book1，类型为 Books */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span> <span class="hljs-title">Book2</span>;</span>        <span class="hljs-comment">/* 声明 Book2，类型为 Books */</span><br> <br>   <span class="hljs-comment">/* Book1 详述 */</span><br>   <span class="hljs-built_in">strcpy</span>( Book1.title, <span class="hljs-string">&quot;C Programming&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book1.author, <span class="hljs-string">&quot;Nuha Ali&quot;</span>); <br>   <span class="hljs-built_in">strcpy</span>( Book1.subject, <span class="hljs-string">&quot;C Programming Tutorial&quot;</span>);<br>   Book1.book_id = <span class="hljs-number">6495407</span>;<br> <br>   <span class="hljs-comment">/* Book2 详述 */</span><br>   <span class="hljs-built_in">strcpy</span>( Book2.title, <span class="hljs-string">&quot;Telecom Billing&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book2.author, <span class="hljs-string">&quot;Zara Ali&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book2.subject, <span class="hljs-string">&quot;Telecom Billing Tutorial&quot;</span>);<br>   Book2.book_id = <span class="hljs-number">6495700</span>;<br> <br>   <span class="hljs-comment">/* 输出 Book1 信息 */</span><br>   printBook( Book1 );<br> <br>   <span class="hljs-comment">/* 输出 Book2 信息 */</span><br>   printBook( Book2 );<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">( struct Books book )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book title : %s\n&quot;</span>, book.title);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book author : %s\n&quot;</span>, book.author);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book subject : %s\n&quot;</span>, book.subject);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book book_id : %d\n&quot;</span>, book.book_id);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="指向结构体的指针变量"><a href="#指向结构体的指针变量" class="headerlink" title="指向结构体的指针变量"></a>指向结构体的指针变量</h1><p>1、每个结构体变量都有自己的存储空间和地址，因此指针也可以指向结构体变量<br>2、结构体指针变量的定义形式：struct 结构体名称 *指针变量名<br>3、有了指向结构体的指针，那么就有3种访问结构体成员的方式<br>（1）、结构体变量名.成员名<br>（2）、(*指针变量名).成员名<br>（3）、指针变量名-&gt;成员名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br><span class="hljs-keyword">char</span> *name;<br><span class="hljs-keyword">int</span> age;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu</span> =</span> &#123;<span class="hljs-string">&quot;OJ&quot;</span>,<span class="hljs-number">18</span>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> *<span class="hljs-title">p</span>;</span><br>p = &amp;stu;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;name=%s,age = %d \n&quot;</span>,stu.name,stu.age);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;name=%s,age = %d \n&quot;</span>,(*p).name,(*p).age);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;name=%s,age = %d \n&quot;</span>,p-&gt;name,p-&gt;age);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2dcdef3633092072.png"></p><p>&emsp;&emsp;您可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，如下所示：</p><center> struct Books *struct_pointer;</center>&emsp;&emsp;现在，您可以在上述定义的指针变量中存储结构变量的地址。为了查找结构变量的地址，请把 & 运算符放在结构名称的前面，如下所示：<center> struct_pointer = &Book1;</center>&emsp;&emsp;为了使用指向该结构的指针访问结构的成员，您必须使用 -> 运算符，如下所示：<center> struct_pointer->title;</center><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span></span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-keyword">char</span>  title[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  author[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-keyword">int</span>   book_id;<br>&#125;;<br> <br><span class="hljs-comment">/* 函数声明 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">( struct Books *book )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span> <span class="hljs-title">Book1</span>;</span>        <span class="hljs-comment">/* 声明 Book1，类型为 Books */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span> <span class="hljs-title">Book2</span>;</span>        <span class="hljs-comment">/* 声明 Book2，类型为 Books */</span><br> <br>   <span class="hljs-comment">/* Book1 详述 */</span><br>   <span class="hljs-built_in">strcpy</span>( Book1.title, <span class="hljs-string">&quot;C Programming&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book1.author, <span class="hljs-string">&quot;Nuha Ali&quot;</span>); <br>   <span class="hljs-built_in">strcpy</span>( Book1.subject, <span class="hljs-string">&quot;C Programming Tutorial&quot;</span>);<br>   Book1.book_id = <span class="hljs-number">6495407</span>;<br> <br>   <span class="hljs-comment">/* Book2 详述 */</span><br>   <span class="hljs-built_in">strcpy</span>( Book2.title, <span class="hljs-string">&quot;Telecom Billing&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book2.author, <span class="hljs-string">&quot;Zara Ali&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book2.subject, <span class="hljs-string">&quot;Telecom Billing Tutorial&quot;</span>);<br>   Book2.book_id = <span class="hljs-number">6495700</span>;<br> <br>   <span class="hljs-comment">/* 通过传 Book1 的地址来输出 Book1 信息 */</span><br>   printBook( &amp;Book1 );<br> <br>   <span class="hljs-comment">/* 通过传 Book2 的地址来输出 Book2 信息 */</span><br>   printBook( &amp;Book2 );<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">( struct Books *book )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book title : %s\n&quot;</span>, book-&gt;title);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book author : %s\n&quot;</span>, book-&gt;author);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book subject : %s\n&quot;</span>, book-&gt;subject);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book book_id : %d\n&quot;</span>, book-&gt;book_id);<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>参考文献</p><blockquote><p><a href="http://www.runoob.com/cprogramming/c-structures.html">C 结构体| 菜鸟教程</a><br><a href="https://www.kancloud.cn/digest/clearning/149712">C语言入门教程24-结构体· C语言编程基础· 看云</a><br><a href="https://www.jianshu.com/p/11338c411bec">c语言中的关键字struct(结构体)的用法- 简书</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言作业总结</title>
    <link href="/2019/07/04/c%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9A%E6%80%BB%E7%BB%93/"/>
    <url>/2019/07/04/c%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9A%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这篇博客记录了学习c语言过程中遇到的问题，以及解决方案。很多问题都很简单，但是经常会碰到。我把这些踩过的坑记录下来，防止日后再踩。<br>&emsp;&emsp;其中也有一些掌握不太好的，主要是写代码时不太常用，再想用的时候又要去查，所以我也把这些记录下来了。<br><img src="https://i.loli.net/2019/07/04/5d1dee5dc0db071158.png" alt="图片来源于网络"></p><span id="more"></span><h1 id="switch的用法"><a href="#switch的用法" class="headerlink" title="switch的用法"></a>switch的用法</h1><p>&emsp;&emsp;switch后不能是实参，case后不能是变量</p><h2 id="整型数来选择情况"><a href="#整型数来选择情况" class="headerlink" title="整型数来选择情况"></a>整型数来选择情况</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<span class="hljs-comment">//不要忘记地址符</span><br><span class="hljs-keyword">switch</span>(n)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: 语句<span class="hljs-number">1</span>;  <span class="hljs-keyword">break</span>;<span class="hljs-comment">//如果没有特殊的要求，switch后要加break;</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: 语句<span class="hljs-number">2</span>;  <span class="hljs-keyword">break</span>;<br>       <span class="hljs-keyword">default</span>: 语句<span class="hljs-number">3</span>;<span class="hljs-comment">//default后不用break，因为已经到最后了</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="字符选择情况"><a href="#字符选择情况" class="headerlink" title="字符选择情况"></a>字符选择情况</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">char</span> c;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;c);<br><span class="hljs-keyword">switch</span>(c)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>: 语句<span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<span class="hljs-comment">//注意case后加的是 &#x27;字符&#x27;，而不是直接 字符</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>: 语句<span class="hljs-number">2</span>;<span class="hljs-keyword">break</span>;<span class="hljs-comment">//与上一个区分开</span><br><span class="hljs-keyword">default</span>: 语句<span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="取整的话，正数可以直接加0-5取整，但是负数不行"><a href="#取整的话，正数可以直接加0-5取整，但是负数不行" class="headerlink" title="取整的话，正数可以直接加0.5取整，但是负数不行"></a>取整的话，正数可以直接加0.5取整，但是负数不行</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">round_to_nearest</span><span class="hljs-params">(<span class="hljs-keyword">float</span> num)</span></span>;<span class="hljs-comment">//我喜欢先写函数，写完再复制到上面来声明</span><br><span class="hljs-comment">//int round_to_nearest(float);这个num可写可不写，只要告诉类型即可</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">float</span> num;<br>    <span class="hljs-keyword">int</span> result;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;num)!=EOF)<span class="hljs-comment">//无限次循环语句</span><br>&#123;<br>result = round_to_nearest(num);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,result);<br>&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">round_to_nearest</span><span class="hljs-params">(<span class="hljs-keyword">float</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (num&gt;=<span class="hljs-number">0</span>)                 <span class="hljs-comment">//正数取整</span><br><span class="hljs-keyword">return</span> ((<span class="hljs-keyword">int</span>)(num+<span class="hljs-number">0.5</span>));<br>  <span class="hljs-keyword">else</span>                        <span class="hljs-comment">//负数取整</span><br>  <span class="hljs-keyword">return</span> ((<span class="hljs-keyword">int</span>)(num<span class="hljs-number">-0.5</span>));    <span class="hljs-comment">//强制类型转换是(int)数，而不是int(数)</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="打印出表格的效果"><a href="#打印出表格的效果" class="headerlink" title="打印出表格的效果"></a>打印出表格的效果</h1><p>&emsp;&emsp;目前能想到的方法有两种，第一种方法是用数组处理，然后用循环把数组打印出来；第二种方法是将内容写在文件里面，然后从文件中读取打印到屏幕上。(人工手动敲出来的我就不说了，这应该是计算机做的事情，而不是人应该做的)<br>&emsp;&emsp;数组的好处在于可以直接进行处理，不需要再进行写入和读取的操作，同时也不是一个一个定义的，存储有永久性，可以随用随调。缺点就是，也算不上是缺点吧，如果数组比较多的话，可能需要用到结构，那么写的代码行数自然就多了，而且自己可能还弄不明白，绕来绕去就糊涂了。<br>&emsp;&emsp;文件的好处在于简单，也就是做完一步就可以把想显示的内容写到文件当中，只需要最后去按行读取、打印就可以了。（文件的读取有一个函数，会在后面写出来）</p><h1 id="循环和递归"><a href="#循环和递归" class="headerlink" title="循环和递归"></a>循环和递归</h1><p>&emsp;&emsp;如果能用循环解决问题就不要用递归解决，递归耗内存，耗时间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">intergerPower2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> base,<span class="hljs-keyword">int</span> exponent)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> base,exponent,result;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;base,&amp;exponent)!=EOF)<br>    &#123;<br>    result = intergerPower2(base,exponent);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,result);<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">intergerPower2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> base,<span class="hljs-keyword">int</span> exponent)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> result2=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(exponent&lt;=<span class="hljs-number">0</span>)<span class="hljs-comment">//或者是</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//if(exponent&lt;=1)</span><br>    <span class="hljs-comment">//return base;</span><br>    <span class="hljs-keyword">return</span> base*intergerPower2(base,exponent<span class="hljs-number">-1</span>);<br>  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;递归的基本形式。</p><h1 id="循环中gets会吃上一次的回车"><a href="#循环中gets会吃上一次的回车" class="headerlink" title="循环中gets会吃上一次的回车"></a>循环中gets会吃上一次的回车</h1><p>&ensp;&ensp;Write a program that enters 5 names of towns and their respective distance (an integer) from London in miles. The program will print of the names of the towns that are less than 100 miles from London. Use arrays and character strings to implement your program.<br>&emsp;&emsp;例如在这题中，如果你考虑城市的名称中有空格的存在，那么你就不应该用sacnf去读取城市的名称，你应该用gets去读取。但是gets会把回车吃掉。举个例子。如果你这么写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">less100</span><span class="hljs-params">(<span class="hljs-keyword">int</span> miles)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">10000</span>];<br><span class="hljs-keyword">int</span> distance[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> i,a=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Enter Name : &quot;</span>);<br>gets(name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Enter the distance:&quot;</span>); <br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;distance[i]);<br>a = less100(distance[i]);<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s is less than 100 miles from London\n\n&quot;</span>,name);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">less100</span><span class="hljs-params">(<span class="hljs-keyword">int</span> miles)</span></span>&#123;<br><span class="hljs-keyword">if</span> (miles &lt; <span class="hljs-number">100</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/04/5d1de9dda5f6647120.png"><br>&emsp;&emsp;效果是这个样子的，原因是上一次的回车停留在缓冲区，下一次输入敲回车，得到的是上次的回车，会有错位的情况，所以解决问题的方法是清除缓冲区[fflush(stdin);]stdin就是键盘。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">less100</span><span class="hljs-params">(<span class="hljs-keyword">int</span> miles)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">10000</span>];<br><span class="hljs-keyword">int</span> distance[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> i,a=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Enter Name : &quot;</span>);<br>gets(name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>fflush(<span class="hljs-built_in">stdin</span>);   <span class="hljs-comment">//清空缓冲区</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Enter The Distance From London : &quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;distance[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>fflush(<span class="hljs-built_in">stdin</span>);   <span class="hljs-comment">//清空缓冲区</span><br>a = less100(distance[i]);<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n\n&quot;</span>,name);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">less100</span><span class="hljs-params">(<span class="hljs-keyword">int</span> miles)</span></span>&#123;<br><span class="hljs-keyword">if</span> (miles &lt; <span class="hljs-number">100</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="函数回传指针"><a href="#函数回传指针" class="headerlink" title="函数回传指针"></a>函数回传指针</h1><p>&emsp;&emsp;如果函数的返回值是一个指针的话，同时要进行多次循环调用函数的话，如果没有把指针定义成数组的形式，是无法进行整体输出的。需要在每次调用完函数之后进行输出，也就是所谓的释放空间。如果定义成数组的形式，可以回传整个指针(或者说是数组)，然后用循环整体打印。<br>&emsp;&emsp;回传的如果是数组，打印的话不能写成printf(“%d”,p);而应该是printf(“%d”,p[0]);这是读取数组里的第一个元素，依次类推。如果是printf(“%d”,p);显示的则是p数组的地址，而不是数值。</p><h1 id="关于字符串"><a href="#关于字符串" class="headerlink" title="关于字符串"></a>关于字符串</h1><p>&emsp;&emsp;可以说字符串就是数组，数组就是字符串。如果想定义二维数组的字符串可以像这样定义char string[5][10000]; string[0]就是第一个字符串，string[1]是第二个字符串，依次类推到string[4]，长度均为10000。<br>&emsp;&emsp;还有就是strlen和sizeof的区别，由于字符串都会以”\0”结尾，所以真实长度比你输入的长度多1。例如字符串’Happy’的长度为6，分别为 H a p p y \0 。 所以如果用strlen取字符串长度会得到5，也就是不会读取 \0 ， 但是如果用sizeof会得到6 ， 也就是算上了\0。 使用时要格外注意。</p><h1 id="读取数组的四种方法"><a href="#读取数组的四种方法" class="headerlink" title="读取数组的四种方法"></a>读取数组的四种方法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> num1[<span class="hljs-number">5</span>],num2[<span class="hljs-number">5</span>],i;<br><span class="hljs-keyword">int</span> *p=num2;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num1[i]);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>num2[i]=num1[<span class="hljs-number">4</span>-i];<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,num2[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(num2+i));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(p+i));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,p[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;可以看出，数组和指针是一个东西。<del>而且读取很方便，想读谁就可以直接读取。</del>我才不会主动用指针写程序呢。</p><h1 id="检验字符串是否合法"><a href="#检验字符串是否合法" class="headerlink" title="检验字符串是否合法"></a>检验字符串是否合法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//Check if the input is valid</span><br><span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Enter Your ID Number:&quot;</span>);<br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-keyword">if</span>(k&gt;<span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Your ID Number Includes 2 Letters and 4 Digits:&quot;</span>);<br>k++;<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,ID);<br>&#125;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">strlen</span>(ID)!=<span class="hljs-number">6</span>||valid(ID)!=<span class="hljs-number">1</span>);<span class="hljs-comment">//If the length is not 6, it will ask to put again, and the speed will be fast</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">valid</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *<span class="hljs-built_in">string</span>)</span></span>&#123;<br><span class="hljs-keyword">int</span> i,letter=<span class="hljs-number">0</span>,number=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>((<span class="hljs-built_in">string</span>[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; <span class="hljs-built_in">string</span>[i]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>) || (<span class="hljs-built_in">string</span>[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; <span class="hljs-built_in">string</span>[i]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>))<span class="hljs-comment">//How many letters</span><br>letter+=<span class="hljs-number">1</span>;<br>&#125;<br> <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;<span class="hljs-number">6</span>;i++)<br> &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">string</span>[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; <span class="hljs-built_in">string</span>[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<span class="hljs-comment">//How many numbers</span><br>number+=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(letter == <span class="hljs-number">2</span> &amp;&amp; number == <span class="hljs-number">4</span>)<span class="hljs-comment">//If the string is valid, return 1</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//If it is invalid, return 0</span><br>&#125; <br><br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;检验字符串的合法性，先检验长度是否满足，如果长度不满足，直接判断为不合法，可以加快判断速度。因为计算机做判断和循环是很浪费时间的。所以先判断字符串长度是否符合可以加快程序运行的速度。<br>&emsp;&emsp;还有就是如果输入错误的话，让用户重新输入的提示，可以用一个判断来进行，让第二次的显示不同于第一次，如果可以的话，还可以告诉用户到底是哪里输入错误，还有怎么输入才是正确的。</p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="文件使用"><a href="#文件使用" class="headerlink" title="文件使用"></a>文件使用</h2><p>&emsp;&emsp;需要先定义文件  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *tset<br><span class="hljs-keyword">if</span>( (test=fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)) == <span class="hljs-literal">NULL</span> )&#123;<br>       perror(<span class="hljs-string">&quot;test.txt&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br> &#125;<br> <br></code></pre></td></tr></table></figure><p>w写入，但如果之前有会把之前的清空<br>a追加，在文件的最后写入，不会把之前的清空<br>r读取。<br>w+,r+,a+,表示之前的功能都有，也可以写入<br>带b的就是以二进制的形式对文件进行操作</p><h2 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *record;<br>readfile(record);<span class="hljs-comment">//调用函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">readfile</span><span class="hljs-params">(FILE *record)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> *str1,*ptr;<br><span class="hljs-keyword">char</span> *res[<span class="hljs-number">999</span>];<br><span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<br>FILE *pFile;<br><span class="hljs-keyword">char</span> mystring[<span class="hljs-number">1000</span>];<br>pFile = fopen(<span class="hljs-string">&quot;record.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (pFile == <span class="hljs-literal">NULL</span>)<br>        perror (<span class="hljs-string">&quot;Error opening file&quot;</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">while</span> (fgets (mystring , <span class="hljs-number">100</span> , pFile) != <span class="hljs-literal">NULL</span> )<span class="hljs-comment">//读取长度为100</span><br>            &#123;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(mystring);<span class="hljs-comment">//Read the record.tet by line</span><br><span class="hljs-keyword">if</span>(mystring[len<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;\n&#x27;</span>)<span class="hljs-comment">//Think of a line as a string</span><br>  mystring[len<span class="hljs-number">-1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<span class="hljs-comment">//按行读取</span><br><br><span class="hljs-keyword">char</span>* tmp = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<br>            <span class="hljs-built_in">memcpy</span>(tmp,mystring,len);<span class="hljs-comment">//usage memcpy(dest, src, strlen(src)); </span><br>            res[p++] = tmp;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;p;i++)<span class="hljs-comment">//如果想打印文件，可以直接printf(&quot;%s&quot;,res[i]);</span><br>&#123;<br>ptr = <span class="hljs-built_in">strstr</span>(res[i],ID);<br><span class="hljs-comment">//strstr用来判断前面的字符串是否包含后面字符串的内容。</span><br>&#125;<span class="hljs-comment">//Determine whether the string containing the ID</span><br><span class="hljs-keyword">if</span>( ptr != <span class="hljs-literal">NULL</span> )<span class="hljs-comment">//If it does contain the string of ID </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,ptr);<span class="hljs-comment">//Printf the string</span><br>&#125;<br>        fclose (pFile);<span class="hljs-comment">//Close the file </span><br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;文件使用前要打开，使用后要关闭，可以的话可以清空缓冲区，并把指针调回。</p><h1 id="精准计时"><a href="#精准计时" class="headerlink" title="精准计时"></a>精准计时</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">clock_t</span> start, finish;<br><span class="hljs-keyword">double</span> duration;<br>start = clock();<br><span class="hljs-comment">//把需要进行计时的部分放到这里</span><br>finish= clock();<br>duration = (<span class="hljs-keyword">double</span>)(finish- start) / CLOCKS_PER_SEC;<br><span class="hljs-comment">//这个用的是处理器的时间计时，所以要除以1s的处理器时间(CLOCKS_PER_SEC)</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The time is %.2lfs.\n&quot;</span>,duration);<span class="hljs-comment">//一般秒就保留到两位小数就可以了。</span><br></code></pre></td></tr></table></figure><h1 id="如何产生真正的随机数，随机并且平均"><a href="#如何产生真正的随机数，随机并且平均" class="headerlink" title="如何产生真正的随机数，随机并且平均"></a>如何产生真正的随机数，随机并且平均</h1><p>&emsp;&emsp;随机数的产生依赖种子，一般就是用时间的不同显示种子的不同。我们不用秒作为种子，用更精细的clock(),也就是srand((unsigned)clock());<br>&emsp;&emsp;比如大作业的十个算术题，要加减乘除每个最少两次，最多三次怎么做到呢？<br>&emsp;&emsp;可以让前八个题每种算法都只出现两次，后两个只要是不同的就行。<br>&emsp;&emsp;用循环和判断来解决这个问题。比如加法，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> add=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>；i&lt;<span class="hljs-number">8</span>;i++)<br><span class="hljs-keyword">if</span>(add&lt;<span class="hljs-number">2</span>)<br>&#123;<br>进行加法运算;<br>i++;<br>add++;<br>&#125;<br><span class="hljs-keyword">else</span><br>i--;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;如果要用switch来选择，那么应该每个后面加一个break; 注意区分break和continue的区别，break是停止，是跳出，而且只能跳出一层，不可以直接都跳出来。continue是结束本次循环，重新进行循环是否满足条件的判断，满足就进行，不满足就不进行，而不是直接开始下次循环。也帮有的同学看过代码，出现的问题就是还没有确定满足能输出的条件呢，就add++了，所以最后出来的题的数目一定会小于10道。同时也有后面的问题，就是最后两次的判断条件是if(add&lt;1)后面的都一样，出来的结果肯定是只有八个题，因为前面已经加减乘除的计数都到2了，所以小于1是不可能的，程序就会出现想卡出一样的情况。<br>&emsp;&emsp;这个i- -用的很巧妙，简而言之就是如果不行，这次循环大家就当无事发生，重新来过。</p><h1 id="while-的循环"><a href="#while-的循环" class="headerlink" title="while 的循环"></a>while 的循环</h1><p>&emsp;&emsp;如果想用while一直循环，可以直接写while(1){运行语句}就可以了，虽然老师说这就是个死程序，但是你可以中间添加break; 来实现你的目的，等到用户输入一个特定的值的时候，你就break跳出循环，十分的方便。顺便提一句，想把内容调回开头可以用goto语法，但是不是很推荐，有兴趣的可以自己了解。<br>&emsp;&emsp;如果你想一直输入无限个数，就用while(scanf(“%d”,&amp;num)){运行语句}。如果是想输入有限个数,可以定义有几个数n，然后用for循环，个人觉得for循环可以解决循环80%的问题，剩下的20%是用while，极少数用do-while，就是判断合法性的时候用一下do-while。for可以代替while和do-while，就是用的时候看起来不太美观。不要为了使用某个语句而用某个语句，而是你觉得就应该用它，你就用它，自己看着怎么舒服怎么来。<br>&emsp;&emsp;同时如果while循环一个大的整体的时候，需要考虑下一次的把上一次的该清零的清零，该重置的重置，不然会影响程序的运行。并不是简单的三行代码就能实现完美循环，还要不断的调试、优化。</p>]]></content>
    
    
    <categories>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Exercise 10:Pointers（修改一次）</title>
    <link href="/2019/05/27/EX10/"/>
    <url>/2019/05/27/EX10/</url>
    
    <content type="html"><![CDATA[<center> 站在巅峰才能看到最美的风景！ Happy Coding!!!</center><p><img src="https://i.loli.net/2019/05/27/5cebecd724a4f64612.jpeg"></p><span id="more"></span><p>&emsp;&emsp;<strong>闲聊两句。</strong><br>&emsp;&emsp;<strong>也没什么想说的，就不说了。</strong></p><ol><li>Write a program that reads 5 integers into an array, and then uses four different methods of accessing the members of an array to print them out in reverse order.</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> num1[<span class="hljs-number">5</span>],num2[<span class="hljs-number">5</span>],i;<br><span class="hljs-keyword">int</span> *p=num2;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num1[i]);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>num2[i]=num1[<span class="hljs-number">4</span>-i];<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,num2[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(p+i));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(num2+i));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,p[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li><p>Write a program that reads 8 floats into an array and then prints out the second, fourth, sixth and eighth members of the array, and the sum of the first, third, fifth and seventh, using pointers to access the members of the array.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">float</span> num[<span class="hljs-number">8</span>],*p=num,sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;num[i]);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">8</span>;i=i+<span class="hljs-number">2</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f &quot;</span>,*(p+i));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i=i+<span class="hljs-number">2</span>)<br>sum+=*(p+i);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,sum);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>Write a program that use a SINGLE FUNCTION （用一个函数）to find and return simultaneously both the lowest and highest values in an array of type int. Suppose the size of the array is 6. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//哈哈哈，这么写不知道老师会不会打我  ╮(╯▽╰)╭</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *num,<span class="hljs-keyword">int</span> a)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> num[<span class="hljs-number">6</span>],i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The lowest  values in an array is %d.\n&quot;</span>,find(num,<span class="hljs-number">1</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The highest values in an array is %d.\n&quot;</span>,find(num,<span class="hljs-number">0</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *num,<span class="hljs-keyword">int</span> a)</span></span>&#123;<br><span class="hljs-keyword">int</span> max=num[<span class="hljs-number">0</span>],min=num[<span class="hljs-number">0</span>],i;<br><span class="hljs-keyword">if</span>(a==<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(max&lt;num[i])<br>max=num[i];<br>&#125;<br><span class="hljs-keyword">return</span> max;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(min&gt;num[i])<br>min=num[i];<br>&#125;<br><span class="hljs-keyword">return</span> min;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><center>↓↓下面这个是认真的↓↓</center></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* num)</span></span>;<br><span class="hljs-keyword">int</span> result[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> *p = result;<br><span class="hljs-comment">//int *p and result are globel variable, or it will warning. </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> num[<span class="hljs-number">6</span>],i,max,min;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num[i]);<br>find(num);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The highest values in an array is %d.\n&quot;</span>,p[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The lowest  values in an array is %d.\n&quot;</span>,p[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">//The print cannot be p, it should be for(i=0;i&lt;2;i++)  &#123;printf(&quot;%d &quot;,*(p+i));&#125;</span><br><span class="hljs-comment">//But you cannot print some different sentence each time.</span><br><span class="hljs-comment">//Or like what I write.</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* num)</span></span>&#123;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)<br>result[i]=num[<span class="hljs-number">0</span>];<br> <span class="hljs-comment">//You must write this, or if you put all positive integers, the lowest number is 0.</span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(result[<span class="hljs-number">0</span>]&lt;num[i])<br>result[<span class="hljs-number">0</span>]=num[i];  <span class="hljs-comment">//result[0] is the highest number.</span><br><span class="hljs-keyword">if</span>(result[<span class="hljs-number">1</span>]&gt;num[i])<br>result[<span class="hljs-number">1</span>]=num[i];  <span class="hljs-comment">//result[1] is the lowest number.</span><br>&#125;<br><span class="hljs-keyword">return</span> p;  <span class="hljs-comment">// We have known p is pointer, so we don&#x27;t need write it as *p.</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言作业EX08&amp;EX09（修改一次，解决gets会吃上一个\n的问题）</title>
    <link href="/2019/05/20/C%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9AEX08-EX09/"/>
    <url>/2019/05/20/C%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9AEX08-EX09/</url>
    
    <content type="html"><![CDATA[<p>这就是编程的颜色！<br><img src="https://i.loli.net/2019/05/20/5ce1fcc16727469118.png"></p><span id="more"></span><h1 id="Exercise-8-Arrays"><a href="#Exercise-8-Arrays" class="headerlink" title="Exercise 8:  Arrays"></a>Exercise 8:  Arrays</h1><p>(这个太简单就不写注释了)</p><ol><li><p>   Write a program that reads ten numbers supplied by the user into a single subscripted array, and then prints out the average of them.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br><span class="hljs-keyword">float</span> sum=<span class="hljs-number">0</span>,num[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Enter Ten Numbers:&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;num[i]);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>sum+=num[i];<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The average of them is %f&quot;</span>,sum/<span class="hljs-number">10</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Write a program that reads ten numbers supplied by the user into a 2 by 5 array, and then prints out the maximum and minimum values held in:<br> (a) each row (2 rows)<br> (b) the whole array</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">float</span> nums[<span class="hljs-number">2</span>][<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> i,j;<br><span class="hljs-keyword">float</span> maxrow1=<span class="hljs-number">0</span>,minrow1=<span class="hljs-number">0</span>,maxrow2=<span class="hljs-number">0</span>,minrow2=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">2</span>;j++)<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;nums[j][i]);<br>maxrow1=minrow1=nums[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>maxrow2=minrow2=nums[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(maxrow1&lt;nums[<span class="hljs-number">0</span>][i])<br>maxrow1=nums[<span class="hljs-number">0</span>][i];<br><span class="hljs-keyword">if</span>(maxrow2&lt;nums[<span class="hljs-number">1</span>][i])<br>maxrow2=nums[<span class="hljs-number">1</span>][i];<br><span class="hljs-keyword">if</span>(minrow1&gt;nums[<span class="hljs-number">0</span>][i])<br>minrow1=nums[<span class="hljs-number">0</span>][i];<br><span class="hljs-keyword">if</span>(minrow2&gt;nums[<span class="hljs-number">1</span>][i])<br>minrow2=nums[<span class="hljs-number">1</span>][i];<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The maximun and minimun of the value in row one are:&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f %f\n&quot;</span>,maxrow1,minrow1);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The maximun and minimun of the value in row two are:&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f %f\n&quot;</span>,maxrow2,minrow2);<span class="hljs-comment">//这个是(a)</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The maximum of the whole array is: &quot;</span>);<br><span class="hljs-keyword">if</span>(maxrow1&gt;=maxrow2)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f&quot;</span>,maxrow1);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f&quot;</span>,maxrow2);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nThe minimum of the whole array is: &quot;</span>);<br><span class="hljs-keyword">if</span>(minrow1&gt;=minrow2)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f&quot;</span>,minrow2);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f&quot;</span>,minrow1);<span class="hljs-comment">//这个是(b)</span><br><span class="hljs-comment">//不知道是分开写还是合着写</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>3．    Use a single-subscripted array to solve the following problem. Read in 20 numbers, each of which is between 10 and 100, inclusive. As each number is read, print it only if it is not a duplicate of a number already read. Prepare for the “worst case” in which all 20 numbers are different. Use the smallest possible array to solve this problem.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">int</span> nums[<span class="hljs-number">20</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">repeat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)<br>&#123;<br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nPlease Enter 20 integer Numbers between 10 and 100:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;nums[i]);<br>&#125;<span class="hljs-keyword">while</span>(nums[i]&gt;<span class="hljs-number">100</span>||nums[i]&lt;<span class="hljs-number">10</span>);<br>a = repeat(nums[i]);<br><span class="hljs-keyword">if</span>(a==<span class="hljs-number">1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,nums[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">repeat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span></span>&#123;<br><span class="hljs-keyword">int</span> j;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;i;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(num==nums[j])<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h1 id="Exercise-9-More-Arrays-–-String"><a href="#Exercise-9-More-Arrays-–-String" class="headerlink" title="Exercise 9:  More Arrays – String"></a>Exercise 9:  More Arrays – String</h1><ol><li>   Write a program that enters 5 names of towns and their respective distance (an integer) from London in miles. The program will print of the names of the towns that are less than 100 miles from London. Use arrays and character strings to implement your program.<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">less100</span><span class="hljs-params">(<span class="hljs-keyword">int</span> miles)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">10000</span>];<br><span class="hljs-keyword">int</span> distance[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> i,a=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Enter Name And Distance From London Respectively: &quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d&quot;</span>,&amp;name,&amp;distance[i]);<br>a = less100(distance[i]);<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s is less than 100 miles from London\n\n&quot;</span>,name);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">less100</span><span class="hljs-params">(<span class="hljs-keyword">int</span> miles)</span></span>&#123;<br><span class="hljs-keyword">if</span> (miles &lt; <span class="hljs-number">100</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//如果城镇中有空格的存在，这个可以读取，但是上一个不行</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">less100</span><span class="hljs-params">(<span class="hljs-keyword">int</span> miles)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">10000</span>];<br><span class="hljs-keyword">int</span> distance[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> i,a=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Enter Name : &quot;</span>);<br>gets(name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>fflush(<span class="hljs-built_in">stdin</span>);   <span class="hljs-comment">//清空缓冲区</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Enter The Distance From London : &quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;distance[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>fflush(<span class="hljs-built_in">stdin</span>);   <span class="hljs-comment">//清空缓冲区</span><br>a = less100(distance[i]);<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n\n&quot;</span>,name);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">less100</span><span class="hljs-params">(<span class="hljs-keyword">int</span> miles)</span></span>&#123;<br><span class="hljs-keyword">if</span> (miles &lt; <span class="hljs-number">100</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>   Write a program that prompts the user to type in four character strings, places these in an array of strings, and then prints out: (e.g. I am Peter Pan)</li></ol><pre><code>(i) The four strings in reverse order. (e.g. Pan Peter am I)</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> strings1[<span class="hljs-number">100</span>],strings2[<span class="hljs-number">100</span>],strings3[<span class="hljs-number">100</span>],strings4[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please type in four character strings\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s %s %s&quot;</span>,&amp;strings1,&amp;strings2,&amp;strings3,&amp;strings4);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %s %s %s\n&quot;</span>,strings4,strings3,strings2,strings1);<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><pre><code>(ii) The four strings in the original order, but with each string backwards. (e.g. I ma reteP naP)</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">//取长度的函数strlen需要用到这个头文件</span><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">rev</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *<span class="hljs-built_in">string</span>)</span></span>;<br><span class="hljs-keyword">char</span> result[<span class="hljs-number">100</span>];<span class="hljs-comment">//定义result为全局变量</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">char</span> <span class="hljs-built_in">string</span>[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please type in four character strings\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,&amp;<span class="hljs-built_in">string</span>);<br>rev(<span class="hljs-built_in">string</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>,result);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">rev</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str)</span></span>&#123;<br><span class="hljs-comment">//注意定义为地址，用指针回传，但是要回传一次就输出，无法储存后再整体输出</span><br><span class="hljs-keyword">int</span> len,i;<br>len = <span class="hljs-built_in">strlen</span>(str);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>result[i]=str[len-i<span class="hljs-number">-1</span>];<br>result[i]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br></code></pre></td></tr></table></figure><pre><code>(iii) The four strings in reverse order with each string backwards. (e.g. naP reteP ma I)</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">//这个写的有点啰嗦</span><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">rev</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *<span class="hljs-built_in">string</span>)</span></span>;<br><span class="hljs-keyword">char</span> result[<span class="hljs-number">100</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">char</span> string1[<span class="hljs-number">100</span>],string2[<span class="hljs-number">100</span>],string3[<span class="hljs-number">100</span>],string4[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">char</span> *a,*b,*c,*d;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please type in four character strings\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s %s %s&quot;</span>,&amp;string1,&amp;string2,&amp;string3,&amp;string4);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>,rev(string4));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>,rev(string3));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>,rev(string2));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,rev(string1));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">rev</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* str)</span></span>&#123;<br><span class="hljs-keyword">int</span> len,i;<br>len = <span class="hljs-built_in">strlen</span>(str);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>result[i]=str[len-i<span class="hljs-number">-1</span>];<br>result[i]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br><span class="hljs-keyword">return</span> result;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">//这个我比较喜欢</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> result[<span class="hljs-number">100</span>],str[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">int</span> len,i;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please type in four character strings :&quot;</span>);<br>gets(str);<br>len = <span class="hljs-built_in">strlen</span>(str);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>result[i]=str[len-i<span class="hljs-number">-1</span>];<br>result[i]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br><span class="hljs-built_in">puts</span>(result);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么写博客及本人随笔</title>
    <link href="/2019/05/11/%E2%80%9C%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%99%E5%8D%9A%E5%AE%A2%E2%80%9D/"/>
    <url>/2019/05/11/%E2%80%9C%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%99%E5%8D%9A%E5%AE%A2%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<center>我有两个我</br>一个我叫李文轩</br>一个我叫李东升</br></center><span id="more"></span><hr><h1 id="本学期最后一篇博客"><a href="#本学期最后一篇博客" class="headerlink" title="本学期最后一篇博客"></a>本学期最后一篇博客</h1><h1 id="为什么写博客"><a href="#为什么写博客" class="headerlink" title="为什么写博客"></a>为什么写博客</h1><p>&emsp;&emsp;为什么我打算写博客呢？在开博的第一篇文章我就说了一部分了，接下来是我对这个问题的具体些的回答。<br>&emsp;&emsp;首先，我对程序员这个职业比较感兴趣吧，虽然学的专业是电信工程，但是还是对计算机比较的感兴趣，但是电信工程我也不烦。如果说专业学物联网，软件工程等等，估计时间久了就会对其产生厌倦，倒不如自己主业学一个别的，然后去自学编程，做自己想做的。学校的资源也都挺好，挺方便。因此，写程序会有源码，我想要存放这些源码的话，不是放在Github上，就是写个博客存放。博客的存放更加直观些，毕竟写的不长。如果用Github可能有的人不会用，再去学习用Github可能又要花费一些时间，对各位观众不是很方便。况且，自己是个喜欢弄技术的，说没个自己的网站，也说不过去啊。<br>&emsp;&emsp;再者，现在已经进入Web3.0时代，不再像之前那样的单一，只有报纸，电视等信息，人人都可以在互联网上发表自己的看法。典型的代表有微博，朋友圈等。但是为什么我决定写博客呢？首先，微博的内容大都很短，写长的话很少有人能耐下心来读完（博客写长了也没几个人看），如果想要说清楚一件事情的话，说的太短很容易说不清，说不明白。博客也会出现这样的问题，但是博客可以不断地连着更新，一次写一部分，最终把需要的说清楚。<br>&emsp;&emsp;这里我想插一句。以下是本人的亲身经历所得，如果你想要说服一个人接受你的观点，或者你为了使自己的观点更加有力。无论你是出于帮助他人的目的，还是说有别的什么的想法。首先你要陈述清楚你的观点，把自己想要表达的表达清楚，是什么，还是该怎么做。然后，说能支撑你观点的理由，或者是举出例子来。不要别人问你为什么，你就说我就觉得应该是这个样子。这实际上是你对你自己的观点（论题）的陈述，并不能支撑你的观点，也不是别人想听的答案。如果你想帮助某个人，最好还是告诉Ta为什么这么做，不然可能你的好心人家并不觉得对。或者Ta还是坚持着自己的想法，你知道是错的，但是等事情发生了之后你再告诉Ta，你跟Ta说，怎么不早听我的？这就完全没有意义了，也根本不是帮助他人的最好的办法，反而会有火上浇油的情况发生。举例子这个能让别人从中知道这么做可能会有什么后果，或者是效果。对于可能会出现坏的情况的事情，举例子是不二的选择。也能让在迷茫中的人迅速找到方向。<br>&emsp;&emsp;我是一个比较善于分享的人，博客就提供了一个很好的平台。大概两个星期前在图书馆偶然拾得《超越自卑》这本书，其中说到人的价值在于自己奉献了多少。也就是自己对别人产生了多大的影响，而不是自己怎么怎么样。当然有的人会说，人不应该是为自己而活吗？确实应该是为自己而活，但是也要尽自己最大的努力帮助别人。一个人能否被历史铭记，绝对不是他自己怎么样，而是他对整个社会，人类做出了贡献。当然这个高度不是我能达到的，我能做的就是尽我的能力帮助身边的人，让社会少一分冷漠。我曾说过：我不会再让一个人在我眼前受到伤害的时候冷眼旁观。但是我的能力也是有限的，有的事情确实是管不了，确实没那个能力，也没有那个身份。<br>&emsp;&emsp;不过在问问题的时候也要注意，不要什么东西都伸手张口就要。问问题之前要经过大脑，不要什么都问。自己的问题是不是能在搜索引擎上解决，如果能，那么就自己动手解决。问的问题是否有意义，如果这个答案谁都不知道，那么就别人。问的问题的低劣是对回答者时间的一种浪费，每个人的时间都是宝贵的，不要什么事情都去麻烦别人，自己能解决就自己解决，不能解决的再去求助别人，同时要注意语气和态度的诚恳。要表明自己虚心请教的，而不是过来吵架的。如果吵起来，那么就不要再问了。<br>&emsp;&emsp;再者，这个博客，或者说是这个网站就是我自己的。不是别人能随意修改、删除、屏蔽、抹杀的。这个博客是我的就是我的，别人拿也拿不去，抢也抢不走。而且还可以对博客进行高度的定制，有什么自己想加的样式、功能，我可以自己添上，有什么看着不顺眼的，我也可以修改的。你能看到的每一个部分，都是我自己精心设计的。主要还是PC端，安卓的登陆还好，但是苹果登陆的时候不知道背景怎么就填不满整个内容。这个是真的无能为力了，还是推荐PC端访问，毕竟读文章我还是更喜欢在电脑，看的还是比手机舒服。<br>&emsp;&emsp;还有就是写什么的问题，还是写一些时效性比较长的东西吧。什么是时效性呢，就是它存在的意义有多长时间。就拿我的C语言作业这篇来说吧，存在的意义就在我写了之后和交作业之前，等交完作业这篇博客的意义基本也就到头了，还有这个军事理论的答案也是。我不是太爱弄这个，但是弄弄也无妨，毕竟不像写这种长篇的博客这样费时间。顶多也就半个小时，我就能弄完。<br>&emsp;&emsp;最后，想说说本博客的“念念不忘，必有回响”。这句话有很多种意思，可能每个人有每个人的理解。我在这只解释我博客上写的这个“念念不忘，必有回响”的意思，只要信念一直在，就总有被回应的一天，哪怕现在无人理解，终有会有被人理解的一天。博客本来看的人就少，不被理解更是常事，所以更有必要去坚持这件事情。我这个人做事，只要是认准了的事，就会一直做下去。至于写到什么时候结束呢？只要还有一个人看，我就会继续写下去的。</p><hr><h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><p>&emsp;&emsp;最近挺忙的，复习准备考试，还有思考一些平常的琐事。人的精力是有限的，放在一部分事上另一部分就必然无法顾及，不求各个都做好（基本上这么做是一个都做不好），但是还是要努力把当下的事情做好，不要做着这个事想着那个事。<br>&emsp;&emsp;那天我想明白了为什么随着年纪的增长，人就会越来的稳重，就越不愿意多说话。其实并不是年纪，而是心理年纪。或许这就是大人的世界吧，可能有些事情你不必说，你说了别人也不懂，可能对你来说天大的事情，在别人的眼中不值一提。没有人喜欢去听别人的苦衷，要学会自我治愈。有句话是这么说的：每一个强大的人，可能都曾咬着牙度过一段没人帮忙、没人支持、没人嘘寒问暖的日子。过去了，这就是你的成人礼；过不去，求饶了，这就是你的无底洞。每个人都终将要学会独当一面，这样无论今后遇到什么困难挫折，都不会显得那么无助。我到不太喜欢进入大人的世界，感觉没有什么快乐，都是压力，整天为家庭奔波，再累再苦也只有自己知道吧。如此平常嘻嘻哈哈的单纯和快乐也是显得难得可贵。<br>&emsp;&emsp;如果说现在的我和之前的我有什么不同，我说可能是，原来只是在脑中想想就完了，现在是想想之后要去做，不只是想想。“困于心，衡于虑，而后作。征于色，发于声，而后喻。”这十八个字虽然简单，但是我觉得真正的想要做到还是有难度的。之前的我是困于心，衡于虑，只是去想想某个事情该如何处理，觉得自己想完了，自己想通了，事情也就解决了。但事实是，你不去做，和你不去想，达到的效果相同。<br>&emsp;&emsp;我这个人比较喜欢想事情，就是翻过来调过去的想事情，很想把事情考虑全面，防止出现有自己没有考虑到的情况或者是事情发生。即使有的人告诉我了答案，我也会去想，为什么是这个样子的，怎么会这样？如果你看到我没有看着手机，而是静静的坐着，这种情况基本上就是在思考，你也不要问我在想什么，问就是发呆。其实我最近也挺喜欢发呆的，毕竟发呆的时候整个人都很放松，感觉没有平常的那种劳累，就像是睡觉的时候灵魂出窍一样，可以获得短暂的休息，忘记现实中的烦恼。发呆也一样，不过就是短了些而已。<br>&emsp;&emsp;想完了事情当然就是做，我是个急性子，还有点强迫症。对于事情这种事，能少放在心上就少放在心上，放在心上就会时不时的想起来，发现有什么好像没做，就会导致对现在做的事情有些仓促。以后要改掉这样的毛病，我感觉急性子比慢性子要好，但是有些事情是急不得的，急也没有用。<br>&emsp;&emsp;这个世界上有没什么速成，如果有的话，那绝对是骗人的。其实想想也是如果能速成，那么人人都能速成了，那么这件事情的意义反正就没那么大了。成果都是需要时间的积累的，没有人能一蹴而就。有了想法，想清楚了，就要去做。要敢于去做，不要太担心结果是什么。毕竟如果你要知道结果，那么完成这件事情的结果也就理所当然，但生活因为各种不确定而丰富多彩。每个人都期望想提前得到最终的答案，但是过程往往比结果更加的重要，付出的值得不值得也只有在最后才知道。如果说有确定和不确定的两种人生，我更想去选确定的人生，但是我最终的选择一定是不确定的人生。一眼望到头的人生就会发现生活的意义不是特别大。每个人都无法逃脱自己内心的抉择，你做出的选择不一定是你想做出的选择，但是一定是你内心想做出的选择。不问结果，过程中的酸甜苦辣才是最应该珍惜的。<br>&emsp;&emsp;怕，就什么都别做，反正不做什么都不会有。人生有太多的不确定，而且明知失败的概率很大也要去做吗？我说至少做了就有成功的可能，不做就是肯定失败的。不过你要考虑好失败的后果，如果是去面试，那么失败了也没有什么，你什么也没有失去。但是如果是其他的事情，最好还是考虑清楚之后再做，不要为自己一时的冲动而冲昏头脑，什么事情都是一拍脑子就做，这种人我建议还是不要做的好，有的时候做过了不如不做的好。</p><h1 id="最近还有更重要的事情去做，博客就停更了。-勿念，有事去现实中找我。"><a href="#最近还有更重要的事情去做，博客就停更了。-勿念，有事去现实中找我。" class="headerlink" title="最近还有更重要的事情去做，博客就停更了。 勿念，有事去现实中找我。"></a><strong>最近还有更重要的事情去做，博客就停更了。 勿念，有事去现实中找我。</strong></h1>]]></content>
    
    
    <categories>
      
      <category>基本框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>关于本博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>军事理论-综合版 答案</title>
    <link href="/2019/05/07/%E5%86%9B%E4%BA%8B%E7%90%86%E8%AE%BA%E7%AD%94%E6%A1%88/"/>
    <url>/2019/05/07/%E5%86%9B%E4%BA%8B%E7%90%86%E8%AE%BA%E7%AD%94%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>这个答案不是随随便便就能找到的 <del>我花钱买的</del><br>我不希望有人拿这个去卖钱，那不是互联网的精神。<br>人生因分享和自由而精彩。<br>Life is ornamented with Sharing and Liberty.<br><img src="https://i.loli.net/2019/05/07/5cd0eb68cba03.jpeg"></p><span id="more"></span><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p>1<br>【单选题】 (20分)<br>公元13世纪上半叶征服基辅罗斯的游牧帝国是（A）。<br>A、蒙古帝国<br>B、阿拉伯帝国<br>C、突厥帝国<br>D、奥斯曼土耳其帝国<br>2<br>【单选题】 (20分)<br>依据联合国海洋法公约，一个远洋小岛最大可拥有的领海面积可达（B）多平方公里。<br>A、3500<br>B、1500<br>C、2500<br>D、4500<br>3<br>【单选题】 (20分)<br>中国战略地理的特点是：既是一个陆上大国，又是一个（D）,是一个陆海兼备的大国。<br>A、太空大国<br>B、信息大国<br>C、天空大国<br>D、海洋大国<br>4<br>【单选题】 (20分)<br> 下列国家既是我国的陆上邻国又是海上邻国的是：B<br>A、缅甸<br>B、越南<br>C、俄罗斯<br>5<br>【多选题】 (20分)<br>太空安全对下列哪些领域有影响？ABCDE<br>A、科技<br>B、军事<br>C、文化<br>D、政治<br>E、经济<br>6<br>【多选题】 (20分)<br>习主席总体安全观的基本内容是？BCDE<br>A、以人民安全为基础<br>B、以政治安全为根本<br>C、以经济安全为基础<br>D、以人民安全为宗旨</p><p>E、以军事、文化、社会安全为保障<br>7<br>【多选题】 (20分)<br>冷战以后美国发动的战争有？ABD<br>A、科索沃战争<br>B、伊拉克战争<br>C、马岛战争<br>D、海湾战争<br>8<br>【多选题】 (20分)<br>东盟国家与我有岛屿争端的国家有？ABC<br>A、菲律宾<br>B、越南<br>C、马来西亚<br>D、印度尼西亚<br>9<br>【多选题】 (20分)<br>与我国陆地接壤的国家数量，下列选项错误的是？ABD<br>A、11<br>B、12<br>C、14<br>D、13<br>10<br>【多选题】 (20分)<br>恐怖主义的发展趋势是？ABD<br>A、全球化<br>B、网络化<br>C、简单化<br>D、分散化</p><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><p>1<br>【单选题】 (20分)<br>中国国防的主体是（A）。<br>A、国家，包括全体国民<br>B、武装力量<br>C、军队<br>2<br>【单选题】 (20分)<br>国防的功能是和平时期威慑敌人，战争爆发后通过实战战胜敌人，保卫国家的主权统一、领土完整和安全。从这个意义上说，“养兵千日、用兵一时”已经过时了，应该是“养兵千日、用兵千日”。这个说法对不对？A<br>A、对<br>B、错<br>3<br>【单选题】 (20分)<br>瑞士1815年宣布中立以来，已经200多年没有战争，但现在每年仍投入国防费54亿美元（人均655.7美元，中国人均105美元）。有人说必要，有人说不必要。你认为必要还是不必要？A<br>A、必要<br>B、不必要<br>4<br>【单选题】 (20分)<br>国家的国防实力等于（B）。<br>A、综合国力＋民族精神<br>B、综合国力×民族精神<br>5<br>【单选题】 (20分)<br>全世界几乎一切大中小帝国主义国家都侵略过我国，其主要原因是（B）。<br>A、中国是农耕民族<br>B、中国社会制度腐败，经济技术落后<br>6<br>【多选题】 (20分)<br>下列国家国防的类型正确的有？ABDE<br>A、瑞士：中立型<br>B、日本：联盟型<br>C、中国：中立型<br>D、美国：扩张型<br>E、中国：防御型<br>7<br>【多选题】 (20分)<br>下列选项不是我国成功爆炸第一颗原子弹的时间的是？BCD<br>A、1964年10月16日<br>B、1964年11月16日<br>C、1965年10月16日<br>D、1965年11月16日<br>8<br>【多选题】 (20分)<br>国防动员的基本内容包括什么？ABCD<br>A、人民防空动员<br>B、政治动员<br>C、武装力量动员<br>D、经济动员<br>9<br>【多选题】 (20分)<br>公民在国防动员中应尽的责任和义务？BCD<br>A、捐钱献物<br>B、依照法律服兵役<br>C、接受国防教育<br>D、履行国防勤务义务<br>10<br>【多选题】 (20分)<br>中国武装力量是指什么，下列选项错误的是？BCD<br>A、中国人民解放军、中国人民武装警察部队和民兵<br>B、中国人民解放军和中国人民武装警察部队<br>C、中国人民解放军的陆军、海军、空军、火箭军<br>D、中国人民解放军和民兵</p><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><p>1<br>【单选题】 (20分)<br>克劳塞维茨是哪个国家的军事思想家？C<br>A、英国<br>B、法国<br>C、普鲁士<br>2<br>【单选题】 (20分)<br>创立海权论并成为世界最著名海军战略理论家的是（C）海军上校马汉。<br>A、法国<br>B、英国<br>C、美国<br>D、荷兰<br>3<br>【单选题】 (20分)<br>克劳塞维茨亲身经历了哪场伟大战争？A<br>A、拿破仑战争<br>B、第一次世界大战<br>C、普法战争<br>4<br>【单选题】 (20分)<br>在哪场战争之后，美国军事教育界开始重视学习《战争论》？C<br>A、海湾战争<br>B、朝鲜战争<br>C、越南战争<br>5<br>【单选题】 (20分)<br>马汉最初是在对（）研究的基础上萌发了海权论思想。D<br>A、中世纪战争<br>B、英荷战争<br>C、拿破仑战争<br>D、布匿战争<br>6<br>【多选题】 (20分)<br>《战争论》提出的最精彩的思想有：ABC<br>A、战争是政治的继续<br>B、进攻顶点<br>C、打敌重心<br>D、政治是战争的继续<br>7<br>【多选题】 (20分)<br>马汉认为具有下列特性的民族有利于发展海权？AD<br>A、冒险精神<br>B、侵略精神<br>C、称霸海上<br>D、贸易的欲望<br>8<br>【多选题】 (20分)<br>克劳塞维茨的“攻势防御”思想是指AD<br>A、要把进攻和防御紧密结合<br>B、不要进攻注重防御<br>C、要先发制人、主动攻打敌人<br>D、要用巧妙的的打击构成防御的盾牌<br>9<br>【多选题】 (20分)<br>马汉认为下列因素影响“海权“的争夺？CD<br>A、陆海兼备的大国<br>B、领土面积<br>C、政府性质<br>D、方便进入海洋的地理位置</p><p>10<br>【多选题】 (20分)<br>“海权“的主要内涵是哪些？ABC<br>A、海洋方向的综合实力<br>B、海上武装力量<br>C、海上经济力量<br>D、海上政治势力</p><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><p>1<br>【单选题】 (20分)<br>第二次世界大战，苏联参战打了多长时间？B<br>A、6年零2个月<br>B、4年零2个月<br>C、5年零2个月<br>2<br>【单选题】 (20分)<br>第二次世界大战，美国参战打了（B）。<br>A、5年零9个月<br>B、3年零9个月<br>C、4年零9个月<br>3<br>【单选题】 (20分)<br>中国人民的抗日战争共打了（C）。<br>A、8年<br>B、12年<br>C、14年<br>4<br>【单选题】 (20分)<br>中国人民以巨大民族牺牲支撑了世界反法西斯战争的东方主战场。共伤亡（B）万人？<br>A、3000<br>B、3500<br>C、2500<br>5<br>【单选题】 (20分)<br>国民党军队歼灭日军约（C）万人。<br>A、48<br>B、43<br>C、53<br>6<br>【多选题】 (20分)<br>中国共产党在抗日战争中的“中流砥柱“作用体现在以下方面ACD<br>A、统一战线<br>B、技术支持<br>C、理论指导<br>D、先锋模范作用<br>7<br>【单选题】 (20分)<br>抗日战争中的战绩统计：A<br>国民党军队歼灭日军总数（），<br>共产党军队歼灭日军总数（），<br>共产党军队歼灭伪军总数（）。<br>A、53万、52.7万、117万<br>B、51万、50万、117万<br>C、52.7万、53万、117万<br>D、50万、51万、117万<br>8<br>【多选题】 (20分)<br>毛泽东军事思想的核心内容ABD<br>A、人民战争的战略战术：打什么仗<br>B、人民军队理论：建设什么样的军队<br>C、人民战争理论：打什么仗<br>D、人民战争理论：怎么打仗<br>9<br>【多选题】 (20分)<br>以下哪些是发生在井冈山时期的？AD<br>A、“支部建在连上”<br>B、《论持久战》的发表时间<br>C、《沁园春·雪》的写作时间<br>D、三湾改编<br>10<br>【多选题】 (20分)<br>毛泽东主席给红军规定的“三大任务“是？ABD<br>A、战斗队<br>B、生产队<br>C、宣传队<br>D、工作队</p><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><p>1<br>【单选题】 (20分)<br>以舰载机为主要武器并作为其海上活动基地的大型水面战斗舰艇是（C）。<br>A、战列舰<br>B、驱逐舰<br>C、航空母舰<br>D、巡洋舰<br>2<br>【单选题】 (20分)<br>以下哪一个不属于“宙斯盾”作战系统分系统的是（B）<br>A、多功能相控阵雷达分系统<br>B、电子对抗分系统<br>C、指挥和决策分系统<br>D、武器控制分系统<br>3<br>【单选题】 (20分)<br>以下哪一个不属于舰载防空导弹系统的是（A）<br>A、“白蛉”<br>B、”海响尾蛇”<br>C、“施基利”<br>D、“标准II”型<br>4<br>【单选题】 (20分)<br>我国2015年“9.3胜利日”大阅兵，参阅装备中新型武器装备占＿C＿＿,向世界展现了我国军事科技的最新成果和先进水平。　　　<br>A、63%<br>B、91%<br>C、84%<br>D、55%<br>5<br>【单选题】 (20分)<br>美国在＿＿B＿年研制出世界上第一台电子计算机，主要用于计算弹道导弹参数。<br>A、1947<br>B、1946<br>C、1965<br>D、1948<br>6<br>【多选题】 (20分)<br>美国福特级核动力航母的优势是？ACD<br>A、电磁弹射<br>B、太阳辐射<br>C、需要的人员少<br>D、支持激光武器<br>7<br>【多选题】 (20分)<br>以下哪一个选项的反舰导弹是不属于中国的？ACD<br>A、“战斧”、“鱼叉”反舰导弹<br>B、“鹰击”反舰导弹<br>C、“白蛉”、“红宝石”反舰导弹<br>D、“花岗岩”反舰导弹<br>8<br>【多选题】 (20分)<br>航母战斗群必须具备以下能力ACD<br>A、防空<br>B、突击上陆<br>C、反潜<br>D、综合补给<br>9<br>【多选题】 (20分)<br>下列哪个不是我国的舰载中远程防空导弹？ACD<br>A、歼20<br>B、海红9<br>C、东26<br>D、歼14<br>10<br>【多选题】 (20分)<br>我军反航母利器和我军争夺制空权的利器分别（BCD）和（），以下选项错误的是？<br>A、东26、歼20<br>B、东26、海红9<br>C、海红9、歼20<br>D、歼20、东26</p>]]></content>
    
    
    <categories>
      
      <category>军事理论答案</category>
      
    </categories>
    
    
    <tags>
      
      <tag>答案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言作业EX06&amp;EX07（修改一次）</title>
    <link href="/2019/04/29/EX06-EX07/"/>
    <url>/2019/04/29/EX06-EX07/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;鉴于老师可能没时间讲函数，但是又必须交函数的作业。我把写的代码分享一下，希望能有所帮助。全抄有风险，如果有问题欢迎指正。<br>&emsp;&emsp;这次作业让我明白一个道理：管它写的有多烂，能跑起来，是对的就行。<br>&emsp;&emsp;(CPF群里面有人说：取整的话，正数可以直接加0.5取整，但是负数不行，所以为了严谨，加上负数的取整)<br><img src="/images/xiaolaoshu.jpg"><span id="more"></span></p><hr><h1 id="Exercise-6-Simple-Functions"><a href="#Exercise-6-Simple-Functions" class="headerlink" title="Exercise 6:  Simple Functions"></a>Exercise 6:  Simple Functions</h1><ol><li><p>   Write a C program that reads several numbers and uses the function round_to_nearest to round each of these numbers to the nearest integer. The program should print both the original number and the rounded number. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">round_to_nearest</span><span class="hljs-params">(<span class="hljs-keyword">float</span> num)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">float</span> num;<br>    <span class="hljs-keyword">int</span> result;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;num)!=EOF)<br>&#123;<br>result = round_to_nearest(num);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,result);<br>&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">round_to_nearest</span><span class="hljs-params">(<span class="hljs-keyword">float</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (num&gt;=<span class="hljs-number">0</span>)                 <span class="hljs-comment">//正数取整</span><br><span class="hljs-keyword">return</span> ((<span class="hljs-keyword">int</span>)(num+<span class="hljs-number">0.5</span>));<br>  <span class="hljs-keyword">else</span>                        <span class="hljs-comment">//负数取整</span><br>  <span class="hljs-keyword">return</span> ((<span class="hljs-keyword">int</span>)(num<span class="hljs-number">-0.5</span>));    <br>&#125;<br><br><br></code></pre></td></tr></table></figure></li><li><p>Write a program that reads three pairs of numbers and adds the larger of the first pair, the larger of the second pair and the larger of the third pair. Use a function to return the larger of each pair.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">float</span>,<span class="hljs-keyword">float</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">float</span> first,second,result,larger,sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)<br>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f %f&quot;</span>,&amp;first,&amp;second);<br>result = max(first,second);<br>sum+=result;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,result);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f&quot;</span>,sum);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">float</span> first,<span class="hljs-keyword">float</span> second)</span></span>&#123;<br><span class="hljs-keyword">float</span> larger;<br><span class="hljs-keyword">if</span>(first&gt;=second)<br>larger = first;<br><span class="hljs-keyword">else</span><br>larger = second;<br><br><span class="hljs-keyword">return</span> larger;<br><br>&#125; <br></code></pre></td></tr></table></figure></li><li><p>A car park charges a £2.00 minimum fee to park for up to 3 hours, and an additional £0.50 for each hour or part hour in excess of three hours. The maximum charge for any given 24-hour period is £10.00. Assume that no car parks for more than 24 hours at a time.</p><p> Write a C program that will calculate and print the parking charges for each of 3 customers who parked their car in the car park yesterday. The program should accept as input the number of hours that each customer has parked, and output the results in a neat tabular form, along with the total receipts from the three customers:</p><p> Car        Hours     Charge<br> 1          1.5      2.00<br> 2          4.0      2.50<br> 3         24.0     10.00<br> TOTAL     29.5     14.50                    </p><p> The program should use the function calculate_charges to determine the charge for each customer.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//这个如果用for的话，我没想到能打印出表格效果的方法。</span><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">fee</span><span class="hljs-params">(<span class="hljs-keyword">float</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> i,money,TOTAL;<br><span class="hljs-keyword">float</span> fee1,fee2,fee3,time,first=<span class="hljs-number">0</span>,second=<span class="hljs-number">0</span>,third=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>,hours=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The first car&#x27;s hours is &quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;first);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nThe second car&#x27;s hours is &quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;second);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nThe third car&#x27;s hours is &quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;third);<br>fee1 = fee(first);<br>fee2 = fee(second);<br>fee3 = fee(third);<br>time=first+second+third;<br>        sum=fee1+fee2+fee3;<br><span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;\nCarHours   Charge\n&quot;</span>);<br><span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;  1       %.1lf     %.2lf\n  &quot;</span>,first,fee1);<br><span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;2       %.1lf     %.2lf\n  &quot;</span>,second,fee2);<br><span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;3       %.1lf    %.2lf\n  &quot;</span>,third,fee3);<br><span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Total   %.2lf   %.2lf&quot;</span>,time,sum);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">fee</span><span class="hljs-params">(<span class="hljs-keyword">float</span> hours)</span></span>&#123;<br><span class="hljs-keyword">float</span> money;<br><span class="hljs-keyword">if</span>(hours&lt;=<span class="hljs-number">3</span>)<br>money = <span class="hljs-number">2.00</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(hours&gt;=<span class="hljs-number">3</span>&amp;&amp;hours&lt;=<span class="hljs-number">19</span>)<br>money = <span class="hljs-number">2</span> + <span class="hljs-number">0.5</span>*(hours<span class="hljs-number">-3</span>);<br><span class="hljs-keyword">else</span><br>money = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">return</span> money;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这个是用for循环写的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-comment">//用了For循环的，但是无法打印出表格的效果 </span><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">fee</span><span class="hljs-params">(<span class="hljs-keyword">float</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> i,money,TOTAL;<br><span class="hljs-keyword">float</span> charge,time,sum=<span class="hljs-number">0</span>,hours=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Car   Hours\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t&quot;</span>,i+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;hours);<br>&#125;<span class="hljs-keyword">while</span>(hours&lt;<span class="hljs-number">0</span>&amp;&amp;hours&gt;<span class="hljs-number">24</span>);<br>charge = fee(hours);<br>time+=hours;<br>        sum+=charge;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Charge %.2f\n&quot;</span>,charge);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Total  %.2lf   %.2lf&quot;</span>,time,sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">fee</span><span class="hljs-params">(<span class="hljs-keyword">float</span> hours)</span></span>&#123;<br><span class="hljs-keyword">float</span> money;<br><span class="hljs-keyword">if</span>(hours&lt;=<span class="hljs-number">3</span>)<br>money = <span class="hljs-number">2.00</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(hours&gt;=<span class="hljs-number">3</span>&amp;&amp;hours&lt;=<span class="hljs-number">19</span>)<br>money = <span class="hljs-number">2</span> + <span class="hljs-number">0.5</span>*(hours<span class="hljs-number">-3</span>);<br><span class="hljs-keyword">else</span><br>money = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">return</span> money;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h1 id="Exercise-7-More-Functions"><a href="#Exercise-7-More-Functions" class="headerlink" title="Exercise 7:  More Functions"></a>Exercise 7:  More Functions</h1><ol><li><p>Write a program that uses sentinel-controlled repetition to take an integer as input, and passes it to a function even which uses the modulus operator to determine if the integer is even. The function even should return 1 if the integer is even, and 0 if it is not. </p><p> The program should take the value returned by the function even and use it to print out a message announcing whether or not the integer was even.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">even</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a,num;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num)!=EOF)<br>    &#123;<br>a = even(num);<br><span class="hljs-keyword">if</span>(a==<span class="hljs-number">1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d is an even\n&quot;</span>,num);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a==<span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d is an odd\n&quot;</span>,num);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">even</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span></span>&#123;<br><span class="hljs-keyword">if</span>(num%<span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Write a C program that uses the function integerPower1(base, exponent) to return the value of:</p><pre><code>                         baseexponent</code></pre><p> so that, for example, integerPower1(3, 4) gives the value 3 * 3 * 3 * 3. Assume that exponent is a positive, non-zero integer, and base is an integer. The function should use a for loop, and make no calls to any math library functions.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">intergerPower1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> base,<span class="hljs-keyword">int</span> exponent)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> base,exponent,result;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;base,&amp;exponent)!=EOF)<br>    &#123;<br>    result = intergerPower1(base,exponent);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,result);<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">intergerPower1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> base,<span class="hljs-keyword">int</span> exponent)</span></span>&#123;<br><span class="hljs-keyword">int</span> i,result1=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;exponent;i++)<br>result1*=base;<br><span class="hljs-keyword">return</span> result1;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>Write a C program that uses the recursive function integerPower2(base, exponent) to return the value of:</p><pre><code>                     baseexponent</code></pre><p> so that, for example, integerPower2(3, 4) gives the value 3 * 3 * 3 * 3. Assume that exponent is a positive, non-zero integer, and base is an integer. The function should make no calls to any math library functions.<br> (Hint: the recursive step will use the relationship:</p><pre><code>                     baseexponent = base . baseexponent - 1</code></pre><p> and the base case will be when exponent is 1 since : base1 = base.)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">intergerPower2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> base,<span class="hljs-keyword">int</span> exponent)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> base,exponent,result;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;base,&amp;exponent)!=EOF)<br>    &#123;<br>    result = intergerPower2(base,exponent);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,result);<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">intergerPower2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> base,<span class="hljs-keyword">int</span> exponent)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> result2=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(exponent&lt;=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> base*intergerPower2(base,exponent<span class="hljs-number">-1</span>);<br>  <br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>C语言作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三更有梦，面对自己（心态分享兼浅谈时事）</title>
    <link href="/2019/04/20/%E5%BF%83%E6%80%81%E6%96%B9%E9%9D%A2%E7%9A%84%E5%88%86%E4%BA%AB/"/>
    <url>/2019/04/20/%E5%BF%83%E6%80%81%E6%96%B9%E9%9D%A2%E7%9A%84%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;&emsp;&emsp;之前母亲说，李文轩这个名字用作你的笔名吧。没想到，今天真的成了我的笔名。<br>&emsp;&emsp;&emsp;&emsp;本文主要从四个方面阐述心态方面的作用：接受自己的情绪、承认别人的的优秀、正视自己、同理心。</p><p><img src="/images/pexels-photo-541518.jpeg" title="Optional Title"></p><span id="more"></span><h1 id="接受自己的情绪"><a href="#接受自己的情绪" class="headerlink" title="接受自己的情绪"></a>接受自己的情绪</h1><p>&emsp;&emsp;喜怒哀乐是每个人都应该有的的情绪，但是现实中，我们大都表现出积极乐观的一面，很少会有负面情绪的表达。包括我的父亲也常常告诉我，要学会坚强，男孩子不能动不动就掉眼泪。所以平常也都表现出自己很坚强的一面，而伤心或是难过，也都不挂在脸上，也不怎么想去诉说。往往那些把自己包装的越坚强，越乐观的人，内心的就越脆弱。我们都不是圣人，我们需要去接受我们最真实的情绪。学会接受我们这些这些负面的情绪，而不是去忽视它，让它消失，仿佛这些负面情绪与我无关。<br>&emsp;&emsp;每个人都应该有自己处理情绪的方法，有的人伤心或者是难过，可能找一个没有人的地方哭一会儿就好了，有的人可能需要去找人去诉说，需要得到别人的安慰，或者去跑跑步，锻锻炼，放松一下心情。人生有太多的不顺心不如意，合理的处理情绪是为了更好地面对自己，面对未来和生活。<br>&emsp;&emsp;无论正能量还是负能量的情绪，都是我们最最最真实的情绪，好好的去对待他们，世上没有完美，所有的完美都是等待揭穿的谎言。学会去接受不完美，是一种能力，有些事情是不可以强求的。<br>&emsp;&emsp;就本人写博客来说，正能量和负能量都会涉及，不过主要还是正能量的！就像林清玄一样，林清玄说：“辛酸的也写一点，有趣的也写一点。”妈妈对他说：“少写一些辛酸的故事，多写一些有趣的故事。别人读文章，是希望在文章中得到启发，得到安慰，得到智慧，而不是读了文章以后反而立刻跑到窗口跳下去。如果那样，这文章就没有意义。”林清玄又问妈妈：“那如果碰到辛酸的事情怎么办?”林妈妈说：“碰到辛酸的事情，躲在被子里哭一场就好了。”<br>&emsp;&emsp;如此，甚好。</p><h1 id="承认别人的优秀"><a href="#承认别人的优秀" class="headerlink" title="承认别人的优秀"></a><strong>承认别人的优秀</strong></h1><p>&emsp;&emsp;对于每个人而言，我们可能是会是天才，但是我们永远都不可能成为全才。能够成为天才，已经可以说的上是相当的不容易了。<br><code>天才（英语：Genius）是指某人展现了卓越的智力、创意。而此创意则通常指在某一或某些领域展现前所未有的洞察力。有天才在风格和独创性规则创造性的高效率，普遍性。</code><p align="right">——维基百科</p><br>&emsp;&emsp;不过我认为天才是可遇不可求的，能做到优秀就可以了。至于什么是优秀，根据二八定理，排在总体的前百分之二十可以说的上是优秀了。但是具体问题还是要具体分析的，可能你周围都是大佬，然后你会感觉你很弱，实际上你没你想象的那么糟糕。<br>&emsp;&emsp;而有的人可能是那前百分之零点几，对于排在后面的你可以说是遥不可及，但是你要一直去盯着他/她，追赶着他/她吗？可能对于你来说是很累，他/她也很累，可能你努力了很久，也没有追上，或者是能看到一个影子。那么你应该放弃还是继续呢？我觉得都不好。我认为最重要的是你首先要承认他/她比你优秀，有的时候对于我们来说承认一个事实真的很难。然后，找出你的不足、差距，尽你所能，追求最好的自己！不要经常拿自己和别人比较，大部分人其实都是处于一种比上不足比下有余的境地。跟比你优秀的人比，你会活的很累，很疲惫，而且久而久之，会有挫败感，也很容易自卑，这不是一个有益的比较。<br>&emsp;&emsp;人生苦短，没有必要一直把自己活在痛苦当中。做到自己能做到最好的，保持良好的心态，我认为就足够了。我们没有必要去高看别人，看轻自己，每个人都有自己的优点，每个人都是独一无二的。也不要去看轻别人，这是自大的表现，也是失败的第一步。 要对自己有个客观、合理的评价和判断。<br>&emsp;&emsp;即使在别人眼里看起来很优秀的人，现实生活中还有很多不如意的事情，想不到烦恼。也有自己想做但是没有做的事，也有自己想去没有去的地方，也有自己想见却没有见的人。人生不可能是一帆风顺，道路上的失败和挫折不过是通向成功的必经之路罢了。成功不是从起点到成功，而是从起点经历无数个失败，最终到达成功。<br>&emsp;&emsp;我对待生活学习中这些不如意的事情的态度是“人生不如意十常八九，安静苦笑吧！”有的时候，经历过了，也就过去了，没有必要去纠结，痛苦很长时间。生活还是要继续的嘛！人要一直开开心心，快快乐乐的！<br>&emsp;&emsp;有的时候也是“有心栽花花不开，无心插柳柳成荫”，或许是无心之间，自己想做的事情就做到了，但是有些不该强求的，却在拼命追求。我觉得，即使再无可救药，你也应该去抢救一下，万一活了呢？有的事情明知不可为而为之吗？尽人事，听天命。适，可而止！<br>&emsp;&emsp;可能我们眼前的事情并没有多大，但是被我们自己无限地放大放大，自己吓唬自己，然后真的就吓唬到了。事实是，事情没有你想象的那么糟糕，也没有想象的那么乐观。<strong>没事不惹事，有事不怕事。</strong>安之若素，是一种大境界。比如说，明天期末考试，明天有一个Pre，现在已经是凌晨三点了，早上八点就开始，你还没睡着觉，你慌不慌？我会说，我一点都不慌，哈哈哈。这些都是衡中同学们的经验。什么数学考试迟到五分钟，淡定走入考场，最后数学成绩全班第一；晚上夜聊到凌晨一点，第二天物理考试满分；今天人家通宵和你打牌聊天，成绩一出，人考第一。这样的例子太多太多，所以根本不要因为即将发生的事情而焦虑。<br>&emsp;&emsp;以后的事情以后再说，过去的事情就已经算是过去了，虽然过去可能会对今天产生一定的影响，但是最终要的是把握当下。我这个人比较喜欢考虑事情，总想把事情考虑清楚，考虑明白了，做好了最坏的打算再去做。并不是说这样不好，但是有些事情没有必要考虑那么多，以后的事情以后再说，人生没有那么多的确定性，如果是这个样子，那么人生未免也太无趣了。人生大多都是不确定的，趋利避害是人的本能，但是有的时候需要你跟着自己的感觉来，如果我有自己做决定的权利，我也不能保证我的每一个选择，每一个决定都是正确的，但我做的决定一定是顺着自己的心的。</p><center><font color="red">如果事与愿违，那么上天一定另有安排！</font></center><h1 id="正视自己"><a href="#正视自己" class="headerlink" title="正视自己"></a><strong>正视自己</strong></h1><p>&emsp;&emsp;为什么写这部分呢？因为之前有一阵儿有点自卑，感觉自己没有优点，这个咋整？为此我谷歌了一下，人没有优点怎么办？看了看满满的正能量！整个人也是元气满满的！这部分我主要说说我自己吧。<br>&emsp;&emsp;至于为什么会有自卑心，我在上文已经提到，大部分是不益的比较造成的，那自己的不擅长的去和比人比较。再加上我有的时候有些强迫症，（有强迫症的人千万别弄博客，不然你看着有点不顺眼都想去改。）这个就显得更加的顺利成章了。比如说体育吧，我确实不太擅长打篮球，踢足球，打羽毛球乒乓球什么的，但是我喜欢骑骑自行车兜兜风，也擅长跳高跳远，短跑。这个估计是学跆拳道时留下来的，虽然现在已经记不怎么的了，但是腿部的爆发力还是有的。再说说魔方吧，我玩过二阶三阶四阶五阶六阶的魔方，也仅限于会玩，说要多快，那倒是没有。小学也拿过不少的一等奖，不过那个时候34、5秒已经很快了。现在热热手也能拧个二十多秒或者能进二十，但是我感觉拧不进十五秒也不太好意思说我会玩魔方，感觉说了也有点丢人，所以这个就被我Pass掉了。然后就是说写字好看这个事吧，写字好看的人多了，并不差我这一个，这个好像也不怎么值得一提。因此，这也就是为什么当有人问我你有什么爱好和特长吗？我说，我没有。<br>&emsp;&emsp;上大学之后，看着同学们做志愿的做志愿，出去玩的出去玩，只有我呆在宿舍里，不是学习就是玩手机，感觉这样的生活不是我想要的。看了看别人，在宿舍里整天打游戏不也挺快乐的吗？我问我自己，这是你想要的生活吗？我坚决而又肯定地对自己说：“不！我的人生不应如此！”但是如何改变自己呢？我却怎么也没有迈出自己的第一步，晚上想想千千路，白天起来走老路。不甘心啊，真的不甘心！<br>&emsp;&emsp;但是我真的比别人差吗？体侧的时候不是跳的很远吗？跑步的时候不也是很快嘛？（我实名diss一下学校测试的仪器）学习成绩难道比别人差很多吗？为什么要自卑呢？自己不也是很优秀的嘛!挺起胸，抬起头，自信些！没有什么尴尬不尴尬的，尴尬多了就不觉得尴尬了。脸皮薄可能是个缺点，尤其在追女生的时候。一个人要勇敢，觉得应该做的就去做，不用太在意他人的看法。人总不能活在比人的思想下，要为自己而活嘛！去尝试自己从来想都未想过的事情，做自己顺心如意的决定，别被太多的条条框框所拘束。有的时候有点脾气也挺正常的，不要让自己的善良成为对别人错误的纵容。之前就对自己说过，我要活着自己想要的模样！<br>&emsp;&emsp;“最可靠的东西是你自己的能力（尤其是你的核心竞争力）”。一个人最能依靠的就是他自己，可能你说当今的人需要合作，合作共赢什么的。但是，在绝境中能依靠的只有你自己，只有你自己才不会背叛你自己，在你需要面对的时候，你自己站出来。核心竞争力是别人为什么选择你最重要的理由，所以你要一直不断地去学习新的知识和技能，然后在未来的某个时刻用到它，你总要有一些和别人不一样的技能才能脱颖而出吧。但是不要去学屠龙术。<br>&emsp;&emsp;我觉得<strong>学习能力</strong>是一个人最重要的能力，可以说，你今天多学一个本事，明天就少说一句求人的话。学的话，一定要学的精！不要学的一瓶子不满，半瓶子晃荡。当今这个时代，是讲技术的，你有技术你就有发言权。学的面可以多，但是不能特别多，特别多会造成前面所说的学的不精的情况发生。学习面广这个是很容易做到的，如果你是一个善于折腾的人，<br>这里定义一下“折腾”：<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;在你【不熟悉】的领域中干某些事情（如果是你【熟悉】的领域，那属于“轻车熟路”，不能算“折腾”）<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;这些事情通常带有某种“探索/钻研”的性质（通常颇费周折）<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;这些事情通常要耗费一定的时间和精力（能很快搞定的，就不能算“折腾”）<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;这些事情通常具有不确定的结果（你不清楚是否能得到期望的结果）。<br>&emsp;&emsp;那么你的自学能力应该比平常人的自学能力要强一些，学习的面也自然就广一些。因为折腾这个事情费事费力，没有人引导，也没有确定的结果，而且你在学习一个知识的时候需要用到另一个知识，然后你就需要对这多个知识进行补充，这样的情况很多，而且有的时候是跨学科的，其实没有所谓的跨学科，需要的都得学。“折腾”的好处很多，可以培养你的发散式思维，可以培养动手能力等等。两句话不足以让不爱“折腾”的同学去折腾，只是想让已经在“折腾”路上的同学，可以在这条路上走得足够远。<br>&emsp;&emsp;假期是个好东西，千万不要浪费。假期我要学Python,为了之后用到，或者是自己写着玩，方便自己和他人的生活。还要学一门乐器，学学弹吉他，拿起来，给自己心爱的姑娘唱支歌！<br>&emsp;&emsp;以上说的都是<strong>个人层面</strong>，下面说说<strong>大情怀。</strong></p><h1 id="同理心"><a href="#同理心" class="headerlink" title="同理心"></a><strong>同理心</strong></h1><center><font color="red">各家自扫门前雪</br>莫管他人瓦上霜</br></font></center><p align="right">——鲁迅</p>&emsp;&emsp;在这里，“各家自扫门前雪，莫管他人瓦上霜”是鲁迅先生讽刺旧中国的人们麻木不仁的一种社会现象。  <hr><p>下面是跑题内容：<br>&emsp;&emsp;说句题外话，从去年（2018年）开始，人教版高中语文课本鲁迅文章使用大幅减少，被称为“鲁迅大撤退”。儿时的我不懂为什么要去学鲁迅的文章，只知道他的笔像匕首，抨击着当时的统治。文章写的很难懂，当时得知不用学鲁迅的文章，大家包括我都很开心，但是如今看看鲁迅先生说的话，真的是字字在理，句句入心。现在真的是很惋惜，为自己当时的幼稚而后悔。其实这样的事情还是不少的，比如对最近的996.ICU，我现在持完全抵制的态度，而不应该是当初对给不给多的加班费而去决定是否同意996，同时吐槽一下马云，马云这个对996的言论，可以说是人设已经崩塌了，员工又都不是傻子，什么能996是员工的福分，你对一堆不感兴趣的东西把全身的精力都投入，你是福分啊！钱都到你手里了，员工呢！ICU<a href="https://www.bilibili.com/video/av49510346?from=search&seid=14809891811794929735">【马云谈996被网络暴力！这次我同情不起来】 最后有些话身不由己，相信大家应该都能看出来，</a>当初我觉得好一点的国内公司也就阿里了，没想到啊，没有一家称心如意的，都是资本家的剥削。京东,我就不多说了，有个视频我找不到了，找到了之后在补上。下面这个是超级演说家李国庆的话，视频的话在B站搜索超级演说家李国庆应该就有。<a href="https://www.weibo.com/6198994160/HqN1J96bg">#古人笑对996#“如果你愿意跪着去适应它， 你可能一辈子就站不起来了。” ​​​​你如何看待996？ ​​​​</a>再者就是当初谷歌退出大陆，我也很开心，因为毕竟是外企嘛，但是现在呢，悔不当初。这都是大事了，看起来多大也不是自己能为之的，但是自己亲身发生的事情中也有很多事情是悔不当初。</p><hr><p>&emsp;&emsp;有人觉得这是“这是很好的一种独处状态，在这个社会没有人是一座孤岛，需要维系，但更多时候，我们都是孤独的个体，做好自己，别管别人，这是明哲保身的最佳方法。”现在当今社会上，这种“明哲保身”之举不失为一种良策。<strong>但是</strong>如果人人都采取“明哲保身”的最佳方法，那么我们本来就已经很冷漠的社会，现在会变的更加的冷漠。而人与人之间只不过是对这种冷漠的习以为常，反倒是不采取“事不关己高高挂起”这种方法的人，会被人觉得很另类！就像屈原那样“举世皆醉我独情，众人皆醉我独醒”，这或许就是当今社会的病态之一。<br>&emsp;&emsp;不过什么东西该管，什么东西不该管？到底该管到什么程度？都是需要考虑的。我来举个比较现实的例子，光从表面上看：一个漂亮的姑娘嫁给了一个特别富有的老头。你觉得这个事你应该管吗？答案当然你，你不该管，你可以吐槽两句，像什么，“你们要是离婚了我就不相信金钱”之类的话，无可厚非。人家本来就是一个想要钱，一个想要一个漂亮姑娘，这或许对人来说就是一次交易，管你什么事。当然还有更直接的判断方法：对于个人喜好和他人的私人领域，不应该去干涉，即使是讨论也没有意义。比如说：她喜欢蔡徐坤，你喜欢吴亦凡。她说蔡徐坤打球好看，你说吴亦凡的Rap好听，她说吴亦凡的Rap巴拉巴拉，你说蔡徐坤巴拉巴拉。除了两个人浪费口舌，浪费时间之外，这样的争论没有任何的意义和价值。（对于什么事情应该去争论，什么不该争论，什么是你应该争论的焦点，什么是你不应该关注的，我之后会写一篇文章作为补充这段的内容）所以，<strong>不要干涉他人的私人领域。</strong><br><code>我们的教育都教“大历史”，我们的文化都讲“大局观”，仿佛呢，站在第一人称的你从来都是那个庙堂上运筹帷幄的英雄，往后仿佛那些在不幸意外里面受到伤害的人们都是没有面孔，只有一个数值代码的NPC，所以NPC的命运是不值得被专门深挖、讨论、聚焦的噪音，以免污损了大局的好看。但我就想问问了，如果是大局，能够对当中活生生的任意成员如此的冷酷漠然，那么这“大局”到底还是谁的“大局”呢？我相信“大局”两次本身并不糟糕啊。糟糕的是，只见森林不见树木的傲慢，砍掉一棵树森林还在，但是如果那棵树就是你呢，我们并不缺少对整体的关切，我们也不缺少对自己的关心，但是我们却经常缺乏“对于他人的命运，也可以是我的命运”的同理心的理解，关心每一个人就是关心你自己也是对大家最好的维护。因为唯其如此，这个大局才是活的，才是有内容的，而不是一个凭空编造出来的是在空无一物的幌子。 遇上什么事情啊，都请淡定对待外界、媒体、舆论的关注，不需要捏紧拳头，随时准备战斗的，那真的会让关心你的人很心寒。</code></p><p align="right">——[【陈迪说：大局观不应是对个体遭遇的漠然】](http://t.cn/EGDdMNO?m=4326685106708709&u=5655289725)</p>&emsp;&emsp;我们应该对这些已经发生的事情，平静的面对，不需要捏紧拳头，随时准备战斗，这样子会让关心你的人心寒。尤其是那些为你付出过很多的人，付出了这么多就得到了这么一个结果吗？我觉得不应该是这个样子，我们每一个人都是很渺小的，我所做的努力也不过是为了让更多的人去知道别人的命运也可以是我的命运。&emsp;&emsp;正像海明威在《钟为谁鸣》谈到：所有人是一个整体，别人的不幸就是你的不幸。所以，不要问丧钟是为谁而鸣——它就是为你而鸣。&emsp;&emsp;王小波在他的杂文里也表达过这个意思：在德国纳粹时期，有一个德国牧师，他说，那些人抓犹太人，我不说话，因为我是雅利安人；后来他们抓天主教徒，我不说话，因为我是新教徒……后来他们来抓我，已经没人能为我说话了。&emsp;&emsp;所以，我希望每人都能有“别人的命运也可以是我的命运”的同理心的理解。比如最近比较火的996事件，还有西安奔驰车主维权等等。&emsp;&emsp;当今人们了解新闻的发生已经不同于以前的报纸、电视等方式，而是在Web2.0时代，得知消息的方式更加广泛，了解的更加迅速，可以称为爆炸式的新闻。之前看不看新闻好像人与人之前的差别没有那么大，毕竟传播的方式、内容和速度都是有限的，但是如今，看不看新闻，了不了解却有极大的不同。了解的内容也比之前的单方面说辞更加全面，但是要分清楚哪些是事实，哪些又是作者的情感态度，具不具有主观色彩，是不是对其有着偏见等等。&emsp;&emsp;我们需要的是有人为受到不公对待的人发声，但是怎么发声，如何发声也极为重要。不要把自己陷入事件中无法挣脱。其中我觉得最重要的就是保证身份的匿名性和说话的界限。匿名性这个很有讲究，需要一定的技术，如今咱们国家实名制的实行让这个事情办到有点难度，但不是不可以，当然匿名性就和本人完全无关的身份了，你到时候也找不到我。还有就是说话的界限，现在在咱国家，说话的时候基本都会对自己的言论进行审查，感到人人自危，这也就是上面那个视频中所说，都太“自觉”了。我们需要有人提出问题，然后解决问题，而不是没有提出问题就是没有问题，而解决问题的方式就是把提出问题的人解决。&emsp;&emsp;Github是一片净土，虽说也有一些约束，但是毕竟在墙外，还是自由些。百度不敢爬Github的网站，因为Github不让他爬，这也是我的博客为什么在百度上搜索不到的原因，不过我暂时也不想让百度收录我的博客。三元一把，十元三把，您百度配吗？&emsp;&emsp;我本来已经到写完了，但是我看到这个之后，我不得不在这里再多说一句！我要挂这个人！![](/images/北邮领导.jpg)&emsp;&emsp;你自己都匿名，你让别人不匿名，你自己什么身份啊？我在这里再次强调一下，敏感的话，一定要**匿名！匿名！匿名！重要的事情说三遍！**不要说，有人说，真的勇士敢于实名说话和举报，除非你做好了被处分的准备！&emsp;&emsp;最后，我想以海明威的话结尾。<center><font color="red">所有人是一个整体</br>别人的不幸就是你的不幸</br>所以，不要问丧钟是为谁而鸣</br>它就是为你而鸣。</br></font></center><hr><p>参考文献</p><blockquote><p><a href="https://www.bilibili.com/video/av49510346?from=search&seid=14809891811794929735">【马云谈996被网络暴力！这次我同情不起来】</a><br><a href="https://www.weibo.com/6198994160/HqN1J96bg">【#古人笑对996#“如果你愿意跪着去适应它， 你可能一辈子就站不起来了。” ​​​​你如何看待996？ ​】​​​</a><br><a href="http://t.cn/EGDdMNO?m=4326685106708709&u=5655289725">【陈迪说：大局观不应是对个体遭遇的漠然】</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>个人心态方面分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>心态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件、网站推荐</title>
    <link href="/2019/04/10/%E8%BD%AF%E4%BB%B6%E3%80%81%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    <url>/2019/04/10/%E8%BD%AF%E4%BB%B6%E3%80%81%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<p>今天星期三，整整一下午加一晚上全在写物理实验报告，刚刚写完，已经不想再去动其他科了，就来写写博客放松一下。第二次写是得知高数考试推迟，我就不太忙了，想想这周也没怎么休息就写写玩玩吧！话不多说我们直接进入正题！<span id="more"></span></p><hr><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><p>今天主要说说下面四个浏览器：Microsoft Edge、Google Chrome、Firefox、Tor（链接均为维基百科内容，需要科学浏览）</p><h2 id="Microsoft-Edge"><a href="#Microsoft-Edge" class="headerlink" title="Microsoft Edge"></a><a href="https://zh.wikipedia.org/wiki/Microsoft_Edge">Microsoft Edge</a></h2><p>这个相信大家都不陌生,IE就是它的的前身。不过IE的BUG太多了，经常爆出有安全漏洞，安全性极低，补补修修也根本修不完。有人就要问了为什么不对IE进行大刀阔斧的改动，这个并不是微软不想弄，只不过是公司经常换人，IE浏览器代码的注释不行，不是没有就是看不懂，中间有六年的时间微软几乎停止了对IE的修补，就是因为公司换人，前面的人的代码看不懂，后面的人也不敢对其进行大的改动，就是这么一个这么多BUG的浏览器被无数人用过。直到出现Microsoft Edge，微软彻底放弃了IE。尽管性能，安全性都有了很大的改进，但是还是有部分原来IE的影子，如果有些网站不兼容，你可能还是需要它的。<strong>但是我不是很推荐。</strong></p><h2 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a><a href="https://zh.wikipedia.org/wiki/Google_Chrome">Google Chrome</a></h2><p>这个就是谷歌自家的浏览器了，支持多种插件，插件可以在谷歌商店里直接下载，方便快捷！这个是Chrome，还有一个就是Chromium。Chromium是谷歌开放源代码的浏览器，不过是BSD协议，而且开放的源代码也是一部分。所以并不是完全的开源和安全！而且无数的人去维护去尝试，发现的BUG也不会少，如果你更新的不及时（更新速度很快的，几个小时一个新的版本）也有可能出现安全问题。Chrome69之前出现过删除Cookies时，谷歌自家的Cookies会保存，上传给谷歌。还有Chrome74之后，用户无法再禁用“点击追踪”，简单解释就是统计【外链】的点击情况。其实谷歌真正的用户不是你我，而是那些想投放广告的广告商，谷歌通过收集用户的行为数据，进行统计，分析，最后实现精准投放广告。可以说谷歌也在侵犯隐私的路上越走越远。<br>所以我的建议的是<strong>可以装一个Chrome<a href="https://www.google.com/chrome/?brand=CHBD&gclid=CjwKCAjwqLblBRBYEiwAV3pCJvPY1z5jfAFKG-OCeQKuHyN4-hXX0usBPP_WlWjQqB2a4Lbs3ZGiDBoC0P4QAvD_BwE&gclsrc=aw.ds">这个是下载的地址</a></strong></p><h2 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a><a href="https://zh.wikipedia.org/wiki/Firefox">Firefox</a></h2><p>这个就比较好啦！Firefox是民间非盈利机构创造和维护的，所以不会存在谷歌一样收集用户行为的癖好，即使是有，也会告诉你说是参与用户体验计划。你想参加就参加，不想就可以不参加。最安全的当属Firefox ESR,这个版本的火狐是火狐一直长期维护的，每天晚上都会有一部分人去修BUG，而且版本稳定，一般一年才会更新，所以BUG修的都差不多了，安全上没有问题！同样也支持插件，不比Chrome差。包括Tor,也是内置的火狐。可以说火狐是你的最佳选择！<a href="https://www.mozilla.org/en-US/firefox/new/">下载链接</a></p><h2 id="Tor"><a href="#Tor" class="headerlink" title="Tor"></a><a href="https://zh.wikipedia.org/wiki/Tor">Tor</a></h2><p>这个就比较骚气了！Tor是洋葱路由的简称，因为打开网站的方式像剥洋葱一样，一层一层的，所以得名。Tor的使用主要是实现网络的匿名化，即不想让对方得知你的身份（你的IP地址），Tor通过至少三级跳转实现对目标网站的访问。这些中转都是全世界希望匿名上网的志愿者，自发共享自己的IP组成的。由于是全世界的IP，可以随便跳转。所以加大了侦查的难度，国与国之间想要得到IP也要去进行社交，而且各个点之间都是遵循Tor的加密传输协议，如果没有遇到几个中转都是“蜜罐”的情况，可以保证是安全的。Tor的每次访问页面都是不同IP，因此，就更不可能看出来是一个人的操作行为。但是Tor并不是万能的，Tor的流量特征十分明显，所以有的时候就需要混淆流量，<strong>不要用Tor去看视频，这是十分不道德的行为</strong>，因为这样会占用大量的带宽，Tor目的是实现匿名登录，而不是去看视频，并且网速并不是很快，只有几十到几百KB。再者，不要将Tor和暗网混淆，Tor是实现匿名网络访问，也只是登录比较大的暗网的一种工具而已，至于有没有其他暗网需要别的浏览器，这个本人就不知道了。<a href="https://www.torproject.org/download/">下载地址，可能已经被屏蔽了</a>下载完成后也是需要配置的，这个自己网上找个视频，基本是傻瓜式操作，就不再赘述了。</p><h1 id="插件（脚本）"><a href="#插件（脚本）" class="headerlink" title="插件（脚本）"></a>插件（脚本）</h1><p>主要介绍一个脚本叫油猴脚本（洋文：Tampermonkey),功能十分的强大，趁现在没有被屏蔽，抓紧时间用！<br>功能有：一键VIP视频解析、去广告（全网），一站式音乐搜索下载；百度网盘直接下载、知乎视频下载等多合一版；百度文库文档免费下载，文档内容自由复制；解除大部分网站的限制；AC-baidu:重定向优化百度搜狗谷歌搜索、去广告、favicon_双列；解除B站区域限制；超星网课助手；购物党自动比价工具-领取淘宝内部券等等。<br>功能强大，操作简单！<a href="https://greasyfork.org/zh-CN">网址：https://greasyfork.org/zh-CN </a><br><img src="/images/Tampermonkey.png" alt="Tampermonkey"><br><strong>只支持Chrome和Firefox</strong>而且只有电脑版，手机党就享不了这个福了。<br>如果你是Chrome就点第一个Tampermonkey，如果是Firefox就点第二个Tampermonkey。安装完之后再回到<a href="https://greasyfork.org/zh-CN">这个界面</a>,点下面的浏览此网站，从中选择你想要的脚本，然后安装，完成！</p><h1 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h1><h2 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h2><p>我改一下鲁迅先生说的话，我向来不禅以最坏的恶意揣测别人。但是我还是想在这里抹黑一下百度。以下是我之前对《搜索引擎百度已死》的跟帖，这也仅仅是一个愤青的抱怨罢了。</p><blockquote><p><em>我平常就搜个网页，搜个题，你给我显示打不开该网页，因为以丢失网络连接。网又分为内网外网，你说墙外的翻不过去就算了，你墙内的不是被封，就是404 not found，你说我要的信息你都给我弄没了，我要你何用。你开始搜索的时候开头都是广告，之后都是百家号的，谁给的钱多把谁放在前面，真正有用的内容搜不到，我觉得没有人会一页一页点开直到第十页的。就算是有，也会发现没半点有用的东西。然后网又分为明网深网和暗网，暗网的安全性在没有绝对的技术的情况下没有保证就不说了，深网也有一些不是社会正能量的内容，看的恶心想吐，影响人的身心健康。你说我为了找点简单的信息非要翻墙挂个洋葱浏览器，去把每个浏览器的库都去爬下来，费不费劲，麻不麻烦。你百度的程序员能负点责任吗，中国这么多人用的搜索引擎，弄的这个样子，你说你不是辣鸡，你是什么！活该被喷，百度已死！</em></p></blockquote><p>百度的搜索可以说是相当的不准确，你搜个舆论八卦用百度是再好不过了。之前前两页也有大量百家号的文章充斥着，并不是说百家号不好，但是百度作为搜索引擎，为自家的流量引流，搜索质量下降严重，这个就不好了。<br>几年前，百度还是你用中文探索世界的入口，但看看如今的百度成了什么样子。百度已经为了钱黑化了。百度的项目多到你根本想不到。给你看看百度全家桶到底长什么样子。<br><img src="/images/baidu.png" alt="百度全家桶"><br>可以说的干的太多真是辛苦你了，可是你一个都没干好。<br>还有这个百度网盘，你看看这个限速，是人能干出来的事吗？叫鸡肋网盘没有任何毛病啊。偶尔几兆我还能接受，你弄个一个多GB的，下载三四个小时，能把你气死。不过对于这种公司我是不会给他一分钱的！<strong>解决方法有两种</strong>：一个是之前说的油猴插件可以破解限速；另一个就是pandownload和pansousou了。可以自行了解一下，我就不再赘述了。<br>包括之前血友吧事件和魏则西事件，百度竞价排名，但是这个不算在公告的范围之内。法律认为这是甲方（广告方）提供钱给乙方（百度），然后乙方给甲方宣传，这是一次合法的交易，所以你就是去上诉，也是没用的。魏则西曾在知乎上发帖过：《你认为人性最大的【恶】是什么》 有兴趣的同学可以自行了解一下。<br><img src="/images/weizexi.png" alt="魏则西发帖"><br>但可惜，百度并没有意识到自己的恶，反而有愈演愈烈之势。</p><h2 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h2><p>这个就不过多谈论了。谷歌一向以准确著称，是你英文搜索和其他语言的最佳选择。用过的人都知道，不过现在谷歌已经退出大陆，唯一提供服务的就是谷歌翻译和谷歌地图，其他的都被屏蔽，不能看了。</p><h1 id="杀毒软件"><a href="#杀毒软件" class="headerlink" title="杀毒软件"></a>杀毒软件</h1><h2 id="火绒"><a href="#火绒" class="headerlink" title="火绒"></a>火绒</h2><p>专业做杀毒，有企业版和个人版，个人版免费。火绒十分的良心，只做杀毒，在杀毒上追求到极致，各位看官可以看一看杀毒软件的评测，你会发现火绒的病毒库是最全的。包括我平时自己写代码也不会出现乱报的现象。</p><h2 id="360安全卫士"><a href="#360安全卫士" class="headerlink" title="360安全卫士"></a>360安全卫士</h2><p>流氓头子，自己还好意思叫安全卫士。（就是捆绑只能我捆绑，安装只能我安装）你装了个360，电脑就卡的不行。还有360安全浏览器，就是多了安全两个字，很多人就都信了他安全的邪。同时，隔三差五的弹出一个窗口，用户体验极差！！写代码也有报错删除的情况！<br>不过也有值得表扬的点，就是电脑只能登陆QQ，不能上网的时候，360挺好用的，除此之外，就没有了。</p><h2 id="腾讯安全管家、金山毒霸"><a href="#腾讯安全管家、金山毒霸" class="headerlink" title="腾讯安全管家、金山毒霸"></a>腾讯安全管家、金山毒霸</h2><p>基本和360安全卫士差不多，就是没有上网修复。</p><h2 id="2345"><a href="#2345" class="headerlink" title="2345"></a>2345</h2><p><del>垃圾中的垃圾，</del>捆绑软件，用你的电脑挖矿（这个就是挖比特币），下载了2345基本就等于中木马病毒了，电脑卡到爆炸。而且有一部分做ghost镜像的（也就是操作系统），都会加上2345，2345给做系统镜像的钱，安装一个用户就给多少钱的。所以它是流氓中头子的头子。</p><h1 id="平常我会用到的软件、网站"><a href="#平常我会用到的软件、网站" class="headerlink" title="平常我会用到的软件、网站"></a>平常我会用到的软件、网站</h1><h2 id="网易见外工作台"><a href="#网易见外工作台" class="headerlink" title="网易见外工作台"></a><a href="https://jianwai.netease.com/">网易见外工作台</a></h2><p>可以实现语音转化成文字，字幕。做视频剪辑的时候非常好用，再者就是做英语听力文本练习的时候也非常好用，直接输出文本，省去了自己打字的烦恼！</p><h2 id="Grammarly"><a href="#Grammarly" class="headerlink" title="Grammarly"></a>Grammarly</h2><p>这个好像是个外国的软件，主要是对语法进行纠正，比如你想写一篇文章，可以根据你对不同用户，选择不同的用词。可以说是写稿的最佳选择，人工智能审核，不用再去求大佬帮你看看文章哪里需要润色润色了。</p><h2 id="QTranslate"><a href="#QTranslate" class="headerlink" title="QTranslate"></a>QTranslate</h2><p>这个及时翻译的，可以对屏幕上的文字进行翻译，操作简单，只用两次敲击Ctrl键。支持谷歌，有道等著名词典的翻译。</p><h2 id="欧路词典"><a href="#欧路词典" class="headerlink" title="欧路词典"></a>欧路词典</h2><p>这里推荐一下朗文词典，可以在<a href="https://www.ldoceonline.com/">官网查词</a>，英英释义解释，比中英解释要好很多。只用差不多记住3000词汇就可以解释所有的词，像一些比较简单的词如banana也在这3000词里面，是不是很酷炫！<br>这个是手机端的，如果你想讲朗文词典弄到自己的手机上，并且不花钱，可以下载一个朗文词典的包，然后用欧路词典打开，内容一样，可能呈现的方式略有不同。</p><h1 id="以下就不是正题了"><a href="#以下就不是正题了" class="headerlink" title="以下就不是正题了"></a>以下就不是正题了</h1><p>其实还挺想谈谈心态方面的影响，最近也看开了很多的事情想写下来，不过之后等有时间再谈谈吧。<br>还有就是想写一篇文章，《为什么我开始准备写博客》，这两个坑我挖下了，之后我再填上。<br>再者就是考虑到Github是一个代码托管平台，我要不写技术点的文章，有点对不起Github，现在还是先用着吧，等到之后有时间再考虑搬家，这个以后就主要用来托管自己的代码，以及编程中的心得体会和血泪史。</p><h2 id="欢迎各位在文章下方留言，以及在右边的对话框私聊我，看到后我会尽快回复，也欢迎邮箱联系"><a href="#欢迎各位在文章下方留言，以及在右边的对话框私聊我，看到后我会尽快回复，也欢迎邮箱联系" class="headerlink" title="欢迎各位在文章下方留言，以及在右边的对话框私聊我，看到后我会尽快回复，也欢迎邮箱联系"></a><strong>欢迎各位在文章下方留言，以及在右边的对话框私聊我，看到后我会尽快回复，也欢迎邮箱联系</strong></h2><p>需要科学浏览的</p><blockquote><p><a href="https://zh.wikipedia.org/wiki/Microsoft_Edge">Microsoft Edge</a><br><a href="https://zh.wikipedia.org/wiki/Google_Chrome">Google Chrome</a><br><a href="https://zh.wikipedia.org/wiki/Firefox">Firefox</a><br><a href="https://zh.wikipedia.org/wiki/Tor">Tor</a><br><a href="https://www.torproject.org/download/">Tor Download</a></p></blockquote><p>不需要科学就能浏览的</p><blockquote><p><a href="https://www.google.com/chrome/?brand=CHBD&gclid=CjwKCAjwqLblBRBYEiwAV3pCJvPY1z5jfAFKG-OCeQKuHyN4-hXX0usBPP_WlWjQqB2a4Lbs3ZGiDBoC0P4QAvD_BwE&gclsrc=aw.ds">Chrome下载的地址</a><br><a href="https://greasyfork.org/zh-CN">Tampermonkey官网</a><br><a href="https://jianwai.netease.com/">网易见外工作台</a><br><a href="https://www.ldoceonline.com/">朗文词典官网</a></p></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>推荐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于我的博客介绍</title>
    <link href="/2019/03/24/%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2019/03/24/%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="主要想法"><a href="#主要想法" class="headerlink" title="主要想法"></a>主要想法</h1><p>本人的博客决定主要分为以下的几个部分，技术分享、知识分享、热点事件的评价、书评（即好书推荐）以及一些可以讲道理的事情（对生活或者是学习工作方面有帮助的推荐）。<span id="more"></span>【本人同时还想将老师的课件的资料分享，不过需要的技术可能还需要学习一段时间，本人博客计划建于Github，主要是因为Gtihub可以帮忙托管，不需要自己维护，对于一个学生来说，维护博客的成本太高，并且有一些网站安全本人也不是很懂，所以选择托管到Github，里面也有很多的大牛，可以共同提高进步，同时Github给了300M的免费存储空间，对于本人是足够用的了，如果要是加一些图片就可能不够了，老师的资料等等也会占一部分，所以本人会再建一个新的，或者搬到一个新的地方，来用来做资料的分享】</p><p>我们来详细说说，对于技术方面，没什么好说的，现在知道的确实是不多，这个是为了之后，可以分享的时候再分享的。对于知识方面，有部分的个人笔记、他人笔记、资料或者是比较好的网课资源推荐等等。热点事件的评价，这个就人云亦云吧，主要发表一下本人的见解和看法。书评，主要为本人比较喜欢的书的评价，以及推荐（或者批评，一般批评的本人就不说了）的原因，这本书的特色。同时会附加上PDF等电子文件的版本，如果要是喜欢看电子版的就可以直接的下载，但是如果还是喜欢支持正版，那么购买纸质书也是一个很好的选择。</p><p>讲道理，这个事情比较有意思，一般的在现实生活中很少有能讲道理的事情，包括之前看的一篇文章《我见过情商最低的行为，就是不停地讲道理》（具体的内容没怎么看），虽然现实生活中很少能有讲道理的事情，但是在这个互联网上，本人还是可以讲道理的，对生活中处理事情，人与人之间的交往都是很有帮助的。之后也会注重版权的问题，对内容的引用都会做链接。</p><hr><p>【Probe 说，<br>引用自由国度的发言，<br>说中国人是蝗虫还真是不错，github被屏蔽了你就开心了？就像蝗虫，有好东西一拥而上，生怕自己抢不到，吃光了或不抢不过了就换下一个地方，继续搞。<br>这种东西需要写篇文章来宣传么，不知道宣传了以后的后果么，本来是个挺好的社区博客，有可能会因为你这一篇文章，搞的大家以后都用不了了，麻烦作者以后发文章前先考虑对社会的影响，对社区的影响，顾全大局…</p><p>就算 github 真的被墙了，错的也是弄出墙的这些人，跟博主有半毛钱关系？<br>看到好的东西不分享出来，自己偷摸留着，这算什么心态？<br>见到出色的产品，我觉得最好的做法就是像博主一样毫无保留的介绍给别人，方便的话也捎带介绍一下墙是什么。人都有自己的判断力的，能通过对比分出好坏，能想明白他在网上受到了多大限制，为什么一些国外网站不被允许访问。<br>github 是好东西，但藏着不让大伙知道就可以不被墙了？我不这么看，反倒是当每个网民都知道事实的时候，就离墙消失的一天不远了，那时候大家安心的去用 github 不是更好吗？】<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">文章链接</a><br>（虽然本人照着这个文章教的做了，但是没几步就卡住了，“另寻高就” 去了，昨天弄了一晚上，只能说明本人试的这个方法不行。或许这就是昨晚的收获，就当弄这个是在打游戏吧，至少时间上应该是可以对等的）</p><hr><h1 id="本人观点"><a href="#本人观点" class="headerlink" title="本人观点"></a>本人观点</h1><p>本人对Probe的说法表示十分赞同，看到好的东西不分享出来，自己偷摸留着，这算什么心态？确实是这个样子，分享是彼此互相进步最快的方法。</p><p>对于免费这个事情，本人想说的是，如果能用钱解决的话就不要去找免费的。（引用yi—yun的博客）在看到了这句话的时候，只恨未能早日相见，确实，为了不值当的几十块钱东找西找，浪费了两三天的时间，还不如去花钱解决来的快速直接。但是如果超过了能接受的范围，那么还是去找别的方法的，毕竟钱这个东西，对于一个学生党还说还是挺重要的。大物作业上找一道题答案，答案找到了，需要注册花$14.97才能看，这个就非常的没有必要了。还有域名这件事吧，本人特地选了个xyz顶级域的域名，主要的原因就是本人乐意考虑到钱的问题，加上刚入门，没有必要弄一个特别贵的，拿这个先练练手，等到想要换一个的时候再考虑搬家的问题。</p><p>对于技术而言，本人坚持技术是无罪的，有罪的是人。具体怎么解释等到之后本人会说明。</p><h1 id="相关声明"><a href="#相关声明" class="headerlink" title="相关声明"></a>相关声明</h1><p>（本人的博客建在墙内，可能会有部分的内容链接等内容会需要FQ才能够浏览，主要是为了文章的准确性）本人的博客内容【不】讨论和涉及任何有关政治的话题，不要在本人的评论区里发表这些言论，导致本人的博客被屏蔽或者更严重的后果。本博客主要用于技术和学习的分享，为更多人提供帮助和方便。</p><p>以后的文章不会像之前一样写的那样“行云流水” ，有一定的思维逻辑和思想深度，篇幅的长度也会比之前的稍微的长一些。会【偶尔】的写一些关于本人心情的博客，如果各位想看，本人非常欢迎，不想看本人也不介意，毕竟写心情的博客就跟写日记一样，没有什么实质性的帮助，但是当中可能会有一些道理等，会在文章中点出来，而写的就是用实例来解释本人所要说的道理，当然也会有部分分享或吐槽的内容。</p><h1 id="自我勉励"><a href="#自我勉励" class="headerlink" title="自我勉励"></a>自我勉励</h1><p>写博客这件事，开始比较的容易，主要的是贵在坚持吧。最近有很多想说想说的，本人会把想说的一一的，具体详细地写出来，由于学习方面的限制，可能写博客的时间不是很充足，尽量保证会在三个星期内写一篇文章要要求自己。（如果没有的话，支持催更，不过这个也是要等本人写的十分好的时候才可能会有的了）</p><p>由于篇幅限制，感觉已经写了很多了，部分的人可能已经不愿再看了，如果再有什么补充再之后发吧！</p><blockquote><p><a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">《搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门》</a></p></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>基本框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>关于本博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
